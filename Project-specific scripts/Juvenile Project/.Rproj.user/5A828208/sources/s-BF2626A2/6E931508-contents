

setwd("C:/Users/Courtney.S.Couch/Desktop/")

#### LOAD LIBRARY PACKAGES AND  FUNCTIONS----------

library(gdata)             # needed for drop_levels()
library(reshape)           # reshape library includes the cast() function used below
library(splitstackshape)
library(dplyr, warn.conflicts = FALSE)
library(plyr)
library(tidyr)
library(tibble)
library(tidyverse)
library(plotrix)

#### LOAD RAW CNET ANNOTATIONS DATA EXPORT FILE AND DATA WRANGLING----- 
cnet<-read.csv("2020_ASamoa_LBSP_raw.csv")
View(cnet)

#Drop and rename  some metadata columns: in our case: Priority, Analyst, Row, Column)
cnet<-cnet %>% dplyr::select (-c(Priority, Analyst, Row, Column))
View(cnet)


#Rename  colum name "Label" -optional
names(cnet)[names(cnet) == "Label"] <- "Cnet_SHORT_CODE"
head(cnet)

#Load file with complete label set codes to be able to map Tier_3c annotations to Tier_1 fuctional group summaries
#We provided ESD's labelset codes as an example
lu<-read.csv("CNet_LabelCodes.csv")
View(lu)

# Clean-up & wrangling

#Merge annotations and look up table then tweak column names
cnet<-left_join(cnet,lu)
nrow(cnet)
cnet$POINTS<-1
cnet$METHOD<-"CNET"
cnet$IMAGE<-cnet$Name
View(cnet)

#save as different data frame so you can go back to original dataframe before major tweaks
ab<-cnet 

#Make changes to specific categories (e.g. pooling up categories) - We pool up encrusting macroalgae and create a Halimeda Tier 1 category
# Create a class for Encrusting Macroalgae "EMA"
levels(ab$TIER_1)<-c(levels(ab$TIER_1), "EMA")
levels(ab$T3_DESC)<-c(levels(ab$T3_DESC), "Encrusting macroalga")
ab[ab$TIER_3 %in% c("LOBO","PESP", "EMA"),]$TIER_1<-"EMA"
ab[ab$TIER_3 %in% c("LOBO","PESP", "EMA"),]$TIER_2<-"EMA"

# Create a class for Halimeda "class"HALI"
ab$TIER_3<-as.character(ab$TIER_3)
ab$TIER_1<-as.character(ab$TIER_1)

for (i in 1:nrow(ab)){ #opening brace
  if(ab$TIER_3[i] =="HALI"){ #c&p
    ab$TIER_1[i]="HALI" #c&p
  } #c&p
} #closing curly brace for entire for loop

# Creating a subset dataframe with only the Halimeda dataset to make sure for loop worked correctly
hal<-subset(ab,TIER_3=="HALI")
head(hal)
View(hal)

#Look at summary of data to check for major errors
ab<-droplevels(ab)
summary(ab)
View(ab)


# Data QC ----------------------------------------------------------------------

#Check that all points have been annotated
all.tab2<-ddply(ab,.(Annotator,IMAGE),summarize,npoints=sum(POINTS))
miss.annot<-subset(all.tab2,npoints<10);miss.annot #This dataframe should be empty


##### GENERATE BENTHIC COVER DATA DATA AT ISLAND  LEVEL FOR TIER 1 CATEGORIES ------------------

View(ab)

#Create table of counts: Sum up all tier 1 points by ANNOTATOR. You need to insert zero values where there was no coral at a site (for example)
## For Tier 1
photoT1<-as.data.frame(ab %>% dplyr::group_by(Region, Island, Site, Annotator, IMAGE, TIER_1) %>%
                         dplyr::summarise(n_points = sum(POINTS, na.rm=TRUE)) %>%
                         spread(TIER_1, n_points,fill=0))
  photoT1 <-photoT1 %>%  dplyr::select(Region:UC)
  View(photoT1) #table should now be in the wide format
  
## Table of proportions for  Tier 3  
photoT3<-as.data.frame(ab %>% dplyr::group_by(Region, Island, Site, Annotator, IMAGE, TIER_3) %>%
                           dplyr::summarise(n_points = sum(POINTS, na.rm=TRUE)) %>%
                           spread(TIER_3, n_points,fill=0)) 
photoT3 <-photoT3 %>%  dplyr::select(Region:ZO)
View(photoT3) #table should now be in the wide format


##Check on the total number of points annotated for each image: should be a total of 10
photoT1$TOTAL <-rowSums(photoT1[6:ncol(photoT1)]) # column numbers refer to the columns that have your benthic categories
head(photoT1)

## Remove Tape, Wand, and Moble Fauna for Tier 1 counts dataframe
photoT1 <-photoT1 %>%  dplyr::select(Region:UC, -MF, -TW)
photoT1$NEW_TOTAL <-rowSums(photoT1[6:ncol(photoT1)])

## Remove Tape, Wand, and Moble Fauna for Tier 3 counts dataframe
photoT3$TOTAL <-rowSums(photoT3[6:ncol(photoT3)])
photoT3 <-photoT3 %>%  dplyr::select(Region:ZO, -MOBF, -TAPE, -WAND)
photoT3$NEW_TOTAL <-rowSums(photoT3[6:ncol(photoT3)])
head(photoT3)


# Calculate % Cover for each IMAGE ----------------------------------------

#Tier 1
# Calculate % cover of each category for each image
data.cols<-colnames(photoT1[6:ncol(photoT1)])
T1image.cover <- photoT1 %>% 
  mutate_at(vars(CCA:UC), funs((. / NEW_TOTAL)*100)) %>% 
  dplyr::select(Region,Island,Site,IMAGE,data.cols)
head(T1image.cover)

#Tier 3
# Calculate % cover of each category for each image
data.cols<-colnames(photoT3[6:ncol(photoT3)])
T3image.cover <- photoT3 %>% 
  mutate_at(vars(ACAS:ZO), funs((. / NEW_TOTAL)*100)) %>% 
  dplyr::select(Region,Island,Site,IMAGE,data.cols)
head(T3image.cover)


# Pool all images in a SITE to add up points for a given category ---------

#Tier 1
#define your data columns
data.cols<-colnames(photoT1[6:ncol(photoT1)])

T1site.sum<-photoT1 %>% group_by(Region, Island, Site) %>% 
  dplyr::summarise(across(c(CCA:NEW_TOTAL), list(sum)))%>% 
  rename_with(~str_remove(., '_1')) #removes _1 from column names that dplyr automatically adds

#Divide number of points for a given category by the total number of points at a sites (all images combined)
T1site.cover <- T1site.sum %>% 
  mutate_at(vars(CCA:UC), funs((. / NEW_TOTAL)*100)) %>% 
  dplyr::select(Region,Island,Site,data.cols)
  head(T1site.cover)
  

#Tier 3
#define your data columns
data.cols<-colnames(photoT3[6:ncol(photoT3)])
  
T3site.sum<-photoT3 %>% group_by(Region, Island, Site) %>% 
    dplyr::summarise(across(c(ACAS:NEW_TOTAL), list(sum)))%>% 
    rename_with(~str_remove(., '_1')) #removes _1 from column names that dplyr automatically adds
  
#Divide number of points for a given category by the total number of points at a sites (all images combined)
T3site.cover <- T3site.sum %>% 
    mutate_at(vars(ACAS:ZO), funs((. / NEW_TOTAL)*100)) %>% 
    dplyr::select(Region,Island,Site,data.cols)
head(T3site.cover)  



# Calculate ISLAND mean and SE cover --------------------------------------


### Tier 1 summary  by island:
T1_islandcover<-T1site.cover %>% group_by(Region, Island) %>% 
  dplyr::summarise(across(CCA:NEW_TOTAL, list(mean=mean, se=std.error))) 
write.csv(T1_islandcover, file = "T1_islandcover.csv", row.names = FALSE)


### Tier 3 summary  by island:
T3_islandcover<-T3site.cover %>% group_by(Region, Island) %>% 
  dplyr::summarise(across(ACAS:ZO, list(mean=mean, se=std.error))) 
write.csv(T3_islandcover, file = "T3_islandcover.csv", row.names = FALSE)

  


