out<-ab.tr
out[ ,which(names(out)==DATAcol[1]):ncol(out)]=out[ ,which(names(out)==DATAcol[1]):ncol(out)]/out$TRANSECTAREA # selects every row and 2nd to last columns
colnames(out)[which(colnames(out) == 'GROUP')] <- grouping_field #change group to whatever your grouping field is.
return(out)
colnames(out)[which(colnames(out) == 'GROUP')] <- "GENUS_CODE" #change group to whatever your grouping field is.
return(out)
#Calc_RDden_Transect
rdden.gen<-Calc_RDden_Transect(data=data,grouping_field ="GENUS_CODE") # Density of recent dead colonies by condition, you will need to subset which ever condition you want. The codes ending in "S" are the general categories
View(awd.all)
#leave NAs for severity and extent? STILL MANY COLUMNS WITH LOGICAL NA = OK?
tmp.lev<-levels(as.factor(x$GENRD1)); tmp.lev
View(rdden.gen)
View(rd.gen)
awd.all$RDEXTENT1[which(awd.all$RD1==""&awd.all$RDq!=0)]
awd.all[which(awd.all$RD1=="" & awd.all$RDq!=0),]
awd.all[which(awd.all$RD1== NA & awd.all$RDq!=0),]
awd.all[which(awd.all$RD1==" " & awd.all$RDq!=0),]
levels(awd.all$RD1)
levels(as.factror(awd.all$RD1))
levels(as.factor(awd.all$RD1))
awd.all[which(awd.all$RD1=="",]
awd.all[which(awd.all$RD1==""),]
awd.all$RDEXTENT1[which(awd.all$RD1=="")]<-0
#Calc_RDden_Transect
rdden.gen<-Calc_RDden_Transect(data=awd.all,grouping_field ="GENUS_CODE") # Density of recent dead colonies by condition, you will need to subset which ever condition you want. The codes ending in "S" are the general categories
#Calc_RDden_Transect
awd.all$RD1[which(awd.all$RD1=="")]<- "NONE"
awd.all$RD2[which(awd.all$RD2=="")]<- "NONE"
awd.all$RDEXTENT2[which(awd.all$RD2=="NONE")]<-0
awd.all$RD3[which(awd.all$RD3=="")]<- "NONE"
awd.all$RDEXTENT3[which(awd.all$RD3=="NONE")]<-0
rdden.gen<-Calc_RDden_Transect(data=awd.all,grouping_field ="GENUS_CODE") # Density of recent dead colonies by condition, you will need to subset which ever condition you want. The codes ending in "S" are the general categories
rdden.gen<-Calc_RDden_Transect(data=awd.all[awd.all$ISLAND == "Maug",],grouping_field ="GENUS_CODE") # Density of recent dead colonies by condition, you will need to subset which ever condition you want. The codes ending in "S" are the general categories
awd.all[awd.all$ISLAND == "Maug",]
rdden.gen<-Calc_RDden_Transect(data=awd.all[awd.all$ISLAND == "Guam",],grouping_field ="GENUS_CODE") # Density of recent dead colonies by condition, you will need to subset which ever condition you want. The codes ending in "S" are the general categories
rdden.gen<-Calc_RDden_Transect(data=awd.all[awd.all$ISLAND == "ASuncion",],grouping_field ="GENUS_CODE") # Density of recent dead colonies by condition, you will need to subset which ever condition you want. The codes ending in "S" are the general categories
rdden.gen<-Calc_RDden_Transect(data=awd.all[awd.all$ISLAND == "Asuncion",],grouping_field ="GENUS_CODE") # Density of recent dead colonies by condition, you will need to subset which ever condition you want. The codes ending in "S" are the general categories
rdden.gen<-Calc_RDden_Transect(data=awd.all[awd.all$ISLAND == "Pagan",],grouping_field ="GENUS_CODE") # Density of recent dead colonies by condition, you will need to subset which ever condition you want. The codes ending in "S" are the general categories
rdden.gen<-Calc_RDden_Transect(data=awd.all[awd.all$ISLAND == "Rota",],grouping_field ="GENUS_CODE") # Density of recent dead colonies by condition, you will need to subset which ever condition you want. The codes ending in "S" are the general categories
rdden.gen<-Calc_RDden_Transect(data=awd.all[awd.all$ISLAND == "Tinian",],grouping_field ="GENUS_CODE") # Density of recent dead colonies by condition, you will need to subset which ever condition you want. The codes ending in "S" are the general categories
rdden.gen<-Calc_RDden_Transect(data=awd.all[awd.all$ISLAND == "Saipan",],grouping_field ="GENUS_CODE") # Density of recent dead colonies by condition, you will need to subset which ever condition you want. The codes ending in "S" are the general categories
awd.all$RDEXTENT1[which(awd.all$RD1=="NONE")]<-0
rdden.gen<-Calc_RDden_Transect(data=awd.all[awd.all$ISLAND == "Saipan",],grouping_field ="GENUS_CODE") # Density of recent dead colonies by condition, you will need to subset which ever condition you want. The codes ending in "S" are the general categories
rdden.gen<-Calc_RDden_Transect(data=awd.all[awd.all$ISLAND == "Asuncion",],grouping_field ="GENUS_CODE") # Density of recent dead colonies by condition, you will need to subset which ever condition you want. The codes ending in "S" are the general categories
awd.all$RD3[which(is.na(awd.all$RD3))]<- "NONE"
rdden.gen<-Calc_RDden_Transect(data=awd.all[awd.all$ISLAND == "Maug",],grouping_field ="GENUS_CODE") # Density of recent dead colonies by condition, you will need to subset which ever condition you want. The codes ending in "S" are the general categories
rdden.gen<-Calc_RDden_Transect(data=awd.all,grouping_field ="GENUS_CODE") # Density of recent dead colonies by condition, you will need to subset which ever condition you want. The codes ending in "S" are the general categories
View(Calc_RDden_Transect)
View(Calc_RDden_Transect)
getwd()
View(jwd.all)
#Calc_Diversity_Transect - for taxoncode includes both genus and species
acd.div_G<-Calc_Diversity_Transect(awd.all,"GENUS_CODE");colnames(acd.div)[4:7] <- paste("Adult", colnames(acd.div[,c(4:7)]), sep = "_")
library(tidyverse)
#Calc_Diversity_Transect - for taxoncode includes both genus and species
acd.div_G<-Calc_Diversity_Transect(awd.all,"GENUS_CODE");colnames(acd.div)[4:7] <- paste("Adult", colnames(acd.div[,c(4:7)]), sep = "_")
library(maditr)
library(gridExtra)
library(reshape2)
library(plyr)
#install.packages("ggpmisc")
library(hydroGOF)
library(tidyverse)
library(ggpmisc)
library(lme4)
library(nlme)
library(ggplot2)
library(sjPlot)
library(pander)
library(tidyr)
library(AICcmodavg)
library(MuMIn)
library(knitr)
library(glmmTMB)
library(car)
#Calc_Diversity_Transect - for taxoncode includes both genus and species
acd.div_G<-Calc_Diversity_Transect(awd.all,"GENUS_CODE");colnames(acd.div)[4:7] <- paste("Adult", colnames(acd.div[,c(4:7)]), sep = "_")
source("T:/Benthic/Data/SfM/ScriptFiles/SfMvDiver Plotting Functions.R")
source("C:/Users/Jonathan.Charendoff/Documents/GitHub/Benthic-Scripts/Functions/Benthic_Functions_newApp_vTAOfork.R")
source("C:/Users/Jonathan.Charendoff/Documents/GitHub/Benthic-scripts/Functions/core_functions.R")
#Calc_Diversity_Transect - for taxoncode includes both genus and species
acd.div_G<-Calc_Diversity_Transect(awd.all,"GENUS_CODE");colnames(acd.div)[4:7] <- paste("Adult", colnames(acd.div[,c(4:7)]), sep = "_")
#Calc_Diversity_Transect - for taxoncode includes both genus and species
acd.div_G<-Calc_Diversity_Transect(awd.all,"GENUS_CODE");colnames(acd.div_G)[4:7] <- paste("Adult", colnames(acd.div_G[,c(4:7)]), sep = "_")
jcd.div_G<-Calc_Diversity_Transect(jwd.all,"GENUS_CODE");colnames(jcd.div_G)[4:7] <- paste("Juv", colnames(jcd.div_G[,c(4:7)]), sep = "_")
all.div_G<-left_join(acd.div_G,jcd.div_G);View(all.div_G) #Combine adult and juvenile diversity dfs
# Calculate the Ratio of genus to species for adults and juvs at the site level
spgen<-ddply(tmpA,.(METHOD,SITEVISITID,SITE,TAXAGROUP),summarize,
n=length(TAXAGROUP))
tmpA<-merge(awd.all,h22tax, by= c("REGION","OBS_YEAR","TAXONCODE"))
#Calc_Diversity_Transect- at just species level
taxa<-read.csv("T:/Benthic/Data/Lookup Tables/2013-22_Taxa_MASTER.csv")
taxa$TAXONCODE<-taxa$SPCODE
h22tax<-subset(taxa,OBS_YEAR=="2022")
#Merge data with taxa list to identify taxon group
awd.all$OBS_YEAR<-as.factor(awd.all$OBS_YEAR)
tmpA<-merge(awd.all,h22tax, by= c("REGION","OBS_YEAR","TAXONCODE"))
tmpJ<-merge(jwd.all,h22tax, by= c("REGION","OBS_YEAR","TAXONCODE"))
# Calculate the Ratio of genus to species for adults and juvs at the site level
spgen<-ddply(tmpA,.(METHOD,SITEVISITID,SITE,TAXAGROUP),summarize,
n=length(TAXAGROUP))
spgenW_Adult<-dcast(spgen, formula=METHOD+ SITE + SITEVISITID ~ TAXAGROUP, value.var="n",fill=0)
spgenW_Adult$GENSPratio_Adult<-spgenW_Adult$GENUS/spgenW_Adult$SPECIES
spgenW_Adult$logGENSPratio_Adult<-log(spgenW_Adult$GENSPratio_Adult)
spgenW_Adult<-subset(spgenW_Adult, select= -c(GENUS,SPECIES))
#Juvs
spgen<-ddply(tmpJ,.(METHOD,SITEVISITID,SITE,TAXAGROUP),summarize,
n=length(TAXAGROUP))
spgenW_Juv<-dcast(spgen, formula=METHOD+ SITE + SITEVISITID ~ TAXAGROUP, value.var="n",fill=0)
spgenW_Juv$GENSPratio_Juv<-spgenW_Juv$GENUS/spgenW_Juv$SPECIES
spgenW_Juv$logGENSPratio_Juv<-log(spgenW_Juv$GENSPratio_Juv)
spgenW_Juv<-subset(spgenW_Juv, select= -c(GENUS,SPECIES))
#Merge together survey meta data and sector area files and check for missmatches
meta<-left_join(survey_site,sectors)
meta[which(is.na(meta$AREA_HA)),]
nrow(survey_site)
nrow(meta)
all.diversity<-left_join(all.div,meta);head(all.diversity)
all.diversity_G<-left_join(all.div_G,meta);head(all.diversity)
all.diversity_G<-left_join(all.div_G,meta);head(all.diversity_G)
all.diversity_G<-left_join(all.diversity_G,spgenW_Adult)
all.diversity_G<-left_join(all.diversity_G,spgenW_Juv)
is.na(all.diversity_G) <- sapply(all.diversity_G, is.infinite) #Change infinite values to NAs
write.csv(all.diversity_G,file="C:/Users/Jonathan.Charendoff/Documents/GitHub/Benthic-Scripts/SfM/Marianas 2022/Output/MARAMP22_DIVERSITY_SITE_Genus.csv",row.names = F)
div<-read.csv("C:/Users/Jonathan.Charendoff/Documents/GitHub/Benthic-Scripts/SfM/Marianas 2022/Output/MARAMP22_DIVERSITY_SITE_Genus.csv")[,-40]
View(div)
div<-read.csv("C:/Users/Jonathan.Charendoff/Documents/GitHub/Benthic-Scripts/SfM/Marianas 2022/Output/MARAMP22_DIVERSITY_SITE_Genus.csv")
View(div)
div<-read.csv("C:/Users/Jonathan.Charendoff/Documents/GitHub/Benthic-Scripts/SfM/Marianas 2022/Output/MARAMP22_DIVERSITY_SITE_Genus.csv")[,-40]
sfm_div<-subset(div,METHOD=="SfM")
diver_div<-subset(div,METHOD=="DIVER")
diver_div<-subset(div,METHOD=="Diver")
# #Set up in wide format
colnames(sfm_div)[c(4:11,40:43)] <- paste("SfM_", colnames(sfm_div[,c(4:11,40:43)]), sep = "");sfm_div<-dplyr::select(sfm_div,-c(METHOD))
colnames(diver_div)[c(4:11,40:43)] <- paste("Diver_", colnames(diver_div[,c(4:11,40:43)]), sep = "");diver_div<-dplyr::select(diver_div,-c(METHOD))
div.wide<-left_join(sfm_div,diver_div)
hist(div$Adult_Shannon)
m<-lmer(Adult_Shannon~METHOD + (1|SEC_NAME),data=div)
DPlots(m,div)
leveneTest(Adult_Shannon~METHOD, data = div)
hist(div$Adult_Richness)
p1<-Plot1to1_new(div.wide,"SfM_Adult_Shannon","Diver_Adult_Shannon","SfM Adult Shannon Diversity","Diver Adult Shannon Diversity",0.25,1.6)
Plot1to1_new<-function(d,response_variable,predictor_variable,r_name,p_name,x,y){
#sub<-d[d$taxon,]
d$Y<-d[,response_variable]
d$X<-d[,predictor_variable]
mx_val<-max(d$Y, d$X, na.rm = TRUE)
lm_fit <- lm(Y ~ X, data=d)
predicted_df <- data.frame(Y_pred = predict(lm_fit, d), X=d$X)
corr<-cor.test(d$X, d$Y, method="pearson")
rmse<-rmse(d$Y, d$X,na.rm=TRUE)
r_text<-paste("RMSE = ", round(rmse,digits = 2),"\n r = ", round((corr$estimate),2), sep="")
p1<-ggplot(d, aes(x=X, y=Y)) +
geom_point(size=1) +
geom_abline(slope=1, intercept=0) +
#geom_jitter(width=.25,height=0,color="black",alpha=0.5)+
#geom_smooth(method="lm", color="red", linetype="dashed", se=F) +
geom_line(linetype = "dashed", color='red',data = predicted_df, aes(x=X, y=Y_pred))+
geom_label(label=r_text,x=x,y=y, nudge_y=-0.1, nudge_x=1,label.size=0.35, color="black", fill="white") +
theme_bw()+
theme(panel.grid.major = element_blank()
,panel.grid.minor = element_blank())+
scale_x_continuous(limits=c(0,mx_val)) +
#scale_y_continuous(limits=c(0,mx_val)) +
ylab(r_name) +  xlab(p_name)
return(p1)
} #
PlotMethod<-function(d,grouping_field,metric_field,genus_field,metric_name,x,y,siglabel){
d$GROUP<-d[,grouping_field]
d$METRIC<-d[,metric_field]
s<-subset(d,GROUP==genus_field)
p<-ggplot(s, aes(x=METHOD, y=METRIC, fill=METHOD)) +
geom_boxplot() +
#geom_label(label=siglabel, x=x,y=y,label.size = 0.35,color = "black", fill="white")+
theme_bw() +
theme(
axis.text.x = element_text(angle = 0)
,plot.background = element_blank()
,panel.grid.major = element_blank()
,panel.grid.minor = element_blank()
,axis.ticks.x = element_blank() # no x axis ticks
,axis.title.x = element_text( vjust = -.0001)
,legend.position="none")+ # adjust x axis to lower the same amount as the genus labels
labs(x="Method",y=metric_name)
return(p)
}
PlotHabitat<-function(d,grouping_field,metric_field,genus_field,metric_name,x,y,siglabel){
d$GROUP<-d[,grouping_field]
d$METRIC<-d[,metric_field]
s<-subset(d,GROUP==genus_field)
p<-ggplot(s, aes(x=HAB_R1, y=METRIC, fill=METHOD)) +
geom_boxplot() +
theme_bw() +
geom_label(label=siglabel, x=x,y=y,label.size = 0.35,color = "black", fill="white")+
theme(
axis.text.x = element_text(angle = 90)
,plot.background = element_blank()
,panel.grid.major = element_blank()
,panel.grid.minor = element_blank()
,axis.title.x = element_text( vjust = -.0001) # adjust x axis to lower the same amount as the genus labels
,legend.position="none")+
labs(x="Habitat Type",y=metric_name)
return(p)
}
PlotDepth<-function(d,grouping_field,metric_field,metric_field2,genus_field,metric_name,x,y,siglabel){
d$GROUP<-d[,grouping_field]
d$METRIC<-d[,metric_field]
newdat.lme$METRIC2<-newdat.lme[,metric_field2]
s<-subset(d,GROUP==genus_field)
p<-ggplot(s, aes(x = MAX_DEPTH_M, y = METRIC, color = METHOD) ) +
geom_point(aes(colour = factor(METHOD))) +
geom_line(data = newdat.lme, aes(y = METRIC2), size = 1)+
geom_ribbon(data = newdat.lme, aes(y = NULL, ymin = lower, ymax = upper,
color = NULL, fill = METHOD),alpha = .15)+
geom_label(label=siglabel, x=x,y=y,label.size = 0.35,color = "black", fill="white")+
theme_bw() +
theme(
axis.text.x = element_text(angle = 0)
,plot.background = element_blank()
,panel.grid.major = element_blank()
,panel.grid.minor = element_blank()
,axis.title.x = element_text( vjust = -.0001) # adjust x axis to lower the same amount as the genus labels
,legend.position="none")+
scale_x_continuous(breaks=seq(0,30,5))+
labs(x="Max Depth (m)",y=metric_name)
return(p)
}
PlotDepth_NP<-function(d,grouping_field,metric_field,genus_field,metric_name){
d$GROUP<-d[,grouping_field]
d$METRIC<-d[,metric_field]
s<-subset(d,GROUP==genus_field)
p1<-ggplot(s, aes(x=MAX_DEPTH_M, y=METRIC,fill = METHOD,color=METHOD)) +
#geom_smooth(method="lm")+
geom_point(size=1) +
theme_bw()+
theme(axis.text.x = element_text(angle = 0)
,plot.background = element_blank()
,panel.grid.major = element_blank()
,panel.grid.minor = element_blank()
,axis.title.x = element_text( vjust = -.0001) # adjust x axis to lower the same amount as the genus labels
,legend.position="none")+
scale_x_continuous(breaks=seq(0,30,5))+
labs(x="Max Depth (m)",y=metric_name)
return(p1)
}
p1<-Plot1to1_new(div.wide,"SfM_Adult_Shannon","Diver_Adult_Shannon","SfM Adult Shannon Diversity","Diver Adult Shannon Diversity",0.25,1.6)
p2<-Plot1to1_new(div.wide,"SfM_Adult_Hills","Diver_Adult_Hills","SfM Adult Diversity (Hills)","Diver Adult Diversity (Hills)",2.5,10)
p3<-Plot1to1_new(div.wide,"SfM_Adult_Richness","Diver_Adult_Richness","SfM Adult Species Richness","Diver Adult Species Richness",6,20)
corr<-cor.test(div.wide$Diver_logGENSPratio_Adult, div.wide$SfM_logGENSPratio_Adult, method="pearson")
rmse<-rmse(div.wide$SfM_logGENSPratio_Adult,div.wide$Diver_logGENSPratio_Adult, na.rm=TRUE)
r_text<-paste("RMSE = ", round(rmse,digits = 2),"\n r = ", round((corr$estimate),2), sep="")
lm_fit <- lm(SfM_logGENSPratio_Adult ~ Diver_logGENSPratio_Adult, data=div.wide)
predicted_df <- data.frame(Y_pred = predict(lm_fit, div.wide), X=div.wide$Diver_logGENSPratio_Adult)
p4<-ggplot(na.omit(div.wide[,-38]), aes(x=Diver_logGENSPratio_Adult, y=SfM_logGENSPratio_Adult)) +
geom_point(size=1) +
geom_abline(slope=1, intercept=0) +
#geom_jitter(width=.25,height=0,color="black",alpha=0.5)+
#geom_smooth(method="lm", color="red", linetype="dashed", se=F) +
geom_line(linetype = "dashed", color='red',data = predicted_df, aes(x=X, y=Y_pred))+
geom_label(y=0,x=-1.25, label=r_text, nudge_y=-0.1, nudge_x=1,label.size=0.35, color="black", fill="white") +
theme_bw()+
theme(panel.grid.major = element_blank()
,panel.grid.minor = element_blank())+
ylab("SfM Log Adult Genus:Species Ratio") +  xlab("Diver Log Adult Genus:Species Ratio")
AdultDiv<-grid.arrange(p1,p2,p3,p4,nrow=2,ncol=2)
ggsave(plot<-AdultDiv,file="C:/Users/Jonathan.Charendoff/Documents/GitHub/Benthic-Scripts/SfM/Marianas 2022/Output/PLOTS/Adult_Diversity_Genus.png",width=10,height=8)
p1<-Plot1to1_new(na.omit(div.wide[,-c(38:42, 51:54)]),"SfM_Juv_Shannon","Diver_Juv_Shannon","SfM Juv Diversity (Shannon)","Diver Juv Diversity (Shannon)",0.25,1.6)
p2<-Plot1to1_new(na.omit(div.wide[,-c(38:42, 51:54)]),"SfM_Juv_Hills","Diver_Juv_Hills","SfM Juv Diversity (Hills)","Diver Juv Diversity (Hills)",2,10)
p3<-Plot1to1_new(na.omit(div.wide[,-c(38:42, 51:54)]),"SfM_Juv_Richness","Diver_Juv_Richness","SfM Juv Richness","Diver Juv Richness",2,15)
corr<-cor.test(div.wide$Diver_logGENSPratio_Juv, div.wide$SfM_logGENSPratio_Juv, method="pearson")
rmse<-rmse(div.wide$SfM_logGENSPratio_Juv,div.wide$Diver_logGENSPratio_Juv, na.rm=TRUE)
r_text<-paste("RMSE = ", round(rmse,digits = 2),"\n r = ", round((corr$estimate),2), sep="")
test <- na.omit(div.wide[,-38])
lm_fit <- lm(SfM_logGENSPratio_Juv ~ Diver_logGENSPratio_Juv, data=test)
predicted_df <- data.frame(Y_pred = predict(lm_fit, test), X=test$Diver_logGENSPratio_Juv)
p4<-ggplot(na.omit(div.wide[,-38]), aes(x=Diver_logGENSPratio_Juv, y=SfM_logGENSPratio_Juv)) +
geom_point(size=1) +
geom_abline(slope=1, intercept=0) +
#geom_jitter(width=.25,height=0,color="black",alpha=0.5)+
#geom_smooth(method="lm", color="red", linetype="dashed", se=F) +
geom_line(linetype = "dashed", color='red',data = predicted_df, aes(x=X, y=Y_pred))+
geom_label(y=4,x=-1, label=r_text, nudge_y=-0.1, nudge_x=1,label.size=0.35, color="black", fill="white") +
theme_bw()+
theme(panel.grid.major = element_blank()
,panel.grid.minor = element_blank())+
ylab("SfM Log Juv Genus:Species Ratio") +  xlab("Diver Log Juv Genus:Species Ratio")
JuvDiv<-grid.arrange(p1,p2,p3,p4,nrow=2,ncol=2)
#survey_master<-read.csv("C:/Users/Courtney.S.Couch/Documents/GitHub/fish-paste/data/SURVEY MASTER.csv")
setwd("C:/Users/Jonathan.Charendoff/Documents/GitHub/Benthic-Scripts/SfM/Marianas 2022")
survey_master <- read.csv("SURVEY MASTER.csv")
View(survey_master)
View(df)
# SFM/ADULT: CLEAN ANALYSIS READY DATA ----------------------------------------------------
df<-read.csv("T:/Benthic/Data/SfM/QC/MARAMP2022_QCdsfm_ADULT.csv")
View(df)
# Prepare for InPort-Merge together survey master table and Inport ready (Corinne ran final updates) colony-level data ------------------------------------
j <- read.csv("T:/Benthic/Data/SfM/QC/MARAMP2022_QCdsfm_JUV.csv");j<-subset(j,select= -c(X))
j <- read.csv("T:/Benthic/Data/SfM/QC/MARAMP2022_QCdsfm_JUV.csv")
View(j)
ad <- read.csv("T:/Benthic/Data/SfM/QC/MARAMP2022_QCdsfm_ADULT.csv");ad<-subset(ad,select= -c(site_seg))
View(ad)
#SfM/ADULT: Column Names Changes -------------------------------------------------
colnames(ad)[colnames(ad)=="RD_1"]<-"RECENTDEAD_1" #Change column name
colnames(ad)[colnames(ad)=="RDCAUSE1"]<-"RECENT_SPECIFIC_CAUSE_CODE_1" #Change column name
colnames(ad)[colnames(ad)=="RD_2"]<-"RECENTDEAD_2" #Change column name
colnames(ad)[colnames(ad)=="RD_3"]<-"RECENTDEAD_3" #Change column name
colnames(ad)[colnames(ad)=="RDCAUSE2"]<-"RECENT_SPECIFIC_CAUSE_CODE_2" #Change column name
colnames(ad)[colnames(ad)=="RDCAUSE3"]<-"RECENT_SPECIFIC_CAUSE_CODE_3" #Change column name
colnames(ad)[colnames(ad)=="FRAGMENT"]<-"FRAGMENT_YN" #Change column name
colnames(ad)[colnames(ad)=="CON_1"]<-"COND" #Change column name
colnames(ad)[colnames(ad)=="CON_2"]<-"CONDITION_2" #Change column name
colnames(ad)[colnames(ad)=="CON_3"]<-"CONDITION_3" #Change column name
colnames(ad)[colnames(ad)=="SEV_1"]<-"SEVERITY_1" #Change column name
colnames(ad)[colnames(ad)=="SEV_2"]<-"SEVERITY_2" #Change column name
colnames(ad)[colnames(ad)=="SEV_3"]<-"SEVERITY_3" #Change column name
colnames(ad)[colnames(ad)=="Shape_Leng"]<-"COLONYLENGTH" #Change column name
#Modify colunns to match standard REA data
ad$COLONYLENGTH<-ad$COLONYLENGTH*100 #convert from m to cm
colnames(ad)[colnames(ad)=="Shape_Length"]<-"COLONYLENGTH" #Change column name
#Modify colunns to match standard REA data
ad$COLONYLENGTH<-ad$COLONYLENGTH*100 #convert from m to cm
ad$COLONYLENGTH<-ifelse(ad$NO_COLONY==-1,NA,ad$COLONYLENGTH) #make sure that the segements that had no colonies have a colony length = 0
View(ad)
ifelse
?ifelse
ad$COLONYLENGTH<-ifelse(ad$NO_COLONY==-1,0,ad$COLONYLENGTH) #make sure that the segements that had no colonies have a colony length = 0
ad$COLONYLENGTH<-ifelse(ad$NO_COLONY==-1,NA,ad$COLONYLENGTH) #make sure that the segements that had no colonies have a colony length = 0
ad$S_ORDER<-ifelse(ad$NO_COLONY==0 ,"Scleractinia",NA) #add S_order column
ad$SPCODE<-ifelse(ad$NO_COLONY==-1 ,"AAAA",as.character(ad$SPCODE)) #Change spcode to AAAA if there are no colonies observed in the segment
ad$COLONYID<-ifelse(ad$NO_COLONY==-1 ,NA,ad$COLONYID) #Change colonyid to NA if there are no colonies observed in the segment. COLONYID is a placeholder until Data Services can integrate it properly
#Create Genuscode and taxonname column from spcode
genlookup<-read.csv("T:/Benthic/Data/Lookup Tables/Genus_lookup.csv")
ad<-CreateGenusCode(ad,genlookup)
library(dplyr)
ad<-CreateGenusCode(ad,genlookup)
colnames(ad)[colnames(ad)=="SPCODE"]<-"TAXONCODE" #Change column name
head(ad)
colnames(survey_master)[colnames(survey_master)=="new_MIN_DEPTH_M"]<-"MIN_DEPTH_M" #Change column name
colnames(survey_master)[colnames(survey_master)=="new_MAX_DEPTH_M"]<-"MAX_DEPTH_M" #Change column name
colnames(survey_master)[colnames(survey_master)=="LATITUDE_SV"]<-"LATITUDE" #Change column name
colnames(survey_master)[colnames(survey_master)=="LONGITUDE_SV"]<-"LONGITUDE" #Change column name
ad <- read.csv("T:/Benthic/Data/SfM/QC/MARAMP2022_QCdsfm_ADULT.csv")
View(ad)
ad <- read.csv("T:/Benthic/Data/SfM/QC/MARAMP2022_QCdsfm_ADULT.csv");ad<-subset(ad,select= -c(site_seg, MOSAIC_ISSUES))
ad <- read.csv("T:/Benthic/Data/SfM/QC/MARAMP2022_QCdsfm_ADULT.csv");ad<-subset(ad,select= -c(site_seg, MOSAIC_ISSUES, SEGAREA))
stringi::stri_sub(ad$SITE[which(nchar(ad$SITE) == 7)], 5, 4) <- "00"
stringi::stri_sub(ad$SITE[which(nchar(ad$SITE) == 8)], 5, 4) <- "0"
stringi::stri_sub(j$SITE[which(nchar(j$SITE) == 7)], 5, 4) <- "00"
stringi::stri_sub(j$SITE[which(nchar(j$SITE) == 8)], 5, 4) <- "0"
# Prepare for InPort-Merge together survey master table and Inport ready (Corinne ran final updates) colony-level data ------------------------------------
j <- read.csv("T:/Benthic/Data/SfM/QC/MARAMP2022_QCdsfm_JUV.csv")
stringi::stri_sub(j$SITE[which(nchar(j$SITE) == 7)], 5, 4) <- "00"
stringi::stri_sub(j$SITE[which(nchar(j$SITE) == 8)], 5, 4) <- "0"
#colnames(ad)[colnames(ad)=="RD_2"]<-"RECENTDEAD_2" #Change column name
#colnames(ad)[colnames(ad)=="RD_3"]<-"RECENTDEAD_3" #Change column name
#colnames(ad)[colnames(ad)=="RDCAUSE2"]<-"RECENT_SPECIFIC_CAUSE_CODE_2" #Change column name
#colnames(ad)[colnames(ad)=="RDCAUSE3"]<-"RECENT_SPECIFIC_CAUSE_CODE_3" #Change column name
#colnames(ad)[colnames(ad)=="CON_1"]<-"COND" #Change column name
#colnames(ad)[colnames(ad)=="CON_2"]<-"CONDITION_2" #Change column name
#colnames(ad)[colnames(ad)=="CON_3"]<-"CONDITION_3" #Change column name
#colnames(ad)[colnames(ad)=="SEV_1"]<-"SEVERITY_1" #Change column name
#colnames(ad)[colnames(ad)=="SEV_2"]<-"SEVERITY_2" #Change column name
#colnames(ad)[colnames(ad)=="SEV_3"]<-"SEVERITY_3" #Change column name
colnames(ad)[colnames(ad)=="Shape_Length"]<-"Shape_Leng" #Change column name
colnames(j)[colnames(j)=="Shape_Length"]<-"Shape_Leng" #Change column name
#Modify colunns to match standard REA data
ad$COLONYLENGTH<-ifelse(ad$NO_COLONY==-1,NA,ad$COLONYLENGTH) #make sure that the segements that had no colonies have a colony length = NA
ad$S_ORDER<-ifelse(ad$NO_COLONY==0 ,"Scleractinia",NA) #add S_order column
#Modify colunns to match standard REA data
ad$Shape_Leng<-ifelse(ad$SNO_COLONY==-1,NA,ad$Shape_Leng) #make sure that the segements that had no colonies have a colony length = NA
ad$Shape_Leng[which(ad$NO_COLONY == -1)]
#Modify colunns to match standard REA data
ad$Shape_Leng[which(ad$NO_COLONY == -1)]<- NA#make sure that the segements that had no colonies have a colony length = NA
ad$S_ORDER<-ifelse(ad$NO_COLONY==0 ,"Scleractinia",NA) #add S_order column
ad$SPCODE<-ifelse(ad$NO_COLONY==-1 ,"AAAA",as.character(ad$SPCODE)) #Change spcode to AAAA if there are no colonies observed in the segment
ad$COLONYID<-ifelse(ad$NO_COLONY==-1 ,NA,ad$COLONYID) #Change colonyid to NA if there are no colonies observed in the segment. COLONYID is a placeholder until Data Services can integrate it properly
#Create Genuscode and taxonname column from spcode
genlookup<-read.csv("T:/Benthic/Data/Lookup Tables/Genus_lookup.csv")
ad<-CreateGenusCode(ad,genlookup)
ad <- read.csv("T:/Benthic/Data/SfM/QC/MARAMP2022_QCdsfm_ADULT.csv");ad<-subset(ad,select= -c(site_seg, MOSAIC_ISSUES, SEGAREA))
stringi::stri_sub(ad$SITE[which(nchar(ad$SITE) == 7)], 5, 4) <- "00"
stringi::stri_sub(ad$SITE[which(nchar(ad$SITE) == 8)], 5, 4) <- "0"
#colnames(ad)[colnames(ad)=="RD_2"]<-"RECENTDEAD_2" #Change column name
#colnames(ad)[colnames(ad)=="RD_3"]<-"RECENTDEAD_3" #Change column name
#colnames(ad)[colnames(ad)=="RDCAUSE2"]<-"RECENT_SPECIFIC_CAUSE_CODE_2" #Change column name
#colnames(ad)[colnames(ad)=="RDCAUSE3"]<-"RECENT_SPECIFIC_CAUSE_CODE_3" #Change column name
#colnames(ad)[colnames(ad)=="CON_1"]<-"COND" #Change column name
#colnames(ad)[colnames(ad)=="CON_2"]<-"CONDITION_2" #Change column name
#colnames(ad)[colnames(ad)=="CON_3"]<-"CONDITION_3" #Change column name
#colnames(ad)[colnames(ad)=="SEV_1"]<-"SEVERITY_1" #Change column name
#colnames(ad)[colnames(ad)=="SEV_2"]<-"SEVERITY_2" #Change column name
#colnames(ad)[colnames(ad)=="SEV_3"]<-"SEVERITY_3" #Change column name
colnames(ad)[colnames(ad)=="Shape_Length"]<-"Shape_Leng" #Change column name
#Modify colunns to match standard REA data
ad$Shape_Leng[which(ad$NO_COLONY == -1)]<- NA#make sure that the segements that had no colonies have a colony length = NA
ad$S_ORDER<-ifelse(ad$NO_COLONY==0 ,"Scleractinia",NA) #add S_order column
ad$SPCODE<-ifelse(ad$NO_COLONY==-1 ,"AAAA",as.character(ad$SPCODE)) #Change spcode to AAAA if there are no colonies observed in the segment
ad$COLONYID<-ifelse(ad$NO_COLONY==-1 ,NA,ad$COLONYID) #Change colonyid to NA if there are no colonies observed in the segment. COLONYID is a placeholder until Data Services can integrate it properly
#Merge with Survey Master
survey_master<-read.csv("C:/Users/Jonathan.Charendoff/Documents/GitHub/Benthic-Scripts/SfM/Marianas 2022/SURVEY MASTER.csv")
colnames(survey_master)[colnames(survey_master)=="new_MIN_DEPTH_M"]<-"MIN_DEPTH_M" #Change column name
colnames(survey_master)[colnames(survey_master)=="new_MAX_DEPTH_M"]<-"MAX_DEPTH_M" #Change column name
colnames(survey_master)[colnames(survey_master)=="LATITUDE_SV"]<-"LATITUDE" #Change column name
colnames(survey_master)[colnames(survey_master)=="LONGITUDE_SV"]<-"LONGITUDE" #Change column name
ad<-left_join(ad,survey_master[,c("MISSIONID","REGION","OBS_YEAR","ISLAND","SITEVISITID","SITE","SEC_NAME",
"REEF_ZONE","DEPTH_BIN","HABITAT_CODE","LATITUDE","LONGITUDE","MIN_DEPTH_M","MAX_DEPTH_M")])
head(ad)
View(ad)
View(survey_master)
ad<-left_join(ad,survey_master[,c("MISSIONID","REGION","OBS_YEAR","ISLAND","SITEVISITID","SITE","SEC_NAME",
"REEF_ZONE","DEPTH_BIN","HABITAT_CODE","LATITUDE","LONGITUDE","MIN_DEPTH_M","MAX_DEPTH_M", "DATE_")])
if(nrow(ad)!=nrow(ad)) {cat("WARNING:Data were dropped")} #Check that adult data weren't dropped
substr(ad$DATE_, 1, 10)
View(ad)
ad$DATE_ <- substr(ad$DATE_, 1, 10)
ad <- read.csv("T:/Benthic/Data/SfM/QC/MARAMP2022_QCdsfm_ADULT.csv");ad<-subset(ad,select= -c(site_seg, MOSAIC_ISSUES, SEGAREA))
stringi::stri_sub(ad$SITE[which(nchar(ad$SITE) == 7)], 5, 4) <- "00"
stringi::stri_sub(ad$SITE[which(nchar(ad$SITE) == 8)], 5, 4) <- "0"
#colnames(ad)[colnames(ad)=="RD_2"]<-"RECENTDEAD_2" #Change column name
#colnames(ad)[colnames(ad)=="RD_3"]<-"RECENTDEAD_3" #Change column name
#colnames(ad)[colnames(ad)=="RDCAUSE2"]<-"RECENT_SPECIFIC_CAUSE_CODE_2" #Change column name
#colnames(ad)[colnames(ad)=="RDCAUSE3"]<-"RECENT_SPECIFIC_CAUSE_CODE_3" #Change column name
#colnames(ad)[colnames(ad)=="CON_1"]<-"COND" #Change column name
#colnames(ad)[colnames(ad)=="CON_2"]<-"CONDITION_2" #Change column name
#colnames(ad)[colnames(ad)=="CON_3"]<-"CONDITION_3" #Change column name
#colnames(ad)[colnames(ad)=="SEV_1"]<-"SEVERITY_1" #Change column name
#colnames(ad)[colnames(ad)=="SEV_2"]<-"SEVERITY_2" #Change column name
#colnames(ad)[colnames(ad)=="SEV_3"]<-"SEVERITY_3" #Change column name
colnames(ad)[colnames(ad)=="Shape_Length"]<-"Shape_Leng" #Change column name
#Modify colunns to match standard REA data
ad$Shape_Leng[which(ad$NO_COLONY == -1)]<- NA#make sure that the segements that had no colonies have a colony length = NA
ad$SPCODE<-ifelse(ad$NO_COLONY==-1 ,"AAAA",as.character(ad$SPCODE)) #Change spcode to AAAA if there are no colonies observed in the segment
ad$COLONYID<-ifelse(ad$NO_COLONY==-1 ,NA,ad$COLONYID) #Change colonyid to NA if there are no colonies observed in the segment. COLONYID is a placeholder until Data Services can integrate it properly
#Merge with Survey Master
survey_master<-read.csv("C:/Users/Jonathan.Charendoff/Documents/GitHub/Benthic-Scripts/SfM/Marianas 2022/SURVEY MASTER.csv")
colnames(survey_master)[colnames(survey_master)=="new_MIN_DEPTH_M"]<-"MIN_DEPTH_M" #Change column name
colnames(survey_master)[colnames(survey_master)=="new_MAX_DEPTH_M"]<-"MAX_DEPTH_M" #Change column name
colnames(survey_master)[colnames(survey_master)=="LATITUDE_SV"]<-"LATITUDE" #Change column name
colnames(survey_master)[colnames(survey_master)=="LONGITUDE_SV"]<-"LONGITUDE" #Change column name
ad<-left_join(ad,survey_master[,c("MISSIONID","REGION","OBS_YEAR","ISLAND","SITEVISITID","SITE",
"REEF_ZONE","DEPTH_BIN","HABITAT_CODE","LATITUDE","LONGITUDE","MIN_DEPTH_M","MAX_DEPTH_M", "DATE_")])
ad$SITE_SEG <- paste(ad$SITE, ad$SEGMENT, sep = "_")
col_order <- colnames(read.csv("T:/DataManagement/NCEI Archive Packages/SFM_Demography/SfM_Adult_demographic_MHI_2019"))
col_order <- colnames(read.csv("T:/DataManagement/NCEI Archive Packages/SFM_Demography/SfM_Adult_demographic_MHI_2019.csv"))
test <- colnames(ad)
test %in% col_order
which(test %in% col_order)
test[which(test %in% col_order)]
test[which(test %in% col_order) == F]
?%in%
test[which(!(test %in% col_order))]
ad<-left_join(ad,survey_master[,c("MISSIONID","REGION","OBS_YEAR","ISLAND","SITEVISITID","SITE",
"REEF_ZONE","DEPTH_BIN","HABITAT_CODE","LATITUDE","LONGITUDE","MIN_DEPTH_M","MAX_DEPTH_M", "DATE_")])
j <- read.csv("T:/Benthic/Data/SfM/QC/MARAMP2022_QCdsfm_JUV.csv")
ad <- read.csv("T:/Benthic/Data/SfM/QC/MARAMP2022_QCdsfm_ADULT.csv");ad<-subset(ad,select= -c(site_seg, MOSAIC_ISSUES, SEGAREA))
survey_master<-read.csv("C:/Users/Jonathan.Charendoff/Documents/GitHub/Benthic-Scripts/SfM/Marianas 2022/SURVEY MASTER.csv")
stringi::stri_sub(ad$SITE[which(nchar(ad$SITE) == 7)], 5, 4) <- "00"
stringi::stri_sub(ad$SITE[which(nchar(ad$SITE) == 8)], 5, 4) <- "0"
colnames(ad)[colnames(ad)=="Shape_Length"]<-"Shape_Leng" #Change column name
#Modify columns to match standard REA data
ad$Shape_Leng[which(ad$NO_COLONY == -1)]<- NA#make sure that the segements that had no colonies have a colony length = NA
ad$SPCODE<-ifelse(ad$NO_COLONY==-1 ,"AAAA",as.character(ad$SPCODE)) #Change spcode to AAAA if there are no colonies observed in the segment
ad$COLONYID<-ifelse(ad$NO_COLONY==-1 ,NA,ad$COLONYID) #Change colonyid to NA if there are no colonies observed in the segment. COLONYID is a placeholder until Data Services can integrate it properly
#Merge with Survey Master
colnames(survey_master)[colnames(survey_master)=="new_MIN_DEPTH_M"]<-"MIN_DEPTH_M" #Change column name
colnames(survey_master)[colnames(survey_master)=="new_MAX_DEPTH_M"]<-"MAX_DEPTH_M" #Change column name
colnames(survey_master)[colnames(survey_master)=="LATITUDE_SV"]<-"LATITUDE" #Change column name
colnames(survey_master)[colnames(survey_master)=="LONGITUDE_SV"]<-"LONGITUDE" #Change column name
ad<-left_join(ad,survey_master[,c("REGION","OBS_YEAR","ISLAND","SITEVISITID","SITE",
"REEF_ZONE","DEPTH_BIN","HABITAT_CODE","LATITUDE","LONGITUDE","MIN_DEPTH_M","MAX_DEPTH_M", "DATE_")])
head(ad)
if(nrow(ad)!=nrow(ad)) {cat("WARNING:Data were dropped")} #Check that adult data weren't dropped
ad$DATE_ <- substr(ad$DATE_, 1, 10)
ad$SITE_SEG <- paste(ad$SITE, ad$SEGMENT, sep = "_")
colnames(ad)[colnames(ad)=="OLD_DEAD"]<-"OLDDEAD"
colnames(ad)[colnames(ad)=="LATITUDE"]<-"LATITUDE_LOV"
colnames(ad)[colnames(ad)=="LONGITUDE"]<-"LONGITUDE_LOV"
test[which(!(test %in% col_order))]
test <- colnames(ad)
test[which(!(test %in% col_order))]
ad <- ad[, col_order]
write.csv(ad,file="T:/DataManagement/NCEI Archive Packages/SFM_Demography/SfM_Adult_demographic_MARI_2022.csv")
#JUV
j <- read.csv("T:/Benthic/Data/SfM/QC/MARAMP2022_QCdsfm_JUV.csv")
View(j)
j<-subset(j,select= -c(FRAGMENT.1))
stringi::stri_sub(j$SITE[which(nchar(j$SITE) == 7)], 5, 4) <- "00"
stringi::stri_sub(j$SITE[which(nchar(j$SITE) == 8)], 5, 4) <- "0"
colnames(j)[colnames(j)=="Shape_Length"]<-"Shape_Leng" #Change column name
j$Shape_Leng<-ifelse(j$NO_COLONY==-1,NA,j$Shape_Leng) #make sure that the segements that had no colonies have a colony length = 0
j$SPCODE<-ifelse(j$NO_COLONY==-1 ,"AAAA",as.character(j$SPCODE)) #Change spcode to AAAA if there are no colonies observed in the segment
j$COLONYID<-ifelse(j$NO_COLONY==-1 ,NA,j$COLONYID) #Change colonyid to NA if there are no colonies observed in the segment
j<-left_join(j,survey_master[,c("REGION","OBS_YEAR","ISLAND","SITEVISITID","SITE","DATE_",
"REEF_ZONE","DEPTH_BIN","HABITAT_CODE","LATITUDE","LONGITUDE","MIN_DEPTH_M","MAX_DEPTH_M")])
col_order <- colnames(read.csv("T:/DataManagement/NCEI Archive Packages/SFM_Demography/SfM_Juv_demographic_MHI_2019.csv"))
col_order <- colnames(read.csv("T:/DataManagement/NCEI Archive Packages/SFM_Demography/SfM_Juvenile_demographic_MHI_2019.csv"))
test <- colnames(j)
test[which(!(test %in% col_order))]
colnames(j)[colnames(j)=="LATITUDE"]<-"LATITUDE_LOV"
colnames(j)[colnames(j)=="LONGITUDE"]<-"LONGITUDE_LOV"
test <- colnames(j)
test[which(!(test %in% col_order))]
j <- j[, col_order]
#Write out dataframes
write.csv(j,file="T:/DataManagement/NCEI Archive Packages/SFM_Demography/SfM_Juvenile_demographic_MARI_2022.csv")
version
View(survey_master)
View(survey_master[survey_master$OBS_YEAR == 2022 & survey_master$MISSIONID == "RA2201",])
View(survey_master[survey_master$OBS_YEAR == 2022 & survey_master$REGION == "MARIAN",])
View(survey_master[survey_master$OBS_YEAR == 2022 & survey_master$REGION == "MARIAN" & survey_master$TYPE == "RANDOM",])
sitelist <- read.csv("C:/Users/Jonathan.Charendoff/Documents/GitHub/Benthic-Scripts/SfM/Method Comparision/MARAMP2022_SfM_Meta.csv")
View(sitelist)
