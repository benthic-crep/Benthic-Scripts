N=length(X),
Nnz=length(which((X+Y)>0)),
Nz=length(which((X+Y)==0)),
Mean..=mean(rbind(Y,X),na.rm=T),
MeanBias=mean(Y-X,na.rm=T),
MedianBias=median(Y-X,na.rm=T),
MeanBias_sc=meanbias_sc(Y,X),
MedianBias_sc=medianbias_sc(Y,X),
MAE.mn=mean(abs(Y-X),na.rm=T),
MAE.md=median(abs(Y-X),na.rm=T),
MAE_sc.mn=mae_sc(Y,X),
MAE_sc.se=seae_sc(Y,X),
MAE_sc.md=mdae_sc(Y,X),
RMSE.mn=rmse.mn(Y,X),
RMSE.md=rmse.md(Y,X),
Log2AR_mn=mean(log2AR(X,Y),na.rm = T),
Log2AR_se=sd(log2AR(X,Y),na.rm=T)/sqrt(length(X)))
rmse.ssss<-subset(dfError,GENUS_CODE=="SSSS"&Comp%in%c("D1vD2","S1vS2","MO"))
rmse.ssss<-rmse.ssss %>% mutate(Comp=recode(Comp,
`D1vD2`="In water Observer",
#                                           `Mbar`="NA",
`MO`="Method Error",
#                                          `Obar`="NA",
`S1vS2`="SfM Observer"))
comporder<-c("In water Observer","SfM Observer","Method Error")
rmse.ssss <- rmse.ssss[ order(match(rmse.ssss$Comp, comporder)),]
rmse.ssss$Comp<-as.character(rmse.ssss$Comp)
rmse.ssss$Comp<-factor(rmse.ssss$Comp, levels = comporder)
rmse.ssss$Metric<-as.character(rmse.ssss$Metric)
rmse.ssss$Metric<-factor(rmse.ssss$Metric,
levels=c("AdColDen","JuvColDen","DZGN_G_prev","CHRO_prev",
"BLE_prev","Ave.cl","Ave.rd","Ave.od"))
#B_A
BiasUnscaled<-ggplot(subset(rmse.ssss,Comp=="Method Error"),
aes(x=Metric, y=MeanBias,ymin=MeanBias-MAE.mn,ymax=MeanBias+MAE.mn, color=Metric)) +
geom_hline(yintercept = 0)+
geom_point(size=5) +
geom_linerange(size=2)+
geom_text(aes(x=2,y=6.5,label="SFM Bigger"),color="gray")+
geom_text(aes(x=2,y=-6.5,label="Diver Bigger"),color="gray")+
guides(fill=FALSE) +
#facet_wrap(~Metric, scales="fixed", labeller=label_parsed) +
scale_y_continuous(name="Unscaled Mean Bias (+/- MAE)",limits=c(-6.5,6.5))+
xlab("Metric")+
ggtitle("Unscaled Bias and Error Between Diver and SFM\n43 segments @ 28 Sites")+
theme_bw() +
theme(
axis.text.x = element_text(angle = 0)
,plot.background = element_blank()
,panel.grid.major = element_blank()
,panel.grid.minor = element_blank()
,axis.ticks.x = element_blank() # no x axis ticks
,axis.title.x = element_text( vjust = -.0001) # adjust x axis to lower the same amount as the genus labels
,legend.position="none"
)
BiasUnscaled
BiasScaled<-ggplot(subset(rmse.ssss,Comp=="Method Error"),
aes(x=Metric, y=MeanBias_sc,ymin=MeanBias_sc-MAE_sc.mn,ymax=MeanBias_sc+MAE_sc.mn, color=Metric)) +
geom_hline(yintercept = 0)+
geom_point(size=5) +
geom_linerange(size=2)+
geom_text(aes(x=2,y=.5,label="SFM Bigger"),color="gray")+
geom_text(aes(x=2,y=-.5,label="Diver Bigger"),color="gray")+
guides(fill=FALSE) +
#facet_wrap(~Metric, scales="fixed", labeller=label_parsed) +
scale_y_continuous(name="Midpoint Scaled Mean Bias (+/- Scaled MAE)",limits=c(-.5,.5))+
xlab("Metric")+
ggtitle("Scaled Bias and Error Between Diver and SFM\n43 segments @ 28 Sites")+
theme_bw() +
theme(
axis.text.x = element_text(angle = 0)
,plot.background = element_blank()
,panel.grid.major = element_blank()
,panel.grid.minor = element_blank()
,axis.ticks.x = element_blank() # no x axis ticks
,axis.title.x = element_text( vjust = -.0001) # adjust x axis to lower the same amount as the genus labels
,legend.position="none"
)
BiasScaled
Bias2=grid.arrange(BiasUnscaled,BiasScaled,nrow=1,ncol=2)
Bias2
ggsave(plot=BiasUnscaled,file="T:/Benthic/Data/SfM/ComparisonPlots_20200204/AllMetricsComp/BiasUnscaled_Count00_Comparision.pdf",width=8,height=8)
ggsave(plot=BiasScaled,file="T:/Benthic/Data/SfM/ComparisonPlots_20200204/AllMetricsComp/BiasScaled_Count00_Comparision.pdf",width=8,height=8)
ggsave(plot=Bias2,file="T:/Benthic/Data/SfM/ComparisonPlots_20200204/AllMetricsComp/BiasUn_and_Scaled_Count00_Comparision.pdf",width=16,height=8)
UnscaledMAE<-ggplot(rmse.ssss, aes(x=Comp, y=MAE.mn, fill=Metric)) +
geom_hline(yintercept = 0)+
geom_bar(position="dodge",stat="identity") +
guides(fill=FALSE) + facet_wrap(~Metric, scales="fixed", labeller=label_parsed) +
ylab("Mean Absolute Error")+
xlab("Error Comparison")+
ggtitle("Unscaled Mean Absolute Error Across Observers and Methods\n43 segments @ 28 Sites")+
theme_bw() +
theme(
axis.text.x = element_text(angle = 0)
,plot.background = element_blank()
,panel.grid.major = element_blank()
,panel.grid.minor = element_blank()
,axis.ticks.x = element_blank() # no x axis ticks
,axis.title.x = element_text( vjust = -.0001) # adjust x axis to lower the same amount as the genus labels
,legend.position="none"
)
UnscaledMAE
ScaledMAE<-ggplot(rmse.ssss, aes(x=Comp, y=MAE_sc.mn, fill=Metric)) +
geom_hline(yintercept = c(0,1))+
geom_bar(position="dodge",stat="identity") +
geom_errorbar(aes(ymin=MAE_sc.mn-MAE_sc.se, ymax=MAE_sc.mn+MAE_sc.se),width=.15, position=position_dodge(.9)) +
guides(fill=FALSE) + facet_wrap(~Metric, scales="fixed", labeller=label_parsed) +
ylab("Midpoint Scaled Mean Absolute Error")+
ylim(c(0,.5))+
xlab("Error Comparison")+
ggtitle("Scaled Mean Absolute Error Across Observers and Methods\n43 segments @ 28 Sites")+
theme_bw() +
theme(
axis.text.x = element_text(angle = 0)
,plot.background = element_blank()
,panel.grid.major = element_blank()
,panel.grid.minor = element_blank()
,axis.ticks.x = element_blank() # no x axis ticks
,axis.title.x = element_text( vjust = -.0001) # adjust x axis to lower the same amount as the genus labels
,legend.position="none"
)
ScaledMAE
MAE2=grid.arrange(UnscaledMAE,ScaledMAE,nrow=1,ncol=2)
MAE2
#Scaled MAE plot for report
#Changing metric names to make more sense
rmse.ssss<-rmse.ssss %>% mutate(Metric.new=recode(Metric,
`AdColDen`="`Adult Density`",
`Ave.cl`="`Average Colony Length`",
`Ave.od`="`Average Old Dead`",
`Ave.rd`="`Average Recent Dead`",
`BLE_prev`="`Bleaching Prevalence`",
`CHRO_prev`="`Chronic Disease Prevalence`",
`DZGN_G_prev`="`Acute Disease Prevalence`",
`JuvColDen`="`Juvenile Density`"))
ScaledMAE_report<-ggplot(rmse.ssss, aes(x=Comp, y=MAE_sc.mn, fill=Metric.new)) +
geom_hline(yintercept = c(0,1))+
geom_bar(position="dodge",stat="identity") +
geom_errorbar(aes(ymin=MAE_sc.mn-MAE_sc.se, ymax=MAE_sc.mn+MAE_sc.se),width=.15, position=position_dodge(.9)) +
guides(fill=FALSE) + facet_wrap(.~ `Metric.new` , scales="fixed", labeller=label_parsed) +
ylab("Midpoint Scaled Mean Absolute Error")+
ylim(c(0,.5))+
xlab("Error Comparison")+
theme_bw() +
theme(
axis.text.x = element_text(angle = 0)
,plot.background = element_blank()
,panel.grid.major = element_blank()
,panel.grid.minor = element_blank()
,axis.ticks.x = element_blank() # no x axis ticks
,axis.title.x = element_text( vjust = -.0001) # adjust x axis to lower the same amount as the genus labels
,legend.position="none"
)
ScaledMAE_report
ggsave(plot=UnscaledMAE,file="T:/Benthic/Data/SfM/ComparisonPlots_20200204/AllMetricsComp/MAEUnscaled_Count00_Comparision.pdf",width=8,height=8)
ggsave(plot=ScaledMAE,file="T:/Benthic/Data/SfM/ComparisonPlots_20200204/AllMetricsComp/MAEScaled_Count00_Comparision.pdf",width=8,height=8)
ggsave(plot=ScaledMAE_report,file="T:/Benthic/Data/SfM/ComparisonPlots_20200204/AllMetricsComp/MAEScaled_Report_Comparision.png",width=10,height=8)
ggsave(plot=MAE2,file="T:/Benthic/Data/SfM/ComparisonPlots_20200204/AllMetricsComp/MAEUn_and_Scaled_Count00_Comparision.pdf",width=16,height=8)
SSSSmet=subset(data.sm,GENUS_CODE=="SSSS")[,c("SS","MethodRep","AdColDen","JuvColDen","DZGN_G_prev","CHRO_prev",
"BLE_prev","Ave.cl","Ave.rd","Ave.od")]
head(SSSSmet)
Smm=melt(SSSSmet,id.vars = c("SS","MethodRep"))
head(Smm)
#Changing metric names to make more sense
Smm<-Smm %>% mutate(variable=recode(variable,
`AdColDen`="`Adult Density`",
`Ave.cl`="`Average Colony Length`",
`Ave.od`="`Average Old Dead`",
`Ave.rd`="`Average Recent Dead`",
`BLE_prev`="`Bleaching Prevalence`",
`CHRO_prev`="`Chronic Disease Prevalence`",
`DZGN_G_prev`="`Acute Disease Prevalence`",
`JuvColDen`="`Juvenile Density`"))
Smm<-Smm %>% mutate(MethodRep=recode(MethodRep,
`Diver_1`="`Diver 1`",
`Diver_2`="`Diver 2`",
`SfM_1`="`SfM 1`",
`SfM_2`="`SfM 2`"))
colnames(Smm)[colnames(Smm)=="MethodRep"]<-"Method and Observer" #Change column name
head(Smm)
tail(Smm)
SSSSmet=subset(data.sm,GENUS_CODE=="SSSS")[,c("SS","MethodRep","AdColDen","JuvColDen","DZGN_G_prev","CHRO_prev",
"BLE_prev","Ave.cl","Ave.rd","Ave.od")]
Smm=melt(SSSSmet,id.vars = c("SS","MethodRep"))
#Changing metric names to make more sense
Smm<-Smm %>% mutate(variable=recode(variable,
`AdColDen`="`Adult Density`",
`Ave.cl`="`Average Colony Length`",
`Ave.od`="`Average Old Dead`",
`Ave.rd`="`Average Recent Dead`",
`BLE_prev`="`Bleaching Prevalence`",
`CHRO_prev`="`Chronic Disease Prevalence`",
`DZGN_G_prev`="`Acute Disease Prevalence`",
`JuvColDen`="`Juvenile Density`"))
Smm<-Smm %>% mutate(MethodRep=recode(MethodRep,
`DIVER_1`="Diver 1",
`DIVER_2`="Diver 2",
`SfM_1`="SfM 1",
`SfM_2`="SfM 2"))
colnames(Smm)[colnames(Smm)=="MethodRep"]<-"Method and Observer" #Change column name
head(Smm)
SSSSmet=subset(data.sm,GENUS_CODE=="SSSS")[,c("SS","MethodRep","AdColDen","JuvColDen","DZGN_G_prev","CHRO_prev",
"BLE_prev","Ave.cl","Ave.rd","Ave.od")]
Smm=melt(SSSSmet,id.vars = c("SS","MethodRep"))
#Changing metric names to make more sense
Smm<-Smm %>% mutate(variable=recode(variable,
`AdColDen`="Adult Density",
`Ave.cl`="Average Colony Length",
`Ave.od`="Average Old Dead",
`Ave.rd`="Average Recent Dead",
`BLE_prev`="Bleaching Prevalence",
`CHRO_prev`="Chronic Disease Prevalence",
`DZGN_G_prev`="Acute Disease Prevalence",
`JuvColDen`="Juvenile Density"))
Smm<-Smm %>% mutate(MethodRep=recode(MethodRep,
`DIVER_1`="Diver 1",
`DIVER_2`="Diver 2",
`SfM_1`="SfM 1",
`SfM_2`="SfM 2"))
colnames(Smm)[colnames(Smm)=="MethodRep"]<-"Method and Observer" #Change column name
Boxes=ggplot(Smm,aes(x=MethodRep,y=value,fill=variable))+
geom_violin(draw_quantiles = c(.05,.5,.95),size=.5)+
geom_jitter(width=.25,height=0,color="gray",alpha=0.5)+
facet_wrap(.~variable,scale='free_y',nrow=2)+
guides(fill=FALSE)+
ggtitle("Distibutions of Metrics by Method/Observer")+
ylab("Value")+theme_bw()
Boxes
SSSSmet=subset(data.sm,GENUS_CODE=="SSSS")[,c("SS","MethodRep","AdColDen","JuvColDen","DZGN_G_prev","CHRO_prev",
"BLE_prev","Ave.cl","Ave.rd","Ave.od")]
Smm=melt(SSSSmet,id.vars = c("SS","MethodRep"))
#Changing metric names to make more sense
Smm<-Smm %>% mutate(variable=recode(variable,
`AdColDen`="Adult Density",
`Ave.cl`="Average Colony Length",
`Ave.od`="Average Old Dead",
`Ave.rd`="Average Recent Dead",
`BLE_prev`="Bleaching Prevalence",
`CHRO_prev`="Chronic Disease Prevalence",
`DZGN_G_prev`="Acute Disease Prevalence",
`JuvColDen`="Juvenile Density"))
Smm<-Smm %>% mutate(MethodRep=recode(MethodRep,
`DIVER_1`="Diver 1",
`DIVER_2`="Diver 2",
`SfM_1`="SfM 1",
`SfM_2`="SfM 2"))
Boxes=ggplot(Smm,aes(x=MethodRep,y=value,fill=variable))+
geom_violin(draw_quantiles = c(.05,.5,.95),size=.5)+
geom_jitter(width=.25,height=0,color="gray",alpha=0.5)+
facet_wrap(.~variable,scale='free_y',nrow=2)+
guides(fill=FALSE)+
ggtitle("Distibutions of Metrics by Method/Observer")+
ylab("Value")+
xlab("Method and Observer")+theme_bw()
Boxes
ggsave(plot=Boxes,
file="T:/Benthic/Data/SfM/ComparisonPlots_20200204/AllMetricsComp/Violin_Comparision.pdf",
width=12,height=8)
ggsave(plot=Boxes,
file="T:/Benthic/Data/SfM/ComparisonPlots_20200204/AllMetricsComp/Violin_Comparision.pdf",
width=10,height=6)
Boxes=ggplot(Smm,aes(x=MethodRep,y=value,fill=variable))+
geom_violin(draw_quantiles = c(.05,.5,.95),size=.5)+
geom_jitter(width=.25,height=0,color="gray",alpha=0.5)+
facet_wrap(.~variable,scale='free_y',nrow=2)+
theme(axis.title.y = element_text(face="bold"),
axis.title.x = element_text(face="bold"))+
guides(fill=FALSE)+
ylab("Value")+
xlab("Method and Observer")+theme_bw()
Boxes
Boxes=ggplot(Smm,aes(x=MethodRep,y=value,fill=variable))+
geom_violin(draw_quantiles = c(.05,.5,.95),size=.5)+
geom_jitter(width=.25,height=0,color="gray",alpha=0.5)+
facet_wrap(.~variable,scale='free_y',nrow=2)+
guides(fill=FALSE)+
ylab("Value")+
xlab("Method and Observer")+theme_bw()+
theme(axis.title.y = element_text(face="bold"),
axis.title.x = element_text(face="bold"))+
Boxes
Boxes=ggplot(Smm,aes(x=MethodRep,y=value,fill=variable))+
geom_violin(draw_quantiles = c(.05,.5,.95),size=.5)+
geom_jitter(width=.25,height=0,color="gray",alpha=0.5)+
facet_wrap(.~variable,scale='free_y',nrow=2)+
guides(fill=FALSE)+
ylab("Value")+
xlab("Method and Observer")+theme_bw()+
theme(axis.title.y = element_text(face="bold"),
axis.title.x = element_text(face="bold"))
Boxes
ggsave(plot=Boxes,
file="T:/Benthic/Data/SfM/ComparisonPlots_20200204/AllMetricsComp/Violin_Comparision.pdf",
width=10,height=6)
Boxes=ggplot(Smm,aes(x=MethodRep,y=value,fill=variable))+
geom_violin(draw_quantiles = c(.05,.5,.95),size=.5)+
geom_jitter(width=.25,height=0,color="gray",alpha=0.5)+
facet_wrap(.~variable,scale='free_y',nrow=2)+
guides(fill=FALSE)+
ylab("Value")+
xlab("Method and Observer")+theme_bw()+
theme(axis.title.y = element_text(face="bold"),
axis.title.x = element_text(face="bold"))
Boxes
ggsave(plot=Boxes,
file="T:/Benthic/Data/SfM/ComparisonPlots_20200204/AllMetricsComp/Violin_Comparision.pdf",
width=10,height=6)
Boxes=ggplot(Smm,aes(x=MethodRep,y=value,fill=variable))+
geom_violin(draw_quantiles = c(.05,.5,.95),size=.5)+
geom_jitter(width=.25,height=0,color="gray",alpha=0.5)+
facet_wrap(.~variable,scale='free_y',nrow=2)+
guides(fill=FALSE)+
ylab("Value")+
xlab("Method and Observer")+theme_bw()+
theme(axis.title.y = element_text(face="bold"),
axis.title.x = element_text(face="bold"))
Boxes
ggsave(plot=Boxes,
file="T:/Benthic/Data/SfM/ComparisonPlots_20200204/AllMetricsComp/Violin_Comparision.pdf",
width=10,height=6)
ggsave(plot=Boxes,
file="T:/Benthic/Data/SfM/ComparisonPlots_20200204/AllMetricsComp/Violin_Comparision.png",
width=10,height=6)
head(Smm)
#This script QCs the SfM data pulled directly from the geodatabse
#It is designed to merge the geodatabase with the site visit table and help flag errors to be corrected
# setwd("T:/Benthic/Data/SfM")
# setwd("C:/Users/Corinne.Amir/Documents/GitHub/Benthic-Scripts/SfM/")
setwd("C:/Users/Courtney.S.Couch/Documents/GitHub/Benthic-Scripts/SfM/Geodatabase QC")
#Upload necessary functions (not opening on my computer)
source("C:/Users/Courtney.S.Couch/Documents/GitHub/Benthic-Scripts/Functions/Benthic_Functions_newApp_vTAOfork.R")
source("C:/Users/Courtney.S.Couch/Documents/GitHub/Benthic-Scripts/Functions/core_functions.R")
require(dplyr)
require(stringr)
require(plyr)
require(reshape2)
##read benthic data downloaded from Mission app and subset to the leg you need to QC
#sfm.raw <- read.csv("HARAMP2019_demographic_v2_mar042020.csv")
# MA <- read.csv("MA_geodatabase_05-07-2020.csv")
# ML <- read.csv("Server_geodatabase_05-07-2020.csv") #includes all v2 sites
# AH <- read.csv("AH_geodatabase_05-04-2020.csv")
# RS <- read.csv("RS_geodatabase_4-16-2020.csv")
# CA <- read.csv("CA_geodatabase_05-07-2020.csv")
# FL <- read.csv("FL_geodatabase_5-4-2020.csv")
v2 <- read.csv("HARAM2019_annotations_v2_ALL_july232020.csv")
v1 <- read.csv("HARAMP2019_v1_reformat_FINAL_jul232020.csv") #segments from repeat survey sites (all MA)
sitelist <- read.csv("C:/Users/Courtney.S.Couch/Documents/GitHub/Benthic-Scripts/SfM/Method Comparision/HARAMP2019_SfM_Meta.csv")
setwd("C:/Users/Courtney.S.Couch/Documents/GitHub/Benthic-Scripts/SfM/Geodatabase QC")
# Prep the v2 geodatabase data -----------------------------------------------------
# # Merge annotator geodatabases together (all are v2 geodatabase)
#
# dim(MA); dim(ML); dim(AH); dim(RS); dim(CA); dim(FL)
# str(MA); str(ML); str(AH); str(RS); str(CA); str(FL)
#
# sfm.raw <- rbind(MA, ML, AH, RS, CA, FL, v1, stringsAsFactors = FALSE)
#Reformat v2 Site names
v2$SITE<-gsub("_", "-", v2$SITE)
levels(as.factor(v2$SITE))
#Merge v1 and v2 geodatabases together
sfm.raw <- rbind(v1,v2)
dim(sfm.raw)
# Change site numbers such as MAR-22 to MAR-0022
sfm.raw$SITE<-SiteNumLeadingZeros(sfm.raw$SITE)
#If not already present from running the v1-v2 merge script, add column for site_segment
sfm.raw$site_seg<-paste(sfm.raw$SITE,sfm.raw$SEGMENT)
#Remove incomplete sites
sfm.raw <-sfm.raw %>% filter(!SITE %in% c("HAW-04224","MOL-02266"))
# Check to see if any sites are missing (should have 106 sites)
sitespresent <- data.frame(unique(sfm.raw$SITE)) #Get list of sites exported from gdb
sitespresent <- sitespresent %>% filter(unique.sfm.raw.SITE.!=" " & unique.sfm.raw.SITE.!="A"
&unique.sfm.raw.SITE.!="" & unique.sfm.raw.SITE.!="SE1902") #Remove erroneous site names
sitespresent$df <- rep("present",times = nrow(sitespresent)) #Add column to differentiate from "master" site list
colnames(sitespresent) <- c("SITE", "df")
sitelist$df <- rep("expected",times = nrow(sitelist))
sites <- full_join(sitespresent,sitelist, by="SITE")
sites <- sites %>% filter(is.na(df.x) | is.na(df.y)) #Flag sites that are missing in the site list or gdb export
View(sites) # still missing 5 sites....?
write.csv(sites, "HARAMP_missing_sites.csv") # MOL-2266 and HAW-4224 were dropped because they weren't completed
seglist<-ddply(sfm.raw,.(SITE),summarize,n=length(unique(SEGMENT))) #there should be no sites that have less than 3 segments
#Fill in known values if data is missing
sfm.raw$OBS_YEAR <- rep(2019, times=nrow(sfm.raw))
sfm.raw$MISSION_ID <- rep("SE1902", times=nrow(sfm.raw))
sfm.raw$SEGMENT<-as.factor(sfm.raw$SEGMENT)
table(sfm.raw$SITE,sfm.raw$SEGMENT)
#Create a dataframe that houses all rows that have not been completely filled out (not including RD and CON-related columns)
sfm.raw$ANALYST <- as.factor(sfm.raw$ANALYST)
sfm.raw$SITE <- as.factor(sfm.raw$SITE)
sfm.raw$SEGMENT <- as.factor(sfm.raw$SEGMENT)
sfm.missing.duplicate.rows <- rbind(
analyst.missing <- filter(sfm.raw, ANALYST %in% c("NA", " ")),
site.missing <- filter(sfm.raw, SITE %in% c("NA-   NA", "-   NA", "A-   NA")),
transect.missing <- filter(v1, TRANSECT %in% c(" ")),
seglength.missing <-filter(sfm.raw, SEGLENGTH %in% c(0.0, "0","NA")),
segwidths.missing <- filter(sfm.raw, SEGWIDTH %in% c("0", "NA")),
spcode.missing <-  filter(sfm.raw, SPCODE %in% c("NA", " ", "")),
morphcode.missing <-  filter(sfm.raw, MORPH_CODE %in% c("NA", " ", "")),
transect.missing <-  filter(sfm.raw, TRANSECT %in% c(0, "<Null>", " ")),
segmennt.missing <-  filter(sfm.raw, SEGMENT %in% c("NA", "<NA>")))
sfm.missing <- sfm.missing.duplicate.rows[!duplicated(sfm.missing.duplicate.rows),]
dim(sfm.missing)
View(sfm.missing)
#Identify all rows where NO_COLONY_ is -1 and all values beforehand are also filled in. These values are ok and should NOT be placed in the sfm.missing dataframe
no.colony.present <- sfm.missing %>%
filter(NO_COLONY == "-1" & ANALYST != "NA" & SITE != "NA" & SEGLENGTH != "0" & SEGWIDTH != "0")
head(no.colony.present)
#Remove rows with no colony present from the sfm.missing dataframe IF they aren't missing anything else important
sfm.missing <- droplevels(anti_join(sfm.missing, no.colony.present))
dim(sfm.missing)
#Save dataframe with missing values
write.csv(sfm.missing, "sfm_missing_rows.csv") #get these rows repopulated (if missing metadata) or annotated before moving forward
#If charging forward and leaving rows with missing data behind, create a new dataframe where all rows with missing data have been removed
sfm <- droplevels(anti_join(sfm.raw, sfm.missing))
nrow(sfm)
#### If some column classes = logical, Run this function that removes logical NAs ####
RemoveLogicalNA <- function(b)
{
if (is.logical(b) == "TRUE") {
b[is.logical(b)] <- "NA"
b <- as.factor(b)
}
return(b)
}
#### end function ####
#Add "NA" to columns with class = logical (whole column filled with italized, shaded "NA")
str(sfm) # no columns are logical = skip this step
sfm$RDCAUSE3 <- RemoveLogicalNA(sfm$RDCAUSE3)
sfm$CON_3 <- RemoveLogicalNA(sfm$CON_3)
#Fix columns with incorrect factor levels
sapply(sfm,unique)
sfm <- sfm %>% filter(SITE != "-   NA" & SITE != "SE1902-   NA") #cant find where these errors are in the gdb
sfm$OLDDEAD <- as.numeric(sfm$OLDDEAD)
sfm <- mutate(sfm,FRAGMENT = revalue(FRAGMENT, c("No" = 0," " = 0,"0" = 0, "-1" = -1, "Yes" = -1))) %>%
mutate(sfm,REMNANT = revalue(REMNANT, c("No" = 0," " = 0,"0" = 0))) %>%
mutate(sfm,JUVENILE = revalue(JUVENILE, c("No" = 0," " = 0,"0" = 0, "Yes" = -1))) %>%
mutate(sfm,EX_BOUND = revalue(EX_BOUND, c("No" = 0, " " = 0))) %>%
mutate(sfm,NO_COLONY = revalue(NO_COLONY, c("No" = 0, " " = 0))) %>%
mutate(sfm,RDCAUSE1 = revalue(RDCAUSE1, c(" " = "NA"))) %>%
mutate(sfm,RDCAUSE2 = revalue(RDCAUSE2, c(" " = "NA"))) %>%
mutate(sfm,RDCAUSE3 = revalue(RDCAUSE3, c(" " = "NA"))) %>%
mutate(sfm,CON_1 = revalue(CON_1, c(" " = "NA"))) %>%
mutate(sfm,CON_2 = revalue(CON_2, c(" " = "NA"))) %>%
mutate(sfm,CON_3 = revalue(CON_3, c(" " = "NA")))
#Add column for segment area
levels(as.factor(sfm$SEGLENGTH))
sfm$SEGAREA <- sfm$SEGLENGTH*sfm$SEGWIDTH
#Miscellaneous changes needed
sapply(sfm,unique)
length(unique(sfm$SITE)) # 103 unique sites
length(unique(sfm$site_seg)) # 391 unique site_segs
# QC Checks -------------------------------------------------------------------------------------
#Set up output csv file that reports the status of the qc checks
output<-data.frame(
QC_check<-character(),
Status<-character(),stringsAsFactors = FALSE)
#1. Check if only part of a site-segment was removed and placed in the sfm.missing dataframe while the other part was placed in the sfm dataframe. Remove these site-segments.
partial_SiteSeg_removal <- inner_join(sfm.missing, sfm, by = c("SITE", "SEGMENT"))
head(partial_SiteSeg_removal) # a dataframe with no data will be displayed if site-segment pairs were NOT split between missing and populated dataframes = good
partial_SiteSeg_removal <- droplevels(partial_SiteSeg_removal)
unique(partial_SiteSeg_removal$SITE)
output[,1] <- c("Sites have been completely annotated", "YES") #change depending on previous lines of code
#if dataframe is populated, export csv and fix the error
write.csv(partial_SiteSeg_removal, "Error_partial_filled_segments.csv")
#2.Check that the columns have the appropripate type of data (e.g. numeric vs. text) & no errant codes (e.g. SEV and/or RD columns contain NA)
sapply(sfm,levels)
str(sfm)
sapply(sfm, class)
output[2,]<-c("No errant codes", "some logical NAs and blanks throughout -- ok")
# #3. All TRANSECT within v2 of the geodabase should = A (B is for repeats)
# filter(sfm, TRANSECT != "A")
#
# output[3,]<-c("All transects = A","B sites = v1 gdb -- OK") #change depending on output from previous lines of code
#4. Make sure that if NO_COLONY=-1 none of the following columns have been populated
sfm %>% filter(sfm$SPCODE == "NA" & sfm$NO_COLONY != -1)
sfm %>% filter(sfm$SPCODE != "NA" & sfm$NO_COLONY == -1)
sfm %>% filter(sfm$FRAGMENT == -1 & sfm$NO_COLONY == -1)
sfm %>% filter(sfm$REMNANT == -1 & sfm$NO_COLONY == -1)
sfm %>% filter(sfm$MORPH_CODE == "NA" & sfm$NO_COLONY != -1)
a<-sfm %>% filter(sfm$MORPH_CODE != "NA" & sfm$NO_COLONY == -1)
output[4,]<-c("NO_COLONY segments filled correctly","YES")
#5. Calculate the number of annotated segments per site and check that all segments contain both seglengths (except segment 15)
##Create a summary table of #segments per site and check against tracking data sheet
seg.per.site <- ddply(sfm,.(SITE, SEGMENT, SEGLENGTH), summarize, num.annotated = n_distinct(SEGLENGTH))
eval.seg.per.site <- as.data.frame(acast(seg.per.site, SITE~SEGMENT, length))
#eval.seg.per.site$Total <- rowSums(eval.seg.per.site)
View(eval.seg.per.site)
#use this file to evaluate where segments may be missing
write.csv(eval.seg.per.site, "Missing_seg_eval.csv")
output[5,]<-c("All annotated segments have correct #seglengths","23 sites don't have 15m seglength") #change depending on output from previous line of code
# #6. Make sure only 1 annotator exists per site_seg-no longer applicable since multiple people did belt corrections after cross checking
# analyst.per.site.seg <- ddply(sfm,.(site_seg), summarize, num.analyst = n_distinct(ANALYST))
# filter(analyst.per.site.seg, num.analyst>1)
#
# output[6,]<-c("All site_segs annotated by one person","YES")
#
#7.Check for incorrect species-V:\PHOTOMOSAIC (1)\HARAMP\HARAMP_2019_codes.csv
ddply(sfm,.(SPCODE),summarize,temp=length(SPCODE))
output[7,]<-c("Species codes are correct","Some NA and blank -- OK")
#8. Check that SEGWIDTH is correct (should have been apparent in qc #1).
levels(as.factor(sfm$SEGAREA)) #should all be 1 OR 2.5, unless otherwise stated
output[8,]<-c("All segment widths are correct","YES") #change depending on output from previous line of code
#9. Identify colonies flagged as Juveniles or Adults, but have the innocorrect segment area. make sure j = 1 and A = 2.5
sm.colonies.eval <- sfm %>% filter(JUVENILE== -1,SEGAREA != 1); sm.colonies.eval
lg.colonies.eval <- sfm %>% filter(JUVENILE==0,SEGAREA==1, NO_COLONY==0); lg.colonies.eval
output[9,]<-c("Juveniles and Adult colonies have correct labeling", "YES")
#If rows have been flagged, export sm_colonies dataframe into a csv file for further QC
write.csv(sm.colonies.eval, "Juveniles_eval.csv")
write.csv(lg.colonies.eval, "Adults_eval.csv")
#10. Identify colonies have the same CON code across multiple CON columns
sfm$CON_3 <- as.factor(sfm$CON_3)
CON_dup <- select(sfm,c(ANALYST, site_seg, CON_1,CON_2, CON_3)) %>% filter(CON_1!="NA") %>% filter(CON_2!="NA")
head(sfm)
select(sfm,c(site_seg, CON_1,CON_2, CON_3))
