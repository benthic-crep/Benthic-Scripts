<<<<<<< HEAD
"`Bleaching Prevalence`","`Juvenile Density`","`Adult Genus Richness`",
"`Adult Shannon Diversity`", "`Average Recent Dead`", "`Acute Disease Prevalence`", "`Chronic Disease Prevalence`"))
rmse.ssss<-left_join(rmse.ssss,metricnames)
#reorder metrics in plot
metricoder<- c("`Adult Density`","`Juvenile Density`","`Average Colony Diameter`","`Average Old Dead`", "`Average Recent Dead`", "`Acute Disease Prevalence`",
"`Bleaching Prevalence`","`Chronic Disease Prevalence`", "`Adult Genus Richness`","`Adult Shannon Diversity`")
rmse.ssss<- rmse.ssss[order(match(rmse.ssss$Metric.new, metricoder)),];head(rmse.ssss)
rmse.ssss$Metric.new<-as.character(rmse.ssss$Metric.new);head(rmse.ssss)
rmse.ssss$Metric.new<-factor(rmse.ssss$Metric.new, levels = metricoder);head(rmse.ssss)
#Identify significant difference between error types
rmse.sub<-subset(all.rmse,GENUS_CODE=="SSSS"&Comp%in%c("D1vD2","S1vS2","MO"))
rmse.sub<-subset(rmse.sub,Metric %in% c("AdColDen","JuvColDen","BLE_prev","Ave.cl","Ave.od","Ave.rd", "DZGN_G_prev", "CHRO_prev", "Shannon","Richness"))
comp.names<-data.frame(Comp=c("D1vD2","MO","S1vS2"),Comp2=c("In water Observer","Method Error","SfM Observer"))
rmse.sub<-left_join(rmse.sub,comp.names)
anova(lm(ae_sc ~ Comp, data=subset(rmse.sub,Metric=="AdColDen")))
dunnTest(ae_sc ~ Comp, data=subset(rmse.sub,Metric=="AdColDen"),method="bh")
anova(lm(ae_sc ~ Comp, data=subset(rmse.sub,Metric=="JuvColDen")))
dunnTest(ae_sc ~ Comp, data=subset(rmse.sub,Metric=="JuvColDen"),method="bh")
anova(lm(ae_sc ~ Comp, data=subset(rmse.sub,Metric=="Ave.cl")))
dunnTest(ae_sc ~ Comp, data=subset(rmse.sub,Metric=="Ave.cl"),method="bh")
anova(lm(ae_sc ~ Comp, data=subset(rmse.sub,Metric=="Ave.od")))
dunnTest(ae_sc ~ Comp, data=subset(rmse.sub,Metric=="Ave.od"),method="bh")
anova(lm(ae_sc ~ Comp, data=subset(rmse.sub,Metric=="Ave.rd")))
dunnTest(ae_sc ~ Comp, data=subset(rmse.sub,Metric=="Ave.rd"),method="bh")
anova(lm(ae_sc ~ Comp, data=subset(rmse.sub,Metric=="DZGN_G_prev")))
dunnTest(ae_sc ~ Comp, data=subset(rmse.sub,Metric=="DZGN_G_prev"),method="bh")
anova(lm(ae_sc ~ Comp, data=subset(rmse.sub,Metric=="BLE_prev")))
dunnTest(ae_sc ~ Comp, data=subset(rmse.sub,Metric=="BLE_prev"),method="bh")
anova(lm(ae_sc ~ Comp, data=subset(rmse.sub,Metric=="CHRO_prev")))
dunnTest(ae_sc ~ Comp, data=subset(rmse.sub,Metric=="CHRO_prev"),method="bh")
anova(lm(ae_sc ~ Comp, data=subset(rmse.sub,Metric=="Richness")))
dunnTest(ae_sc ~ Comp, data=subset(rmse.sub,Metric=="Richness"),method="bh")
anova(lm(ae_sc ~ Comp, data=subset(rmse.sub,Metric=="Shannon")))
dunnTest(ae_sc ~ Comp, data=subset(rmse.sub,Metric=="Shannon"),method="bh")
#Set up text labels for post hoc tests on plots
rmse.ssss<- rmse.ssss[order(rmse.ssss$Metric.new),];rmse.ssss
rmse.ssss$sig<-c("","ns","",
"","ns","",
"","ns","",
"","ns","",
"","ns","",
"","ns","",
"","ns","",
"","ns","",
"","ns","",
"","ns","")
rmse.ssss$Log2AR_mn[which(rmse.ssss$Log2AR_mn == "NaN")] <- 0
rmse.ssss$Log2AR_se[which(is.na(rmse.ssss$Log2AR_se))] <- 0
ScaledMAE_manuscript<-ggplot(rmse.ssss, aes(x=Comp2, y=MAE_sc.mn, fill=Comp2)) +
geom_hline(yintercept = c(0,1))+
geom_bar(position="dodge",stat="identity") +
geom_errorbar(aes(ymin=MAE_sc.mn-MAE_sc.se, ymax=MAE_sc.mn+MAE_sc.se),width=.15, position=position_dodge(.9)) +
guides(fill="none") +
facet_wrap(.~ `Metric.new` , scales="free_y", labeller=label_parsed,nrow=2) +
ylab("Midpoint Scaled Mean Absolute Error")+
#ylim(0,1)+
coord_cartesian(ylim = c(0,.5))+
xlab("Error Comparison")+
theme_bw() +
theme(
axis.text.x = element_text(angle = 90,size=12)
,plot.background = element_blank()
,panel.grid.major = element_blank()
,panel.grid.minor = element_blank()
,axis.ticks.x = element_blank() # no x axis ticks
,axis.title.x = element_text( vjust = -.0001) # adjust x axis to lower the same amount as the genus labels
,legend.position="none")+
theme(axis.title.y = element_text(face="bold")
,axis.title.x = element_text(face="bold"))+
geom_text(data=rmse.ssss,aes(x=Comp2,y=MAE_sc.mn+MAE_sc.se,label=sig, group = Metric.new),
#position = position_dodge(),
vjust = -0.5)+
scale_fill_manual(values = c("darkgreen", "darkorange", "cadetblue"))
ScaledMAE_manuscript
ggsave(plot=ScaledMAE_manuscript,file="C:/Users/Jonathan.Charendoff/Documents/GitHub/Benthic-Scripts/SfM/Marianas 2022/Output/PLOTS/MAEScaledt_Comparision.jpeg",width=12,height=8)
method <- site %>%
group_by(METHOD, GENUS_CODE) %>%
summarise(Mean.Density = mean(AdColDen), SE.Density = sd(AdColDen)/sqrt(length(unique(site$SITE))), Mean.Size = mean(Ave.size, na.rm = T), SE.Size = sd(Ave.size, na.rm = T)/sqrt(length(unique(site$SITE))), count = sum(AdColCount))
library(gridExtra)
library(reshape2)
library(plyr)
#install.packages("ggpmisc")
library(hydroGOF)
library(tidyverse)
library(ggpmisc)
library(plotrix)
library(FSA)
library(dplyr)
site<-read.csv("C:/Users/Jonathan.Charendoff/Documents/GitHub/Benthic-Scripts/SfM/Marianas 2022/Output/MARAMP22_GENUS_SITE_Juvs.csv")
site_as <- read.csv("C:/Users/Jonathan.Charendoff/Documents/GitHub/Benthic-Scripts/SfM/Marianas 2022/Output/ASRAMP23_GENUS_SITE_Juvs.csv")
site <- bind_rows(site, site_as)
site <- subset(site, select = -c(HABITAT_CODE, NOTES))
#site <- na.omit(site)
site$METHOD[site$METHOD == "Diver"] <- "DIVER"
method <- site %>%
group_by(METHOD, GENUS_CODE) %>%
summarise(Mean.Density = mean(AdColDen), SE.Density = sd(AdColDen)/sqrt(length(unique(site$SITE))), Mean.Size = mean(Ave.size, na.rm = T), SE.Size = sd(Ave.size, na.rm = T)/sqrt(length(unique(site$SITE))), count = sum(AdColCount))
View(method)
ggplot(method[method$GENUS_CODE != "ASTS" & method$Mean.Density > 0.5,], aes(y = Mean.Size, x = Mean.Density, fill = METHOD, label = GENUS_CODE))+
theme_classic()+
geom_line(aes(group = GENUS_CODE), size = 1, color = "gray75")+
geom_errorbar(aes(ymin = Mean.Size - SE.Size, ymax = Mean.Size + SE.Size), size = 1)+
geom_errorbarh(aes(xmin = Mean.Density - SE.Density, xmax = Mean.Density + SE.Density), size = 1)+
geom_label()+
geom_text(inherit.aes = F, x = 0.5, y = 25, label = "Lump", size = 10)+
geom_text(inherit.aes = F, x = 0.55, y = 24, label = "Fewer, larger colonies")+
geom_text(inherit.aes = F, x = 1.7, y = 10, label = "Split", size = 10)+
geom_text(inherit.aes = F, x = 1.75, y = 9, label = "More, smaller colonies")+
guides(size = "none")+labs(x = "Mean Colony Density", y = "Mean Colony Size", fill = "Method")
method <- site %>%
filter(GENUS_CODE != "SSSS") %>%
group_by(METHOD, GENUS_CODE) %>%
summarise(Mean.Density = mean(AdColDen), SE.Density = sd(AdColDen)/sqrt(length(unique(site$SITE))), Mean.Size = mean(Ave.size, na.rm = T), SE.Size = sd(Ave.size, na.rm = T)/sqrt(length(unique(site$SITE))), count = sum(AdColCount))
gplot(method[method$GENUS_CODE != "ASTS" & method$Mean.Density > 0.5,], aes(y = Mean.Size, x = Mean.Density, fill = METHOD, label = GENUS_CODE))+
theme_classic()+
geom_line(aes(group = GENUS_CODE), size = 1, color = "gray75")+
geom_errorbar(aes(ymin = Mean.Size - SE.Size, ymax = Mean.Size + SE.Size), size = 1)+
geom_errorbarh(aes(xmin = Mean.Density - SE.Density, xmax = Mean.Density + SE.Density), size = 1)+
geom_label()+
geom_text(inherit.aes = F, x = 0.5, y = 25, label = "Lump", size = 10)+
geom_text(inherit.aes = F, x = 0.55, y = 24, label = "Fewer, larger colonies")+
geom_text(inherit.aes = F, x = 1.7, y = 10, label = "Split", size = 10)+
geom_text(inherit.aes = F, x = 1.75, y = 9, label = "More, smaller colonies")+
guides(size = "none")+labs(x = "Mean Colony Density", y = "Mean Colony Size", fill = "Method")
ggplot(method[method$GENUS_CODE != "ASTS" & method$Mean.Density > 0.5,], aes(y = Mean.Size, x = Mean.Density, fill = METHOD, label = GENUS_CODE))+
theme_classic()+
geom_line(aes(group = GENUS_CODE), size = 1, color = "gray75")+
geom_errorbar(aes(ymin = Mean.Size - SE.Size, ymax = Mean.Size + SE.Size), size = 1)+
geom_errorbarh(aes(xmin = Mean.Density - SE.Density, xmax = Mean.Density + SE.Density), size = 1)+
geom_label()+
geom_text(inherit.aes = F, x = 0.5, y = 25, label = "Lump", size = 10)+
geom_text(inherit.aes = F, x = 0.55, y = 24, label = "Fewer, larger colonies")+
geom_text(inherit.aes = F, x = 1.7, y = 10, label = "Split", size = 10)+
geom_text(inherit.aes = F, x = 1.75, y = 9, label = "More, smaller colonies")+
guides(size = "none")+labs(x = "Mean Colony Density", y = "Mean Colony Size", fill = "Method")
rm(list=ls())
#LOAD LIBRARY FUNCTIONS ...
library(lubridate)
source("./GitHub/Benthic-Scripts/Functions/Benthic_Functions_newApp_vTAOfork.R")
source("./GitHub/fish-paste/lib/core_functions.R")
source("./GitHub/fish-paste/lib/fish_team_functions.R")
source("./GitHub/fish-paste/lib/Islandwide Mean&Variance Functions.R")
#Climate data - this is from CPCE
load("T:/Benthic/Data/REA Coral Demography & Cover/Raw from Oracle/ALL_BIA_CLIMATE_PERM.rdata")   #cli
cli$SITE<-SiteNumLeadingZeros(cli$SITE)
View(cli)
#BIA data - this is from CPCE
load("T:/Benthic/Data/REA Coral Demography & Cover/Raw from Oracle/ALL_BIA_STR_RAW_NEW.rdata")   #bia
bia$SITE<-SiteNumLeadingZeros(bia$SITE)
#CNET data - from CoralNet
#These data contain human annotated data. There may be a small subset of robot annotated data.
#The robot annoations are included because the confidence threshold in CoralNet was set to 75-90% allowing the robot to annotate points when it was 90% certain.
#2019 NWHI data not in these view because it was analyzed as part of a bleaching dataset
load("T:/Benthic/Data/REA Coral Demography & Cover/Raw from Oracle/ALL_BIA_STR_CNET.rdata") #load data
cnet$SITE<-SiteNumLeadingZeros(cnet$SITE)
table(cnet$ISLAND,cnet$OBS_YEAR)
##Generate Table of all the bia categories to review
head(bia)
bia_tab<-ddply(bia,.(TIER_1, CATEGORY_NAME, TIER_2, SUBCATEGORY_NAME, TIER_3, GENERA_NAME),summarize,count=sum(POINTS))
View(bia_tab)
#write.csv(bia_tab, file="BIA categories.csv")
table(bia$TIER_1)
table(bia$TIER_2)
sm<-read.csv("../fish-paste/data/SURVEY MASTER.csv")
sm<-read.csv("./fish-paste/data/SURVEY MASTER.csv")
sm<-read.csv("./GitHub/fish-paste/data/SURVEY MASTER.csv")
sm$SITE=factor(sm$SITE)#make it a factor
sm$SITE<-SiteNumLeadingZeros(sm$SITE)
test<-subset(sm,OBS_YEAR=="2019",TRANSECT_PHOTOS=="-1");nrow(test)
# Merge together all Photoquad Datasets & make sure columns match ---------------------------------------
bia$METHOD<-"CPCE"
cli$METHOD<-"CPCE"
cnet$POINTS<-1
cnet$METHOD<-"CNET"
cnet$REP<-cnet$REPLICATE
cnet$IMAGE_NAME<-cnet$ORIGINAL_FILE_NAME
cnet$PHOTOID<-cnet$IMAGE_NUMBER
cnet$TIER_1<-cnet$CATEGORY_CODE
cnet$TIER_2<-cnet$SUBCATEGORY_CODE
cnet$TIER_3<-cnet$GENERA_CODE
#Combine cpc and coralnet
FIELDS_TO_RETAIN<-c("MISSIONID","METHOD", "REGION", "OBS_YEAR","ISLAND", "SITEVISITID","SITE", "LATITUDE", "LONGITUDE", "REEF_ZONE", "DEPTH_BIN", "PERM_SITE", "CLIMATE_STATION_YN", "MIN_DEPTH", "MAX_DEPTH", "HABITAT_CODE", "REP", "IMAGE_NAME", "PHOTOID", "ANALYST", "TIER_1", "CATEGORY_NAME", "TIER_2", "SUBCATEGORY_NAME", "TIER_3", "GENERA_NAME", "POINTS")
SURVEY_INFO<-c("OBS_YEAR", "REGION",  "ISLAND")
survey_island<-Aggregate_InputTable(cnet, SURVEY_INFO)
View(survey_island)
?coalesce
ab %>% dplyr::mutate(TIER_3=coalesce(TIER_3,TIER_2))
#We have some likely misidentified points in the Hawaiian Island (e.g. Acanthastrea in the MHI).
#Read in list of hawaii codes and change everything that isn't in the list to UNKN
hawaiicodes<-read.csv("T:/Benthic/Data/Lookup Tables/Hawaii_Photoquad_codes.csv")
View(Calc_PerStrata)
seclu<-read.csv("T:/Benthic/Data/Lookup Tables/PacificNCRMP_Benthic_Sectors_Lookup_v4.csv") #list of SEC_NAME (smallest sector) and corresponding pooled sector scheme
View(seclu)
View(Calc_ColMetric_Transect)
View(Calc_Strata)
library(reshape2)
library(ggplot2) ## to create the diver vs diver graphs
library(data.table)
library(plyr)
library(dplyr)
library(gdata)
library(tidyr)
library(vegan)
library(plotrix)
library(scales)  # for pretty_breaks() function
library(splitstackshape)
library(lme4)
library(nlme)
library(lsmeans)
library(multcomp)
library(lubridate)
library(VCA)
library(forcats)
library(RColorBrewer)
library(stringr)
source("T:/Benthic/Data/SfM/ScriptFiles/SfMvDiver Plotting Functions.R")
source("C:/Users/Jonathan.Charendoff/Documents/GitHub/Benthic-Scripts/Functions/Benthic_Functions_newApp_vTAOfork.R")
source("C:/Users/Jonathan.Charendoff/Documents/GitHub/Benthic-scripts/Functions/core_functions.R")
ad_sfm2<-read.csv("T:/Benthic/Data/SfM/Analysis Ready/MARAMP22_SfM_Adult_CLEANED.csv")
View(ad_sfm2)
ad_sfm<-read.csv("T:/Benthic/Data/SfM/Analysis Ready/ASRAMP23_SfM_Adult_CLEANED.csv")
ad_sfm2<-read.csv("T:/Benthic/Data/SfM/Analysis Ready/MARAMP22_SfM_Adult_CLEANED.csv")
ad_sfm <- bind_rows(ad_sfm, ad_sfm2)
ad_sfm$SITE_SEG<-paste(ad_sfm$SITE,ad_sfm$SEGMENT,sep ="_")
length(unique(ad_sfm$SITE_SEG));length(unique(ad_sfm$SITE)) #should be 389 ss and 104 sites
ad_sfm <- subset(ad_sfm, TRANSECT == "A")
# PREP VISUAL DIVER DATA ---------------------------------------------
## LOAD benthic data
awd_<-read.csv("T:/Benthic/Data/REA Coral Demography & Cover/Analysis Ready Raw data/CoralBelt_Adults_raw_CLEANED.csv")
awd<-subset(awd_,OBS_YEAR=="2023"|OBS_YEAR=="2022")
#Changing Analyst names to match SfM
awd$DIVER<-ifelse(awd$DIVER=="J_E","JE",as.character(awd$DIVER))
awd$DIVER<-ifelse(awd$DIVER=="J_C","JC",as.character(awd$DIVER))
#Colony fragments and scleractinans are subseted in the functions
#Add a column for adult fragments so we can remove them from the dataset later (-1 indicates fragment)
colnames(awd)[colnames(awd)=="Fragment"]<-"FRAGMENT"
awd$FRAGMENT[is.na(awd$FRAGMENT)] <- 0
#Simplify Bleaching Severity categories: in 2019 the team decided to simplify the bleaching severity from 1-5 to 1-3 to improve consistency in severity values
#This code converts the severity data collected prior to 2019 to a 1-3 scale
awd$DATE_ <- as.Date(awd$DATE_, format = "%Y-%m-%d")
colnames(awd)[which(colnames(awd) == 'DIVER')] <- "ANALYST"
awd$EX_BOUND<-0;awd$EX_BOUND<-as.numeric(awd$EX_BOUND) #add ex_bound columns to match SfM
#Calculate segment area
awd$SEGAREA<-awd$SEGLENGTH*awd$SEGWIDTH
#Only include sites and segments surveyed by divers during HARAMP 2019
awd$SITE_SEG<-paste(awd$SITE,awd$SEGMENT,sep="_")
#remove columns that aren't needed &
awd<-dplyr::select(awd,-c(TRANSECTAREA,bANALYSIS_SCHEME,ANALYSIS_YEAR,REGION_NAME,NO_SURVEY_YN,DATE_,ISLANDCODE))
awd<-dplyr::filter(awd, SITE_SEG %in% c(ad_sfm$SITE_SEG));head(awd)
##
length(unique(awd$SITE))
ad_sfm_sub<-dplyr::filter(ad_sfm, SITE_SEG %in% c(awd$SITE_SEG));nrow(ad_sfm);nrow(ad_sfm_sub)
awd_sub<-dplyr::filter(awd, SITE_SEG %in% c(ad_sfm_sub$SITE_SEG))
length(unique(ad_sfm_sub$SITE));length(unique(ad_sfm_sub$SITE_SEG))
# Add Method column to diver data
awd$METHOD<-"Diver";awd$METHOD<-as.factor(awd$METHOD)
#Merge diver and SfM data
sort(colnames(awd))
sort(colnames(ad_sfm_sub))
sapply(awd,class)
sapply(ad_sfm,class)
awd.all<-rbind(ad_sfm_sub[,-13],awd[,-17])
awd.all$SEGWIDTH[is.na(awd.all$SEGWIDTH)] <- 1
awd.all$SEGAREA<-awd.all$SEGLENGTH*awd.all$SEGWIDTH
awd.all$TRANSECT <- recode_factor(awd.all$TRANSECT, "1" = "A")
awd.all <- subset(awd.all, awd.all$TRANSECT == "A")
awd.all$TRANSECTAREA<-TransectareaMETHOD(awd.all)
SURVEY_COL<-c("METHOD","SITEVISITID", "OBS_YEAR", "REGION", "ISLAND","SEC_NAME", "SITE", "REEF_ZONE",
"DEPTH_BIN", "LATITUDE", "LONGITUDE","MIN_DEPTH_M","MAX_DEPTH_M","TRANSECT","SEGMENT","COLONYID","GENUS_CODE","TAXONCODE","SPCODE","COLONYLENGTH")
survey_colony<-unique(awd.all[,SURVEY_COL])
SURVEY_SITE<-c("METHOD","SITEVISITID", "OBS_YEAR", "REGION", "ISLAND","SEC_NAME", "SITE", "REEF_ZONE",
"DEPTH_BIN", "LATITUDE", "LONGITUDE","MIN_DEPTH_M","MAX_DEPTH_M")
survey_site<-unique(awd.all[,SURVEY_SITE])
visits <- survey_site$SITEVISITID[survey_site$SEC_NAME == ""]
for (i in 1:length(visits)) {
survey_site$SEC_NAME[survey_site$SITEVISITID == visits[i] & survey_site$METHOD == "SfM"] <- survey_site$SEC_NAME[survey_site$SITEVISITID == visits[i] & survey_site$METHOD == "Diver"]
}
SURVEY<-c("METHOD","SITEVISITID", "OBS_YEAR", "REGION", "ISLAND","SEC_NAME", "SITE", "REEF_ZONE",
"DEPTH_BIN", "LATITUDE", "LONGITUDE","MIN_DEPTH_M","MAX_DEPTH_M","METHOD","TRANSECT","SEGMENT")
survey_segment<-unique(awd.all[,SURVEY])
nrow(survey_site)
sectors<-read.csv("C:/Users/Jonathan.Charendoff/Documents/GitHub/Benthic-Scripts/SfM/Marianas 2022/Sectors-Strata-Areas.csv", stringsAsFactors=FALSE)
meta<-left_join(survey_site,sectors)
meta[which(is.na(meta$AREA_HA)),]
nrow(survey_site)
nrow(meta)
#TEMPORARY WORK AROUND-ASK MICHAEL TO FIX
#survey_site$REEF_ZONE<-ifelse(survey_site$SITE=="HAW-04285","Forereef",as.character(survey_site$REEF_ZONE))
#survey_segment$REEF_ZONE<-ifelse(survey_segment$SITE=="HAW-04285","Forereef",as.character(survey_segment$REEF_ZONE))
colnames(awd.all)[colnames(awd.all)=="FRAGMENT"]<-"Fragment"
ex_b<-subset(awd.all,EX_BOUND==0)
View(awd.all)
acd.div<-Calc_Diversity_Transect(awd.all,"TAXONCODE");colnames(acd.div)[4:7] <- paste("Adult", colnames(acd.div[,c(4:7)]), sep = "_")
View(acd.div)
all.diversity<-left_join(acd.div,meta)
View(all.diversity)
all.diversity$METHOD[all.diversity$METHOD == "Diver"] <- "DIVER"
sfm_div<-subset(all.diversity,METHOD=="SfM")
diver_div<-subset(all.diversity,METHOD=="DIVER")
# #Set up in wide format
colnames(sfm_div)[c(4:7)] <- paste("SfM_", colnames(sfm_div[,c(4:7)]), sep = "");sfm_div<-dplyr::select(sfm_div,-c(METHOD))
colnames(diver_div)[c(4:7)] <- paste("Diver_", colnames(diver_div[,c(4:7)]), sep = "");diver_div<-dplyr::select(diver_div,-c(METHOD))
div.wide<-left_join(sfm_div,diver_div[,2:7])
div <- all.diversity
View(div.wide)
##Shannon
full.form <- formula(Adult_Shannon ~ METHOD*MAX_DEPTH_M, data=div)
#fit lme using "ML"= maximum likelihood - so can use step fxn
full.lme <-lme(full.form, data=div, random=~1|SEC_NAME, method="ML",na.action = na.omit) #use if needed
anova(full.lme)
full.form <- formula(Adult_Hills ~ METHOD*MAX_DEPTH_M, data=div)
#fit lme using "ML"= maximum likelihood - so can use step fxn
full.lme <-nlme::lme(full.form, data=div, random=~1|SEC_NAME, method="ML",na.action = na.omit) #use if needed
anova(full.lme)
full.form <- formula(Adult_Richness ~ METHOD*MAX_DEPTH_M, data=div)
#fit lme using "ML"= maximum likelihood - so can use step fxn
full.lme <-nlme::lme(full.form, data=div, random=~1|SEC_NAME, method="ML",na.action = na.omit) #use if needed
anova(full.lme)
library(gridExtra)
library(reshape2)
library(plyr)
#install.packages("ggpmisc")
library(hydroGOF)
library(tidyverse)
library(ggpmisc)
library(lme4)
library(nlme)
library(ggplot2)
library(sjPlot)
library(pander)
library(tidyr)
library(AICcmodavg)
library(MuMIn)
library(knitr)
library(glmmTMB)
library(car)
source("T:/Benthic/Data/SfM/ScriptFiles/SfMvDiver Plotting Functions.R")
source("C:/Users/Jonathan.Charendoff/Documents/GitHub/Benthic-Scripts/Functions/Benthic_Functions_newApp_vTAOfork.R")
source("C:/Users/Jonathan.Charendoff/Documents/GitHub/Benthic-scripts/Functions/core_functions.R")
setwd("C:/Users/Jonathan.Charendoff/Documents/GitHub/Benthic-Scripts/SfM/Method Comparision")
Plot1to1_new<-function(d,response_variable,predictor_variable,r_name,p_name,x,y){
#sub<-d[d$taxon,]
d$Y<-d[,response_variable]
d$X<-d[,predictor_variable]
mx_val<-max(d$Y, d$X, na.rm = TRUE)
lm_fit <- lm(Y ~ X, data=d)
predicted_df <- data.frame(Y_pred = predict(lm_fit, d), X=d$X)
corr<-cor.test(d$X, d$Y, method="pearson")
rmse<-rmse(d$Y, d$X,na.rm=TRUE)
r_text<-paste("RMSE = ", round(rmse,digits = 2),"\n r = ", round((corr$estimate),2), sep="")
p1<-ggplot(d, aes(x=X, y=Y)) +
geom_point(size=1) +
geom_abline(slope=1, intercept=0) +
#geom_jitter(width=.25,height=0,color="black",alpha=0.5)+
#geom_smooth(method="lm", color="red", linetype="dashed", se=F) +
geom_line(linetype = "dashed", color='red',data = predicted_df, aes(x=X, y=Y_pred))+
geom_label(label=r_text,x=x,y=y, nudge_y=-0.1, nudge_x=1,label.size=0.35, color="black", fill="white") +
theme_bw()+
theme(panel.grid.major = element_blank()
,panel.grid.minor = element_blank())+
scale_x_continuous(limits=c(0,mx_val)) +
#scale_y_continuous(limits=c(0,mx_val)) +
ylab(r_name) +  xlab(p_name)
return(p1)
} #
PlotMethod<-function(d,grouping_field,metric_field,genus_field,metric_name,x,y,siglabel){
d$GROUP<-d[,grouping_field]
d$METRIC<-d[,metric_field]
s<-subset(d,GROUP==genus_field)
p<-ggplot(s, aes(x=METHOD, y=METRIC, fill=METHOD)) +
geom_boxplot() +
geom_label(label=siglabel, x=x,y=y,label.size = 0.35,color = "black", fill="white")+
theme_bw() +
theme(
axis.text.x = element_text(angle = 0)
,plot.background = element_blank()
,panel.grid.major = element_blank()
,panel.grid.minor = element_blank()
,axis.ticks.x = element_blank() # no x axis ticks
,axis.title.x = element_text( vjust = -.0001)
,legend.position="none")+ # adjust x axis to lower the same amount as the genus labels
labs(x="Method",y=metric_name)
return(p)
}
PlotHabitat<-function(d,grouping_field,metric_field,genus_field,metric_name,x,y,siglabel){
d$GROUP<-d[,grouping_field]
d$METRIC<-d[,metric_field]
s<-subset(d,GROUP==genus_field)
p<-ggplot(s, aes(x=HAB_R1, y=METRIC, fill=METHOD)) +
geom_boxplot() +
theme_bw() +
geom_label(label=siglabel, x=x,y=y,label.size = 0.35,color = "black", fill="white")+
theme(
axis.text.x = element_text(angle = 90)
,plot.background = element_blank()
,panel.grid.major = element_blank()
,panel.grid.minor = element_blank()
,axis.title.x = element_text( vjust = -.0001) # adjust x axis to lower the same amount as the genus labels
,legend.position="none")+
labs(x="Habitat Type",y=metric_name)
return(p)
}
PlotDepth<-function(d,grouping_field,metric_field,metric_field2,genus_field,metric_name,x,y,siglabel){
d$GROUP<-d[,grouping_field]
d$METRIC<-d[,metric_field]
newdat.lme$METRIC2<-newdat.lme[,metric_field2]
s<-subset(d,GROUP==genus_field)
p<-ggplot(s, aes(x = MAX_DEPTH_M, y = METRIC, color = METHOD) ) +
geom_point(aes(colour = factor(METHOD))) +
geom_line(data = newdat.lme, aes(y = METRIC2), size = 1)+
geom_ribbon(data = newdat.lme, aes(y = NULL, ymin = lower, ymax = upper,
color = NULL, fill = METHOD),alpha = .15)+
geom_label(label=siglabel, x=x,y=y,label.size = 0.35,color = "black", fill="white")+
theme_bw() +
theme(
axis.text.x = element_text(angle = 0)
,plot.background = element_blank()
,panel.grid.major = element_blank()
,panel.grid.minor = element_blank()
,axis.title.x = element_text( vjust = -.0001) # adjust x axis to lower the same amount as the genus labels
,legend.position="none")+
scale_x_continuous(breaks=seq(0,30,5))+
labs(x="Max Depth (m)",y=metric_name)
return(p)
}
#d<- na.omit(site[site$SITE!= "PAG-01273",-49])
#grouping_field<-"GENUS_CODE"
#metric_field<-"Ave.rd"
#genus_field<-"SSSS"
#metric_name<-"Average % Recent Dead"
PlotDepth_NP<-function(d,grouping_field,metric_field,genus_field,metric_name){
d$GROUP<-d[,grouping_field]
d$METRIC<-d[,metric_field]
s<-subset(d,GROUP==genus_field)
p1<-ggplot(s, aes(x=MAX_DEPTH_M, y=METRIC,fill = METHOD,color=METHOD)) +
#geom_smooth(method="lm")+
geom_point(size=1) +
theme_bw()+
theme(axis.text.x = element_text(angle = 0)
,plot.background = element_blank()
,panel.grid.major = element_blank()
,panel.grid.minor = element_blank()
,axis.title.x = element_text( vjust = -.0001) # adjust x axis to lower the same amount as the genus labels
,legend.position="none")+
scale_x_continuous(breaks=seq(0,30,5))+
labs(x="Max Depth (m)",y=metric_name)
return(p1)
}
Plot1to1_new(div.wide,"SfM_Adult_Shannon","Diver_Adult_Shannon","SfM Adult Shannon Diversity","Diver Adult Shannon Diversity",0.75,2)+
geom_text(x = 0, y = 2.7, label = "A", color = "black")
p1<-Plot1to1_new(div.wide,"SfM_Adult_Shannon","Diver_Adult_Shannon","SfM Adult Shannon Diversity","Diver Adult Shannon Diversity",0.75,2)+
geom_text(x = 0, y = 2.7, label = "A", color = "black")
p2<-Plot1to1_new(div.wide,"SfM_Adult_Hills","Diver_Adult_Hills","SfM Adult Diversity (Hills)","Diver Adult Diversity (Hills)",3.5,12)+
geom_text(x = 0, y = 14.75, label = "C", color = "black")
p3<-Plot1to1_new(div.wide,"SfM_Adult_Richness","Diver_Adult_Richness","SfM Adult Genus Richness","Diver Adult Genus Richness",6,20)+
geom_text(x = 0, y = 28, label = "E", color = "black")
p5<-ggplot(div, aes(x=METHOD, y=Adult_Shannon, fill=METHOD)) +
geom_boxplot() +
theme_bw() +
theme(
axis.text.x = element_text(angle = 0)
,plot.background = element_blank()
,panel.grid.major = element_blank()
,panel.grid.minor = element_blank()
,axis.ticks.x = element_blank() # no x axis ticks
,axis.title.x = element_text( vjust = -.0001)
,legend.position="none")+ # adjust x axis to lower the same amount as the genus labels
labs(x="Method",y="Adult Shannon Diversity")+
geom_label(y=.3,x=1.5, label="Method Significant", fill = "white")+
geom_text(x = 0.5, y = 2.8, label = "B", color = "black")
p6<-ggplot(div, aes(x=METHOD, y=Adult_Hills, fill=METHOD)) +
geom_boxplot() +
theme_bw() +
theme(
axis.text.x = element_text(angle = 0)
,plot.background = element_blank()
,panel.grid.major = element_blank()
,panel.grid.minor = element_blank()
,axis.ticks.x = element_blank() # no x axis ticks
,axis.title.x = element_text( vjust = -.0001)
,legend.position="none")+ # adjust x axis to lower the same amount as the genus labels
labs(x="Method",y="Adult Diversity (Hills)")+
geom_label(y=1,x=1.5, label="Method Significant", fill = "white")+
geom_text(x = 0.5, y = 17, label = "D", color = "black")
p7<-ggplot(div, aes(x=METHOD, y=Adult_Richness, fill=METHOD)) +
geom_boxplot() +
theme_bw() +
theme(
axis.text.x = element_text(angle = 0)
,plot.background = element_blank()
,panel.grid.major = element_blank()
,panel.grid.minor = element_blank()
,axis.ticks.x = element_blank() # no x axis ticks
,axis.title.x = element_text( vjust = -.0001)
,legend.position="none")+ # adjust x axis to lower the same amount as the genus labels
labs(x="Method",y="Adult Genus Richness")+
geom_label(y=1,x=1.5, label="NS", fill = "white")+
geom_text(x = 0.5, y = 28, label = "F", color = "black")
AdultDiv<-grid.arrange(p1, p2,  p3,p5,p6,p7,nrow=2,ncol=4)
AdultDiv<
AdultDiv
AdultDiv<-grid.arrange(p1, p2,  p3,p5,p6,p7,nrow=2,ncol=3)
mod1<-lm(Adult_Hills~METHOD, data = div);summary(mod1)
mod1<-lm(Adult_Richness~METHOD, data = div);summary(mod1)
full.form <- formula(Adult_Richness ~ METHOD*MAX_DEPTH_M, data=div)
#fit lme using "ML"= maximum likelihood - so can use step fxn
full.lme <-lme(full.form, data=div, random=~1|SEC_NAME, method="ML",na.action = na.omit) #use if needed
#drop 3-way interaction term & depth x habitat (not interested in these hypotheses)
FULL.MOD <- update(full.lme, .~. -METHOD:MAX_DEPTH_M)
anova(full.lme, FULL.MOD) #from output, drop the 2-way interaction term with the larger p-value first
RED.MOD1 <- update(FULL.MOD, .~. -METHOD) #drop 2-way interaction term
anova(FULL.MOD, RED.MOD1)
=======
ggplot()+
geom_point(subset(SSSSp,Var%in%targets_manu),aes(N.pow,deltaBT.pow),shape=1,size=3)+
#geom_point(subset(SSSSp,Var%in%targets_manu),aes(N.x,MAEb),shape=0,size=3)+
#  geom_errorbar(data=SSSSp,aes(x=N.x,y=MAE,
#                              ymin=(MAE-CI_AE),ymax=(MAE+CI_AE)))+
facet_wrap(.~plotvar,scales="free_y")+
scale_x_continuous()+
scale_y_continuous()+
theme_bw()+xlab("Sample Size")+ylab("Power Analysis Effect Size : MAE")
ggplot(subset(SSSSp,Var%in%targets_manu),aes(N.pow,deltaBT.pow))+
geom_point(shape=1,size=3)+
#geom_point(subset(SSSSp,Var%in%targets_manu),aes(N.x,MAEb),shape=0,size=3)+
#  geom_errorbar(data=SSSSp,aes(x=N.x,y=MAE,
#                              ymin=(MAE-CI_AE),ymax=(MAE+CI_AE)))+
facet_wrap(.~plotvar,scales="free_y")+
scale_x_continuous()+
scale_y_continuous()+
theme_bw()+xlab("Sample Size")+ylab("Power Analysis Effect Size : MAE")
ggplot(subset(SSSSp,Var%in%targets_manu),aes(N.pow,deltaBT.pow))+
geom_point(shape=1,size=3)+
geom_point(shape=0,size=3)+
geom_line(subset(tarDF,var%in%targets_manu),aes(N,deltaUT))+
#  geom_errorbar(data=SSSSp,aes(x=N.x,y=MAE,
#                              ymin=(MAE-CI_AE),ymax=(MAE+CI_AE)))+
facet_wrap(.~plotvar,scales="free_y")+
scale_x_continuous()+
scale_y_continuous()+
theme_bw()+xlab("Sample Size")+ylab("Power Analysis Effect Size : MAE")
SSSSm<-subset(Var%in%targets_manu)
tarDFm<-subset(var%in%targets_manu)
SSSSm<-subset(SSSSp,Var%in%targets_manu)
tarDFm<-subset(tarDF,var%in%targets_manu)
ggplot(tarDFm,aes(N,deltaUT))+
geom_line()+
geom_point(SSSSm,aes(N.pow,deltaBT.pow),shape=1,size=3)+
geom_point(SSSSm,aes(N.x,MAEb),shape=0,size=3)+
#  geom_errorbar(data=SSSSp,aes(x=N.x,y=MAE,
#                              ymin=(MAE-CI_AE),ymax=(MAE+CI_AE)))+
facet_wrap(.~plotvar,scales="free_y")+
scale_x_continuous()+
scale_y_continuous()+
theme_bw()+xlab("Sample Size")+ylab("Power Analysis Effect Size : MAE")
ggplot(tarDFm,aes(N,deltaUT))+
geom_line()+
geom_point(SSSSm,aes(N.pow,deltaBT.pow),shape=1,size=3)
ggplot(tarDFm,aes(N,deltaUT))+
geom_line()
head(SSSSm)
ggplot()+
geom_line(tarDFm,aes(N,deltaUT))+
geom_point(SSSSm,aes(N.pow,deltaBT.pow),shape=1,size=3)+
geom_point(SSSSm,aes(N.x,MAEb),shape=0,size=3)+
#  geom_errorbar(data=SSSSp,aes(x=N.x,y=MAE,
#                              ymin=(MAE-CI_AE),ymax=(MAE+CI_AE)))+
facet_wrap(.~plotvar,scales="free_y")+
scale_x_continuous()+
scale_y_continuous()+
theme_bw()+xlab("Sample Size")+ylab("Power Analysis Effect Size : MAE")
ggplot(data=tarDFm,aes(N,deltaUT))+
geom_line()+
geom_point(data=SSSSm,aes(N.pow,deltaBT.pow),shape=1,size=3)+
geom_point(data=SSSSm,aes(N.x,MAEb),shape=0,size=3)+
#  geom_errorbar(data=SSSSp,aes(x=N.x,y=MAE,
#                              ymin=(MAE-CI_AE),ymax=(MAE+CI_AE)))+
facet_wrap(.~plotvar,scales="free_y")+
scale_x_continuous()+
scale_y_continuous()+
theme_bw()+xlab("Sample Size")+ylab("Power Analysis Effect Size : MAE")
ggplot(data=subset(tarDF,var%in%targets_manu),aes(N,deltaUT))+
geom_line()+
geom_point(data=subset(SSSSp,Var%in%targets_manu),aes(N.pow,deltaBT.pow),shape=1,size=3)+
geom_point(data=subset(SSSSp,Var%in%targets_manu),aes(N.x,MAEb),shape=0,size=3)+
#  geom_errorbar(data=SSSSp,aes(x=N.x,y=MAE,
#                              ymin=(MAE-CI_AE),ymax=(MAE+CI_AE)))+
facet_wrap(.~plotvar,scales="free_y")+
scale_x_continuous()+
scale_y_continuous()+
theme_bw()+xlab("Sample Size")+ylab("Power Analysis Effect Size : MAE")
ggplot(data=subset(tarDF,var%in%targets_manu),aes(N,deltaUT))+
geom_line()+
geom_point(data=subset(SSSSp,Var%in%targets_manu),aes(N.pow,deltaBT.pow),shape=1,size=3)+
geom_point(data=subset(SSSSp,Var%in%targets_manu),aes(N.x,MAEb),shape=0,size=3)+
#  geom_errorbar(data=SSSSp,aes(x=N.x,y=MAE,
#                              ymin=(MAE-CI_AE),ymax=(MAE+CI_AE)))+
facet_wrap(.~plotvar,scales="free_y")+
scale_x_continuous()+
scale_y_continuous()+
theme_bw()+
theme(panel.grid.major = element_blank(),panel.grid.minor = element_blank())+
xlab("Sample Size")+ylab("Power Analysis Effect Size : MAE")
PowerMAE_rep=ggplot(data=subset(tarDF,var%in%targets_manu),aes(N,deltaUT))+
geom_line()+
geom_point(data=subset(SSSSp,Var%in%targets_manu),aes(N.pow,deltaBT.pow),shape=1,size=3)+
geom_point(data=subset(SSSSp,Var%in%targets_manu),aes(N.x,MAEb),shape=0,size=3)+
#  geom_errorbar(data=SSSSp,aes(x=N.x,y=MAE,
#                              ymin=(MAE-CI_AE),ymax=(MAE+CI_AE)))+
facet_wrap(.~plotvar,scales="free_y")+
scale_x_continuous()+
scale_y_continuous()+
theme_bw()+
theme(panel.grid.major = element_blank(),panel.grid.minor = element_blank())+
xlab("Sample Size")+ylab("Power Analysis Effect Size : MAE")
ggsave(plot = PowerMAE_rep,filename = "T:/Benthic/Data/SfM/Method Comparision/Figures/PowerCurves_Manuscript.jpg",
width=6.5,height=6.5)
ggplot(data=subset(tarDF,var%in%targets_report),aes(N,deltaUT))+
geom_line()+
geom_point(data=subset(SSSSp,Var%in%targets_report),aes(N.pow,deltaBT.pow),shape=1,size=3)+
geom_point(data=subset(SSSSp,Var%in%targets_report),aes(N.x,MAEb),shape=0,size=3)+
#  geom_errorbar(data=SSSSp,aes(x=N.x,y=MAE,
#                              ymin=(MAE-CI_AE),ymax=(MAE+CI_AE)))+
facet_wrap(.~plotvar,scales="free_y")+
scale_x_continuous()+
scale_y_continuous()+
theme_bw()+
theme(panel.grid.major = element_blank(),panel.grid.minor = element_blank())+
xlab("Sample Size")+ylab("Power Analysis Effect Size : MAE")
PowerMAE_rep=ggplot(data=subset(tarDF,var%in%targets_report),aes(N,deltaUT))+
geom_line()+
geom_point(data=subset(SSSSp,Var%in%targets_report),aes(N.pow,deltaBT.pow),shape=1,size=3)+
geom_point(data=subset(SSSSp,Var%in%targets_report),aes(N.x,MAEb),shape=0,size=3)+
#  geom_errorbar(data=SSSSp,aes(x=N.x,y=MAE,
#                              ymin=(MAE-CI_AE),ymax=(MAE+CI_AE)))+
facet_wrap(.~plotvar,scales="free_y")+
scale_x_continuous()+
scale_y_continuous()+
theme_bw()+
theme(panel.grid.major = element_blank(),panel.grid.minor = element_blank())+
xlab("Sample Size")+ylab("Power Analysis Effect Size : MAE")
ggsave(plot = PowerMAE_rep,filename = "T:/Benthic/Data/SfM/Method Comparision/Figures/PowerCurves_Report.jpg",
width=6.5,height=6.5)
#all look like we should use a sqrt transform (though log could be better for size...)
tarGEN=NULL
for(t in 1:length(targets[1:2])){
DF=data.frame(N=seq(3,350,by=1),delta=NA,var=targets[t],plotvar=targetsplot[t],stringsAsFactors = F)
GEN$Y=(GEN[,c(targets[t])])
for (i in 1:nrow(DF)){
Yt=power.t.test(sd = sd(SSSS$Y,na.rm=T),n = DF$N[i],
sig.level = 0.05,power = 0.8)
DF$delta[i]=Yt$delta
print(paste(targets[t],"N=",DF$N[i]))
}
tarGEN=rbind(tarGEN,DF)
#plotlist[[t]]=ggplot(DF,aes(N,delta/meanDF$N,DF$delta/mean(SfM$Y,na.rm=T),log="x",ylab="Percent Effect Size",type="l")
}
GENsum=Belt[,c("METHOD","SITE","SITEVISITID","GENUS_CODE",targets[1:2])]%>%
filter(GENUS_CODE%in%c("MOSP","POSP","POCS"),METHOD=="SfM") %>%
pivot_longer(cols = all_of(targets[1:2]),
names_to = "Var",values_to = "Values") %>%
mutate(SqrtVal=sqrt(Values)) %>%
group_by(GENUS_CODE,Var) %>%
summarise(N=Nnona(Values),sd=sd(Values,na.rm=T),se=se(Values),CoV=CoV(Values))
GENdelta=Belt[c("METHOD","SITE","SITEVISITID","GENUS_CODE",targets[1:2])]%>%
filter(GENUS_CODE%in%c("MOSP","POSP","POCS")) %>%
pivot_longer(cols = all_of(targets[1:2]),
names_to = "Var",values_to = "Values")%>%
pivot_wider(names_from=METHOD,values_from=Values)%>%
mutate(Delta=SfM-Diver,SqrtDelta=sqrt(SfM)-sqrt(Diver))%>%
group_by(GENUS_CODE,Var)%>%
summarize(N=Nnona(Delta),MAE=mean(abs(Delta),na.rm=T),SE_AE=se(abs(Delta)),CI_AE=CI95(abs(Delta)))
GENp=right_join(GENdelta,GENsum,by="Var")
GENp$plotvar=tpLU[GENp$Var]
head(GENp)
PowLev=subset(tarGEN,N==104)
names(PowLev)=c("N.pow","delta.pow","Var","plotvar")
GENp=right_join(GENp,PowLev,by=c("Var","plotvar"))
GENp$EffSizeSD=GENp$delta.pow/GENp$sd
names(PowLev)=c("N","delta","Var","plotvar")
tarGEN$plotvar=factor(tarGEN$plotvar,levels=c("Adult Colony Density","Juvenile Colony Density"))
GENp$plotvar=factor(GENp$plotvar,levels=c("Adult Colony Density","Juvenile Colony Density"))
PowerMAEGEN=ggplot(tarGEN,aes(N,delta))+
geom_line()+
geom_point(data=SSSSp,aes(N.pow,delta.pow),shape=1,size=3)+
geom_point(data=SSSSp,aes(N.x,MAE),shape=0,size=3)+
#  geom_errorbar(data=SSSSp,aes(x=N.x,y=MAE,
#                              ymin=(MAE-CI_AE),ymax=(MAE+CI_AE)))+
facet_grid(.~plotvar,scales="free_y")+
scale_x_continuous()+
scale_y_continuous()+
theme_bw()+xlab("Sample Size")+ylab("Power Analysis Effect Size : MAE")
#all look like we should use a sqrt transform (though log could be better for size...)
tarGEN=NULL
for(t in 1:length(targets[1:2])){
DF=data.frame(N=seq(3,350,by=1),delta=NA,var=targets[t],plotvar=targetsplot[t],stringsAsFactors = F)
GEN$Y=(GEN[,c(targets[t])])
for (i in 1:nrow(DF)){
Yt=power.t.test(sd = sd(SSSS$Y,na.rm=T),n = DF$N[i],
sig.level = 0.05,power = 0.8)
DF$delta[i]=Yt$delta
print(paste(targets[t],"N=",DF$N[i]))
}
tarGEN=rbind(tarGEN,DF)
#plotlist[[t]]=ggplot(DF,aes(N,delta/meanDF$N,DF$delta/mean(SfM$Y,na.rm=T),log="x",ylab="Percent Effect Size",type="l")
}
GENsum=Belt[,c("METHOD","SITE","SITEVISITID","GENUS_CODE",targets[1:2])]%>%
filter(GENUS_CODE%in%c("MOSP","POSP","POCS"),METHOD=="SfM") %>%
pivot_longer(cols = all_of(targets[1:2]),
names_to = "Var",values_to = "Values") %>%
mutate(SqrtVal=sqrt(Values)) %>%
group_by(GENUS_CODE,Var) %>%
summarise(N=Nnona(Values),sd=sd(Values,na.rm=T),se=se(Values),CoV=CoV(Values))
GEN=subset(Belt,GENUS_CODE %in% c("MOSP","POSP","POCS"))
#all look like we should use a sqrt transform (though log could be better for size...)
tarGEN=NULL
for(t in 1:length(targets[1:2])){
DF=data.frame(N=seq(3,350,by=1),delta=NA,var=targets[t],plotvar=targetsplot[t],stringsAsFactors = F)
GEN$Y=(GEN[,c(targets[t])])
for (i in 1:nrow(DF)){
Yt=power.t.test(sd = sd(SSSS$Y,na.rm=T),n = DF$N[i],
sig.level = 0.05,power = 0.8)
DF$delta[i]=Yt$delta
print(paste(targets[t],"N=",DF$N[i]))
}
tarGEN=rbind(tarGEN,DF)
#plotlist[[t]]=ggplot(DF,aes(N,delta/meanDF$N,DF$delta/mean(SfM$Y,na.rm=T),log="x",ylab="Percent Effect Size",type="l")
}
GEN=subset(Belt,GENUS_CODE %in% c("MOSP","POSP","POCS"))
#all look like we should use a sqrt transform (though log could be better for size...)
tarGEN=NULL
for(t in 1:length(targets[1:2])){
DF=data.frame(N=seq(3,350,by=1),delta=NA,var=targets[t],plotvar=targetsplot[t],stringsAsFactors = F)
GEN$Y=(GEN[,c(targets[t])])
for (i in 1:nrow(DF)){
Yt=power.t.test(sd = sd(GEN$Y,na.rm=T),n = DF$N[i],
sig.level = 0.05,power = 0.8)
DF$delta[i]=Yt$delta
print(paste(targets[t],"N=",DF$N[i]))
}
tarGEN=rbind(tarGEN,DF)
#plotlist[[t]]=ggplot(DF,aes(N,delta/meanDF$N,DF$delta/mean(SfM$Y,na.rm=T),log="x",ylab="Percent Effect Size",type="l")
}
GENsum=Belt[,c("METHOD","SITE","SITEVISITID","GENUS_CODE",targets[1:2])]%>%
filter(GENUS_CODE%in%c("MOSP","POSP","POCS"),METHOD=="SfM") %>%
pivot_longer(cols = all_of(targets[1:2]),
names_to = "Var",values_to = "Values") %>%
mutate(SqrtVal=sqrt(Values)) %>%
group_by(GENUS_CODE,Var) %>%
summarise(N=Nnona(Values),sd=sd(Values,na.rm=T),se=se(Values),CoV=CoV(Values))
GENdelta=Belt[c("METHOD","SITE","SITEVISITID","GENUS_CODE",targets[1:2])]%>%
filter(GENUS_CODE%in%c("MOSP","POSP","POCS")) %>%
pivot_longer(cols = all_of(targets[1:2]),
names_to = "Var",values_to = "Values")%>%
pivot_wider(names_from=METHOD,values_from=Values)%>%
mutate(Delta=SfM-Diver,SqrtDelta=sqrt(SfM)-sqrt(Diver))%>%
group_by(GENUS_CODE,Var)%>%
summarize(N=Nnona(Delta),MAE=mean(abs(Delta),na.rm=T),SE_AE=se(abs(Delta)),CI_AE=CI95(abs(Delta)))
GENp=right_join(GENdelta,GENsum,by="Var")
GENp$plotvar=tpLU[GENp$Var]
head(GENp)
PowLev=subset(tarGEN,N==104)
head(GENdelta)
head(GENsum)
GENp=right_join(GENdelta,GENsum,by=c("Var","GENUS_CODE"))
head(GENp)
PowLev=subset(tarGEN,N==104)
names(PowLev)=c("N.pow","delta.pow","Var","plotvar")
GENp=right_join(GENp,PowLev,by=c("Var","plotvar"))
GENp$EffSizeSD=GENp$delta.pow/GENp$sd
names(PowLev)=c("N","delta","Var","plotvar")
tarGEN$plotvar=factor(tarGEN$plotvar,levels=c("Adult Colony Density","Juvenile Colony Density"))
GENp$plotvar=factor(GENp$plotvar,levels=c("Adult Colony Density","Juvenile Colony Density"))
GENp=right_join(GENdelta,GENsum,by=c("Var","GENUS_CODE"))
head(GENp)
GENp$plotvar=tpLU[GENp$Var]
PowLev=subset(tarGEN,N==104)
names(PowLev)=c("N.pow","delta.pow","Var","plotvar")
head(PowLev)
GENp=right_join(GENdelta,GENsum,by=c("Var","GENUS_CODE"))
GENp$plotvar=tpLU[GENp$Var]
head(GENp)
PowLev=subset(tarGEN,N==104)
head(PowLev)
head(tarGEN)
tarGEN=NULL
for(t in 1:length(targets[1:2])){
DF=data.frame(N=seq(3,350,by=1),GENUS_CODE=c("MOSP","POSP","POCS"),delta=NA,var=targets[t],plotvar=targetsplot[t],stringsAsFactors = F)
GEN$Y=(GEN[,c(targets[t])])
for (i in 1:nrow(DF)){
Yt=power.t.test(sd = sd(GEN$Y,na.rm=T),n = DF$N[i],
sig.level = 0.05,power = 0.8)
DF$delta[i]=Yt$delta
print(paste(targets[t],"N=",DF$N[i]))
}
tarGEN=rbind(tarGEN,DF)
#plotlist[[t]]=ggplot(DF,aes(N,delta/meanDF$N,DF$delta/mean(SfM$Y,na.rm=T),log="x",ylab="Percent Effect Size",type="l")
}
head(tarGEN)
GENsum=Belt[,c("METHOD","SITE","SITEVISITID","GENUS_CODE",targets[1:2])]%>%
filter(GENUS_CODE%in%c("MOSP","POSP","POCS"),METHOD=="SfM") %>%
pivot_longer(cols = all_of(targets[1:2]),
names_to = "Var",values_to = "Values") %>%
mutate(SqrtVal=sqrt(Values)) %>%
group_by(GENUS_CODE,Var) %>%
summarise(N=Nnona(Values),sd=sd(Values,na.rm=T),se=se(Values),CoV=CoV(Values))
GENdelta=Belt[c("METHOD","SITE","SITEVISITID","GENUS_CODE",targets[1:2])]%>%
filter(GENUS_CODE%in%c("MOSP","POSP","POCS")) %>%
pivot_longer(cols = all_of(targets[1:2]),
names_to = "Var",values_to = "Values")%>%
pivot_wider(names_from=METHOD,values_from=Values)%>%
mutate(Delta=SfM-Diver,SqrtDelta=sqrt(SfM)-sqrt(Diver))%>%
group_by(GENUS_CODE,Var)%>%
summarize(N=Nnona(Delta),MAE=mean(abs(Delta),na.rm=T),SE_AE=se(abs(Delta)),CI_AE=CI95(abs(Delta)))
GENp=right_join(GENdelta,GENsum,by=c("Var","GENUS_CODE"))
GENp$plotvar=tpLU[GENp$Var]
head(GENp)
PowLev=subset(tarGEN,N==104)
head(PowLev)
PowLev
head(tarGEN)
targets
tarGEN=NULL
uGENUS_CODE=unique(GEN$GENUS_CODE)
for(g in 1:length(uGENUS_CODE)){
GENUS_CODE=subset(GEN,GENUS_CODE==uGENUS_CODE[g])
for(t in 1:length(targets[1:2])){
DF=data.frame(N=seq(3,350,by=1),GENUS_CODE=GENUS_CODE[g],delta=NA,var=targets[t],plotvar=targetsplot[t],stringsAsFactors = F)
GEN$Y=(GEN[,c(targets[t])])
for (i in 1:nrow(DF)){
Yt=power.t.test(sd = sd(GEN$Y,na.rm=T),n = DF$N[i],
sig.level = 0.05,power = 0.8)
DF$delta[i]=Yt$delta
print(paste(targets[t],"N=",DF$N[i]))
}
tarGEN=rbind(tarGEN,DF)
#plotlist[[t]]=ggplot(DF,aes(N,delta/meanDF$N,DF$delta/mean(SfM$Y,na.rm=T),log="x",ylab="Percent Effect Size",type="l")
}
}
tarGEN=NULL
uGENUS_CODE=unique(GEN$GENUS_CODE)
for(g in 1:length(uGENUS_CODE)){
GENUS_CODE=subset(GEN,GENUS_CODE==uGENUS_CODE[g])
for(t in 1:length(targets[1:2])){
DF=data.frame(N=seq(3,350,by=1),GENUS_CODE=uGENUS_CODE[g],delta=NA,var=targets[t],plotvar=targetsplot[t],stringsAsFactors = F)
GEN$Y=(GEN[,c(targets[t])])
for (i in 1:nrow(DF)){
Yt=power.t.test(sd = sd(GEN$Y,na.rm=T),n = DF$N[i],
sig.level = 0.05,power = 0.8)
DF$delta[i]=Yt$delta
print(paste(targets[t],"N=",DF$N[i]))
}
tarGEN=rbind(tarGEN,DF)
#plotlist[[t]]=ggplot(DF,aes(N,delta/meanDF$N,DF$delta/mean(SfM$Y,na.rm=T),log="x",ylab="Percent Effect Size",type="l")
}
}
tarGEN
View(tarGEN)
tarGEN=NULL
uGENUS_CODE=unique(GEN$GENUS_CODE)
for(g in 1:length(uGENUS_CODE)){
GENUS_CODE=subset(GEN,GENUS_CODE==uGENUS_CODE[g])
for(t in 1:length(targets[1:2])){
DF=data.frame(N=seq(3,350,by=1),GENUS_CODE=uGENUS_CODE[g],delta=NA,var=targets[t],plotvar=targetsplot[t],stringsAsFactors = F)
GEN$Y=(GEN[,c(uGENUS_CODE[g],targets[t])])
for (i in 1:nrow(DF)){
Yt=power.t.test(sd = sd(GEN$Y,na.rm=T),n = DF$N[i],
sig.level = 0.05,power = 0.8)
DF$delta[i]=Yt$delta
print(paste(targets[t],"N=",DF$N[i]))
}
tarGEN=rbind(tarGEN,DF)
#plotlist[[t]]=ggplot(DF,aes(N,delta/meanDF$N,DF$delta/mean(SfM$Y,na.rm=T),log="x",ylab="Percent Effect Size",type="l")
}
}
View(tarGEN)
tarGEN=NULL
uGENUS_CODE=unique(GEN$GENUS_CODE)
for(g in 1:length(uGENUS_CODE)){
GENUS_CODE=subset(GEN,GENUS_CODE==uGENUS_CODE[g])
for(t in 1:length(targets[1:2])){
DF=data.frame(N=seq(3,350,by=1),GENUS_CODE=uGENUS_CODE[g],delta=NA,var=targets[t],plotvar=targetsplot[t],stringsAsFactors = F)
GEN$Y=(GEN[,c(GENUS_CODE[g],targets[t])])
for (i in 1:nrow(DF)){
Yt=power.t.test(sd = sd(GEN$Y,na.rm=T),n = DF$N[i],
sig.level = 0.05,power = 0.8)
DF$delta[i]=Yt$delta
print(paste(targets[t],"N=",DF$N[i]))
}
tarGEN=rbind(tarGEN,DF)
#plotlist[[t]]=ggplot(DF,aes(N,delta/meanDF$N,DF$delta/mean(SfM$Y,na.rm=T),log="x",ylab="Percent Effect Size",type="l")
}
}
View(tarGEN)
tarGEN=NULL
uGENUS_CODE=unique(GEN$GENUS_CODE)
for(g in 1:length(uGENUS_CODE)){
GENUS_CODE=subset(GEN,GENUS_CODE==uGENUS_CODE[g])
for(t in 1:length(targets[1:2])){
DF=data.frame(N=seq(3,350,by=1),GENUS_CODE=uGENUS_CODE[g],delta=NA,var=targets[t],plotvar=targetsplot[t],stringsAsFactors = F)
GEN$Y=(GEN[,c(targets[t])])
for (i in 1:nrow(DF)){
Yt=power.t.test(sd = sd(GEN$Y,na.rm=T),n = DF$N[i],
sig.level = 0.05,power = 0.8)
DF$delta[i]=Yt$delta
print(paste(targets[t],"N=",DF$N[i]))
}
tarGEN=rbind(tarGEN,DF)
#plotlist[[t]]=ggplot(DF,aes(N,delta/meanDF$N,DF$delta/mean(SfM$Y,na.rm=T),log="x",ylab="Percent Effect Size",type="l")
}
}
View(tarGEN)
tarGEN=NULL
uGENUS_CODE=unique(GEN$GENUS_CODE)
for(g in 1:length(uGENUS_CODE)){
GENUS_CODE=subset(GEN,GENUS_CODE==uGENUS_CODE[g])
for(t in 1:length(targets[1:2])){
DF=data.frame(N=seq(3,350,by=1),GENUS_CODE=uGENUS_CODE[g],delta=NA,var=targets[t],plotvar=targetsplot[t],stringsAsFactors = F)
GEN$Y=(GEN[,c(targets[t])])
for (i in 1:nrow(DF)){
Yt=power.t.test(sd = sd(GEN$Y,na.rm=T),n = DF$N[i],
sig.level = 0.05,power = 0.8)
DF$delta[i]=Yt$delta
print(paste(targets[t],"N=",DF$N[i]))
}
tarGEN=rbind(tarGEN,DF)
#plotlist[[t]]=ggplot(DF,aes(N,delta/meanDF$N,DF$delta/mean(SfM$Y,na.rm=T),log="x",ylab="Percent Effect Size",type="l")
}
}
View(tarGEN)
GENsum=Belt[,c("METHOD","SITE","SITEVISITID","GENUS_CODE",targets[1:2])]%>%
filter(GENUS_CODE%in%c("MOSP","POSP","POCS"),METHOD=="SfM") %>%
pivot_longer(cols = all_of(targets[1:2]),
names_to = "Var",values_to = "Values") %>%
mutate(SqrtVal=sqrt(Values)) %>%
group_by(GENUS_CODE,Var) %>%
summarise(N=Nnona(Values),sd=sd(Values,na.rm=T),se=se(Values),CoV=CoV(Values))
GENdelta=Belt[c("METHOD","SITE","SITEVISITID","GENUS_CODE",targets[1:2])]%>%
filter(GENUS_CODE%in%c("MOSP","POSP","POCS")) %>%
pivot_longer(cols = all_of(targets[1:2]),
names_to = "Var",values_to = "Values")%>%
pivot_wider(names_from=METHOD,values_from=Values)%>%
mutate(Delta=SfM-Diver,SqrtDelta=sqrt(SfM)-sqrt(Diver))%>%
group_by(GENUS_CODE,Var)%>%
summarize(N=Nnona(Delta),MAE=mean(abs(Delta),na.rm=T),SE_AE=se(abs(Delta)),CI_AE=CI95(abs(Delta)))
GENp=right_join(GENdelta,GENsum,by=c("Var","GENUS_CODE"))
GENp$plotvar=tpLU[GENp$Var]
head(GENp)
PowLev=subset(tarGEN,N==104)
names(PowLev)=c("N.pow","delta.pow","Var","plotvar")
GENp=right_join(GENp,PowLev,by=c("Var","plotvar"))
GENp$EffSizeSD=GENp$delta.pow/GENp$sd
names(PowLev)=c("N","delta","Var","plotvar")
tarGEN$plotvar=factor(tarGEN$plotvar,levels=c("Adult Colony Density","Juvenile Colony Density"))
GENp$plotvar=factor(GENp$plotvar,levels=c("Adult Colony Density","Juvenile Colony Density"))
GENp=right_join(GENdelta,GENsum,by=c("Var","GENUS_CODE"))
GENp$plotvar=tpLU[GENp$Var]
GENp
PowLev=subset(tarGEN,N==104)
head(PowLev)
names(PowLev)=c("N.pow","GENUS_CODE","delta.pow","Var","plotvar")
GENp=right_join(GENp,PowLev,by=c("Var","plotvar"))
GENp$EffSizeSD=GENp$delta.pow/GENp$sd
GENp$EffSizeSD=GENp$delta.pow/GENp$sd
head(PowLev)
GENp=right_join(GENdelta,GENsum,by=c("Var","GENUS_CODE"))
GENp$plotvar=tpLU[GENp$Var]
head(GENp)
PowLev=subset(tarGEN,N==104)
names(PowLev)=c("N.pow","GENUS_CODE","delta.pow","Var","plotvar")
GENp=right_join(GENp,PowLev,by=c("Var","plotvar"))
GENp$EffSizeSD=GENp$delta.pow/GENp$sd
names(PowLev)=c("N","GENUS_CODE","delta","Var","plotvar")
tarGEN$plotvar=factor(tarGEN$plotvar,levels=c("Adult Colony Density","Juvenile Colony Density"))
GENp$plotvar=factor(GENp$plotvar,levels=c("Adult Colony Density","Juvenile Colony Density"))
head(tarGEN)
tarGEN=NULL
uGENUS_CODE=unique(GEN$GENUS_CODE)
for(g in 1:length(uGENUS_CODE)){
GENUS_CODE=subset(GEN,GENUS_CODE==uGENUS_CODE[g])
for(t in 1:length(targets[1:2])){
DF=data.frame(N=seq(3,350,by=1),GENUS_CODE=uGENUS_CODE[g],delta=NA,var=targets[t],plotvar=targetsplot[t],stringsAsFactors = F)
GEN$Y=(GEN[,c(targets[t])])
GEN$GENUS_CODE=(GEN[,c(uGENUS_CODE[g])])
for (i in 1:nrow(DF)){
Yt=power.t.test(sd = sd(GEN$Y,na.rm=T),n = DF$N[i],
sig.level = 0.05,power = 0.8)
DF$delta[i]=Yt$delta
print(paste(targets[t],"N=",DF$N[i]))
}
tarGEN=rbind(tarGEN,DF)
#plotlist[[t]]=ggplot(DF,aes(N,delta/meanDF$N,DF$delta/mean(SfM$Y,na.rm=T),log="x",ylab="Percent Effect Size",type="l")
}
}
View(tarGEN)
tarGEN=NULL
uGENUS_CODE=unique(GEN$GENUS_CODE)
for(g in 1:length(uGENUS_CODE)){
GENUS_CODE=subset(GEN,GENUS_CODE==uGENUS_CODE[g])
for(t in 1:length(targets[1:2])){
DF=data.frame(N=seq(3,350,by=1),GENUS_CODE=uGENUS_CODE[g],delta=NA,var=targets[t],plotvar=targetsplot[t],stringsAsFactors = F)
GEN$Y=(GEN[,c(targets[t])])
GEN$GENUS_CODE=(GEN[,c(GENUS_CODE[g])])
for (i in 1:nrow(DF)){
Yt=power.t.test(sd = sd(GEN$Y,na.rm=T),n = DF$N[i],
sig.level = 0.05,power = 0.8)
DF$delta[i]=Yt$delta
print(paste(targets[t],"N=",DF$N[i]))
}
tarGEN=rbind(tarGEN,DF)
#plotlist[[t]]=ggplot(DF,aes(N,delta/meanDF$N,DF$delta/mean(SfM$Y,na.rm=T),log="x",ylab="Percent Effect Size",type="l")
}
}
View(tarGEN)
SSSSp
View(SSSSp)
View(SSSS)
tmp<-ddply(SSSS,.(GENUS_CODE,METHOD),summarize,mean=mean(Ave.od))
tmp
tmp<-ddply(SSSS,.(GENUS_CODE,METHOD),summarize,mean=mean(Ave.od,na.rm=T))
tmp
tmp<-ddply(SSSS,.(GENUS_CODE),summarize,mean=mean(Ave.od,na.rm=T))
tmp
tmp<-ddply(SSSS,.(GENUS_CODE),summarize,mean=mean(BLE_prev,na.rm=T))
tmp
>>>>>>> parent of 4050125 (updates for maramp)
