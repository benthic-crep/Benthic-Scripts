#2.Check that the columns have the appropripate type of data (e.g. numeric vs. text) & no errant codes (e.g. SEV and/or RD columns contain NA)
sapply(sfm,unique)
View(sfm.raw)
sfm.raw$NO_COLONY <- as.factor(ifelse(sfm.raw$NO_COLONY != "-1", "0", as.character(sfm.raw$NO_COLONY))) # NO_COLONY can be left as NA. Really just have to make sure that you put -1 when there are no colonies. Writing 0 is equivalent to NA
sfm.raw$OBS_YEAR <- rep(2019, times=nrow(sfm.raw))
sfm.raw$MISSION_ID <- rep("SE1902", times=nrow(sfm.raw))
sfm.raw$NO_COLONY <- as.factor(ifelse(sfm.raw$NO_COLONY != "-1", "0", as.character(sfm.raw$NO_COLONY))) # NO_COLONY can be left as NA. Really just have to make sure that you put -1 when there are no colonies. Writing 0 is equivalent to NA
sfm.raw$REMNANT <- as.factor(ifelse(sfm.raw$REMNANT != "-1", "0", as.character(sfm.raw$REMNANT))) # If no_colony, juvenile, frag, remnant missing just assume they = 0
sfm.raw$JUVENILE <- as.factor(ifelse(sfm.raw$JUVENILE != "-1", "0", as.character(sfm.raw$JUVENILE)))
sfm.raw$EX_BOUND <- as.factor(ifelse(sfm.raw$EX_BOUND != "-1", "0", as.character(sfm.raw$EX_BOUND)))
sfm.raw$FRAGMENT <- as.factor(ifelse(sfm.raw$FRAGMENT != "-1", "0", as.character(sfm.raw$FRAGMENT)))
sfm.raw <- sfm.raw %>% mutate_at(vars(RD_1, RD_2, RD_3, SEV_1, SEV_2, SEV_3,EXTENT_1, EXTENT_2,
EXTENT_3, SEGLENGTH, SEGWIDTH), ~replace(., is.na(.), 0))
sfm.raw <- sfm.raw %>% mutate_at(vars(RDCAUSE1, RDCAUSE2, RDCAUSE3, CON_1, CON_2, CON_3, SITE,
ANALYST, SPCODE, MORPH_CODE), ~recode(., "0" = "NA", " "= "NA")) # not really working
sfm.raw <- droplevels(sfm.raw)
sapply(sfm.raw,unique)
sfm.raw$OBS_YEAR <- rep(2019, times=nrow(sfm.raw))
sfm.raw$MISSION_ID <- rep("SE1902", times=nrow(sfm.raw))
sfm.raw$NO_COLONY <- as.factor(ifelse(sfm.raw$NO_COLONY != "-1", "0", as.character(sfm.raw$NO_COLONY))) # NO_COLONY can be left as NA. Really just have to make sure that you put -1 when there are no colonies. Writing 0 is equivalent to NA
sfm.raw$REMNANT <- as.factor(ifelse(sfm.raw$REMNANT != "-1", "0", as.character(sfm.raw$REMNANT))) # If no_colony, juvenile, frag, remnant missing just assume they = 0
sfm.raw$JUVENILE <- as.factor(ifelse(sfm.raw$JUVENILE != "-1", "0", as.character(sfm.raw$JUVENILE)))
sfm.raw$EX_BOUND <- as.factor(ifelse(sfm.raw$EX_BOUND != "-1", "0", as.character(sfm.raw$EX_BOUND)))
sfm.raw$FRAGMENT <- as.factor(ifelse(sfm.raw$FRAGMENT != "-1", "0", as.character(sfm.raw$FRAGMENT)))
sapply(sfm.raw,unique)
sfm.raw <- sfm.raw %>% mutate_at(vars(RD_1, RD_2, RD_3, SEV_1, SEV_2, SEV_3,EXTENT_1, EXTENT_2,
EXTENT_3, SEGLENGTH, SEGWIDTH), ~replace(., is.na(.), 0))
sfm.raw <- sfm.raw %>% mutate_at(vars(RDCAUSE1, RDCAUSE2, RDCAUSE3, CON_1, CON_2, CON_3, SITE,
ANALYST, SPCODE, MORPH_CODE), ~recode(., "0" = "NA", " "= "NA")) #
View(sfm.raw)
sfm <- droplevels(anti_join(sfm.raw, sfm.missing))
#Add column for segment area
levels(as.factor(sfm$SEGLENGTH))
sfm$SEGAREA <- sfm$SEGLENGTH*sfm$SEGWIDTH
#How many site/segments were annotated
sfm$site_seg<-paste(sfm$SITE,sfm$SEGMENT)
length(unique(sfm$site_seg)) #Feb 19 = 155 unique sites
s
output<-data.frame(
QC_check<-as.character(),
Status<-as.character(),stringsAsFactors = FALSE)
aframe while the other part was placed in the sfm dataframe. Remove these site-segments.
partial_SiteSeg_removal <- inner_join(sfm.missing, sfm, by = c("SITE", "SEGMENT"))
head(partial_SiteSeg_removal) # a dataframe with no data will be displayed if site-segment pairs were NOT split between missing and populated dataframes = good
View(partial_SiteSeg_removal)
View(sfm.missing)
output[,1] <- c("Sites have been completely annotated", "MA HAW-426: two rows have seglength = 0")
output[,1] <- c("Sites have been completely annotated", "MA HAW-4263: two rows have seglength = 0")
#2.Check that the columns have the appropripate type of data (e.g. numeric vs. text) & no errant codes (e.g. SEV and/or RD columns contain NA)
sapply(sfm,unique)
str(sfm)
sapply(sfm, class)
sfm$CON_3 <- RemoveLogicalNA(sfm$CON_3)
sapply(sfm, class)
sfm.raw$FRAGMENT <- as.factor(ifelse(sfm.raw$FRAGMENT != "-1", "0", as.character(sfm.raw$FRAGMENT)))
View(sfm.raw)
sfm.raw <- sfm.raw %>% mutate_at(vars(RD_1, RD_2, RD_3, SEV_1, SEV_2, SEV_3,EXTENT_1, EXTENT_2,
EXTENT_3, SEGLENGTH, SEGWIDTH), ~replace(., is.na(.), 0))
sfm.raw <- sfm.raw %>% mutate_at(vars(RDCAUSE1, RDCAUSE2, RDCAUSE3, CON_1, CON_2, CON_3, SITE,
ANALYST, SPCODE, MORPH_CODE), ~recode(., "0" = "NA", " "= "NA")) # not really working
sfm.raw <- droplevels(sfm.raw)
been completely filled out (not including RD and CON-related columns)
sfm.raw$ANALYST <- as.factor(sfm.raw$ANALYST)
sfm.raw$SITE <- as.factor(sfm.raw$SITE)
sfm.raw$SEGMENT <- as.factor(sfm.raw$SEGMENT)
sfm.missing.duplicate.rows <- rbind(
analyst.missing <- filter(sfm.raw, ANALYST %in% c("NA", " ")),
site.missing <- filter(sfm.raw, SITE %in% c("NA-   NA", "-   NA", "A-   NA")),
seglength.missing <-filter(sfm.raw, SEGLENGTH %in% c(0.0, "NA")),
segwidths.missing <- filter(sfm.raw, SEGWIDTH %in% c("0", "NA")),
spcode.missing <-  filter(sfm.raw, SPCODE %in% c("NA")),
morphcode.missing <-  filter(sfm.raw, MORPH_CODE %in% c("NA")),
transect.missing <-  filter(sfm.raw, TRANSECT %in% c(0, "<Null>", " ")),
segmennt.missing <-  filter(sfm.raw, SEGMENT %in% c("NA", "<NA>")))
sfm.missing <- sfm.missing.duplicate.rows[!duplicated(sfm.missing.duplicate.rows),]
dim(sfm.missing)
#Remove rows with no colony present from the sfm.missing dataframe
sfm.missing <- droplevels(anti_join(sfm.missing, no.colony.present))
behind, create a new dataframe where all rows with missing data have been removed
sfm.raw$SEGMENT <- as.factor(sfm.raw$SEGMENT)
sfm.raw$SITE <- as.factor(sfm.raw$SITE)
sfm <- droplevels(anti_join(sfm.raw, sfm.missing))
nrow(sfm)
Run this function that removes logical NAs ####
RemoveLogicalNA <- function(b)
{
if (is.logical(b) == "TRUE") {
b[is.logical(b)] <- "NA"
b <- as.factor(b)
}
return(b)
}
#### end function ####
#Add "NA" to columns with class = logical (whole column filled with italized, shaded "NA")
sfm$RDCAUSE3 <- is.logical(sfm$RDCAUSE3) #whole column shows up as shaded but is treated as character
sfm$CON_3 <- is.logical(sfm$CON_3)
sfm$RDCAUSE3 <- RemoveLogicalNA(sfm$RDCAUSE3)
sfm$CON_3 <- RemoveLogicalNA(sfm$CON_3)
sfm$SEV_3 <- RemoveLogicalNA(sfm$SEV_3)
levels(sfm.raw$RDCAUSE1)
sfm.raw$RDCAUSE1 <- as.factor(ifelse(sfm.raw$RDCAUSE1 != c("PRED"| "TLS" | "FISH" | "GAST" | "DAMG" | "UNKN"),
"NA", as.character(sfm.raw$RDCAUSE1)))
sfm.raw$RDCAUSE1 <- as.factor(ifelse(sfm.raw$RDCAUSE1 != c("PRED", "TLS" , "FISH" , "GAST" , "DAMG" , "UNKN"),
"NA", as.character(sfm.raw$RDCAUSE1)))
sfm.raw$RDCAUSE1 <- as.factor(ifelse(sfm.raw$RDCAUSE1 != "PRED" |"TLS" | "FISH" | "GAST" | "DAMG" | "UNKN",
"NA", as.character(sfm.raw$RDCAUSE1)))
sfm.raw$RDCAUSE1 <- if(sfm.raw$RDCAUSE1 %in% c("PRED","TLS","FISH","GAST","DAMG","UNKN")) {
sfm.raw$RDCAUSE1 = "NA"
}
View(Calc_Site_nSurveysArea)
RemoveZeros <- function(column) {
sfm.raw$RDCAUSE1 <- for (i in 1:length(column)) {
if(i != c("PRED","TLS","FISH","GAST","DAMG","UNKN")) {
i = "NA"
}
}
}
RemoveZeros(sfm.raw$RDCAUSE2)
levels(sfm.raw$RDCAUSE2)
as.factor(sfm.raw$RDCAUSE2)
sfm.raw$RDCAUSE2 <- as.factor(sfm.raw$RDCAUSE2)
levels(sfm.raw$RDCAUSE2)
RemoveZeros <- function(column) {
for (i in 1:length(column)) {
if(i != c("PRED","TLS","FISH","GAST","DAMG","UNKN")) {
i = "NA"
}
}
}
RemoveZeros(sfm.raw$RDCAUSE2)
RemoveZeros <- function(column) {
for (i in 1:length(column)) {
column <- as.factor(column)
i <- levels(column)
if(i != c("PRED","TLS","FISH","GAST","DAMG","UNKN")) {
i = "NA"
}
}
}
RemoveZeros(sfm.raw$RDCAUSE2)
is.factor(sfm.raw$RDCAUSE3)
RemoveZeros <- function(column) {
column <- as.factor(column)}
RemoveZeros(sfm.raw$RDCAUSE3)
is.factor(sfm.raw$RDCAUSE3)
sfm.raw <- rbind(MA, ML, AH, RS)
#Fix other columns...HARAMP 2019 v2 specific!
sapply(sfm.raw,unique)
sfm.raw$OBS_YEAR <- rep(2019, times=nrow(sfm.raw))
sfm.raw$MISSION_ID <- rep("SE1902", times=nrow(sfm.raw))
sfm.raw$NO_COLONY <- as.factor(ifelse(sfm.raw$NO_COLONY != "-1", "0", as.character(sfm.raw$NO_COLONY))) # NO_COLONY can be left as NA. Really just have to make sure that you put -1 when there are no colonies. Writing 0 is equivalent to NA
sfm.raw$REMNANT <- as.factor(ifelse(sfm.raw$REMNANT != "-1", "0", as.character(sfm.raw$REMNANT))) # If no_colony, juvenile, frag, remnant missing just assume they = 0
sfm.raw$JUVENILE <- as.factor(ifelse(sfm.raw$JUVENILE != "-1", "0", as.character(sfm.raw$JUVENILE)))
sfm.raw$EX_BOUND <- as.factor(ifelse(sfm.raw$EX_BOUND != "-1", "0", as.character(sfm.raw$EX_BOUND)))
sfm.raw$FRAGMENT <- as.factor(ifelse(sfm.raw$FRAGMENT != "-1", "0", as.character(sfm.raw$FRAGMENT)))
sfm.raw$FRAGMENT <- as.factor(ifelse(sfm.raw$FRAGMENT = " ", "0", as.factor(sfm.raw$RDCAUSE1)))
sfm.raw$FRAGMENT <- as.factor(ifelse(sfm.raw$FRAGMENT == " ", "0", as.factor(sfm.raw$RDCAUSE1)))
#Fix other columns...HARAMP 2019 v2 specific!
sapply(sfm.raw,unique)
sfm.raw <- rbind(MA, ML, AH, RS)
sfm.raw$RDCAUSE2 <- as.factor(ifelse(sfm.raw$RDCAUSE2 == " ", "NA", as.factor(sfm.raw$RDCAUSE2)))
#Fix other columns...HARAMP 2019 v2 specific!
sapply(sfm.raw,unique)
sfm.raw <- rbind(MA, ML, AH, RS)
sfm.raw$RDCAUSE2 <- as.factor(ifelse(sfm.raw$RDCAUSE2 == " ", "NA", as.factor(sfm.raw$RDCAUSE2)))
sfm.raw <- rbind(MA, ML, AH, RS)
sfm.raw$RDCAUSE2 <- as.factor(ifelse(sfm.raw$RDCAUSE2 == " ", "NA", as.character(sfm.raw$RDCAUSE2)))
sfm.raw$RDCAUSE2 <- as.factor(ifelse(sfm.raw$RDCAUSE2 == " ", "NA", as.character(sfm.raw$RDCAUSE2)))
sfm.raw$RDCAUSE3 <- as.factor(ifelse(sfm.raw$RDCAUSE3 == " ", "NA", as.character(sfm.raw$RDCAUSE3)))
#Fix other columns...HARAMP 2019 v2 specific!
sapply(sfm.raw,unique)
sfm.raw$CON_1 <- as.factor(ifelse(sfm.raw$CON_1 == " ", "NA", as.factor(sfm.raw$CON_1)))
sfm.raw$CON_2 <- as.factor(ifelse(sfm.raw$CON_2 == " ", "NA", as.character(sfm.raw$CON_2)))
sfm.raw$CON_3 <- as.factor(ifelse(sfm.raw$CON_3 == " ", "NA", as.character(sfm.raw$CON_3)))
sfm.raw <- droplevels(sfm.raw)
sapply(sfm.raw,unique) #still showing NAs but these arent actually in the dataframe
sfm.raw$CON_2 <- as.factor(ifelse(sfm.raw$CON_2 == <NA>, "NA", as.character(sfm.raw$CON_2)))
sfm.raw$CON_2 <- as.factor(ifelse(sfm.raw$CON_2 == "<NA>", "NA", as.character(sfm.raw$CON_2)))
sfm.raw <- droplevels(sfm.raw)
sapply(sfm.raw,unique) #still showing NAs but these arent actually in the dataframe
sfm.raw <- sfm.raw %>% mutate_at(vars(RD_1, RD_2, RD_3, SEV_1, SEV_2, SEV_3,EXTENT_1, EXTENT_2,
EXTENT_3, SEGLENGTH, SEGWIDTH), ~replace(., is.na(.), 0))
sfm.raw <- sfm.raw %>% mutate_at(vars(RDCAUSE1, RDCAUSE2, RDCAUSE3, CON_1, CON_2, CON_3, SITE,
ANALYST, SPCODE, MORPH_CODE), ~replace(., is.na(.), "NA"))
s
sapply(sfm.raw,unique) #still showing NAs but these arent actually in the dataframe
sfm.raw <- droplevels(sfm.raw)
sapply(sfm.raw,unique) #still showing NAs but these arent actually in the dataframe
sfm.raw$OBS_YEAR <- rep(2019, times=nrow(sfm.raw))
sfm.raw$MISSION_ID <- rep("SE1902", times=nrow(sfm.raw))
sfm.raw$NO_COLONY <- as.factor(ifelse(sfm.raw$NO_COLONY != "-1", "0", as.character(sfm.raw$NO_COLONY))) # NO_COLONY can be left as NA. Really just have to make sure that you put -1 when there are no colonies. Writing 0 is equivalent to NA
sfm.raw$REMNANT <- as.factor(ifelse(sfm.raw$REMNANT != "-1", "0", as.character(sfm.raw$REMNANT))) # If no_colony, juvenile, frag, remnant missing just assume they = 0
sfm.raw$JUVENILE <- as.factor(ifelse(sfm.raw$JUVENILE != "-1", "0", as.character(sfm.raw$JUVENILE)))
sfm.raw$EX_BOUND <- as.factor(ifelse(sfm.raw$EX_BOUND != "-1", "0", as.character(sfm.raw$EX_BOUND)))
sfm.raw$FRAGMENT <- as.factor(ifelse(sfm.raw$FRAGMENT != "-1", "0", as.character(sfm.raw$FRAGMENT)))
sfm.raw <- droplevels(sfm.raw)
sapply(sfm.raw,unique) #still showing NAs but these arent actually in the dataframe
sfm.raw$JUVENILE <- as.factor(ifelse(sfm.raw$JUVENILE != "-1", "0", as.factor(sfm.raw$JUVENILE)))
sfm.raw <- rbind(MA, ML, AH, RS)
sfm.raw$OBS_YEAR <- rep(2019, times=nrow(sfm.raw))
sfm.raw$MISSION_ID <- rep("SE1902", times=nrow(sfm.raw))
sfm.raw$NO_COLONY <- as.factor(ifelse(sfm.raw$NO_COLONY != "-1", "0", as.character(sfm.raw$NO_COLONY))) # NO_COLONY can be left as NA. Really just have to make sure that you put -1 when there are no colonies. Writing 0 is equivalent to NA
sfm.raw$REMNANT <- as.factor(ifelse(sfm.raw$REMNANT != "-1", "0", as.character(sfm.raw$REMNANT))) # If no_colony, juvenile, frag, remnant missing just assume they = 0
sfm.raw$JUVENILE <- as.factor(ifelse(sfm.raw$JUVENILE != "-1", "0", as.factor(sfm.raw$JUVENILE)))
sfm.raw$EX_BOUND <- as.factor(ifelse(sfm.raw$EX_BOUND != "-1", "0", as.factor(sfm.raw$EX_BOUND)))
sfm.raw$FRAGMENT <- as.factor(ifelse(sfm.raw$FRAGMENT != "-1", "0", as.factor(sfm.raw$FRAGMENT)))
#Fix other columns...HARAMP 2019 v2 specific!
sapply(sfm.raw,unique)
sapply(sfm.raw,unique)
sfm.raw$OBS_YEAR <- rep(2019, times=nrow(sfm.raw))
sfm.raw$MISSION_ID <- rep("SE1902", times=nrow(sfm.raw))
sfm.raw$NO_COLONY <- as.factor(ifelse(sfm.raw$NO_COLONY != "-1", "0", as.factor(sfm.raw$NO_COLONY))) # NO_COLONY can be left as NA. Really just have to make sure that you put -1 when there are no colonies. Writing 0 is equivalent to NA
sfm.raw$REMNANT <- as.factor(ifelse(sfm.raw$REMNANT != "-1", "0", as.factor(sfm.raw$REMNANT))) # If no_colony, juvenile, frag, remnant missing just assume they = 0
sfm.raw$JUVENILE <- as.factor(ifelse(sfm.raw$JUVENILE != "-1", "0", as.factor(sfm.raw$JUVENILE)))
sfm.raw$EX_BOUND <- as.factor(ifelse(sfm.raw$EX_BOUND != "-1", "0", as.factor(sfm.raw$EX_BOUND)))
sfm.raw$FRAGMENT <- as.factor(ifelse(sfm.raw$FRAGMENT != "-1", "0", as.factor(sfm.raw$FRAGMENT)))
sfm.raw$RDCAUSE1 <- as.factor(ifelse(sfm.raw$RDCAUSE1 == " ", "NA", as.factor(sfm.raw$RDCAUSE1)))
sfm.raw$RDCAUSE2 <- as.factor(ifelse(sfm.raw$RDCAUSE2 == " ", "NA", as.factor(sfm.raw$RDCAUSE2)))
sfm.raw$RDCAUSE3 <- as.factor(ifelse(sfm.raw$RDCAUSE3 == " ", "NA", as.cfactor(sfm.raw$RDCAUSE3)))
sfm.raw$CON_1 <- as.factor(ifelse(sfm.raw$CON_1 == " ", "NA", as.factor(sfm.raw$CON_1)))
sfm.raw$CON_2 <- as.factor(ifelse(sfm.raw$CON_2 == " ", "NA", as.factor(sfm.raw$CON_2)))
sfm.raw$CON_3 <- as.factor(ifelse(sfm.raw$CON_3 == " ", "NA", as.factor(sfm.raw$CON_3)))
SiteNumLeadingZeros_SfM <- function(site_names)
{
tmp<-levels(site_names)
for (i in 1:length(tmp)) {
s<-tmp[i]
if (nchar(s)<9) {   # only change values where name length is too short ()
ss<-strsplit(as.character(tmp[i]), split="[_ |,-]")
s1<-ss[[1]][1]
s2<-ss[[1]][2]
if (length(x=grep("[A-Z]",unlist(strsplit(toupper(s2),""))))==0)
{
tmp[i]<-paste(s1, formatC(as.numeric(s2), width=5, flag="0"), sep="-")
}
}
}
levels(site_names)<-tmp
return(site_names)
}
#### end function ####
# Change site numbers such as MAR-22 to MAR-0022
sfm.raw$SITE<-SiteNumLeadingZeros_SfM(sfm.raw$SITE)
sfm.raw$SEGMENT<-as.factor(sfm.raw$SEGMENT)
table(sfm.raw$SITE,sfm.raw$SEGMENT)
#Create a dataframe that houses all rows that have not been completely filled out (not including RD and CON-related columns)
sfm.raw$ANALYST <- as.factor(sfm.raw$ANALYST)
sfm.raw$SITE <- as.factor(sfm.raw$SITE)
sfm.raw$SEGMENT <- as.factor(sfm.raw$SEGMENT)
sfm.missing.duplicate.rows <- rbind(
analyst.missing <- filter(sfm.raw, ANALYST %in% c("NA", " ")),
site.missing <- filter(sfm.raw, SITE %in% c("NA-   NA", "-   NA", "A-   NA")),
seglength.missing <-filter(sfm.raw, SEGLENGTH %in% c(0.0, "NA")),
segwidths.missing <- filter(sfm.raw, SEGWIDTH %in% c("0", "NA")),
spcode.missing <-  filter(sfm.raw, SPCODE %in% c("NA")),
morphcode.missing <-  filter(sfm.raw, MORPH_CODE %in% c("NA")),
transect.missing <-  filter(sfm.raw, TRANSECT %in% c(0, "<Null>", " ")),
segmennt.missing <-  filter(sfm.raw, SEGMENT %in% c("NA", "<NA>")))
sfm.missing <- sfm.missing.duplicate.rows[!duplicated(sfm.missing.duplicate.rows),]
dim(sfm.missing)
View(sfm.missing)
#Identify all rows where NO_COLONY_ is -1 and all values beforehand are also filled in. These values are ok and should NOT be placed in the sfm.missing dataframe
no.colony.present <- sfm.missing %>%
filter(NO_COLONY == "-1" & ANALYST != "NA" & SITE != "NA" & SEGLENGTH != "0" & SEGWIDTH != "0")
head(no.colony.present)
#Remove rows with no colony present from the sfm.missing dataframe
sfm.missing <- droplevels(anti_join(sfm.missing, no.colony.present))
#Save dataframe with missing values
write.csv(sfm.missing, "sfm_missing_rows.csv") #get these rows repopulated (if missing metadata) or annotated before moving forward
#If charging forward and leaving rows with missing data behind, create a new dataframe where all rows with missing data have been removed
sfm.raw$SEGMENT <- as.factor(sfm.raw$SEGMENT)
sfm.raw$SITE <- as.factor(sfm.raw$SITE)
sfm <- droplevels(anti_join(sfm.raw, sfm.missing))
View(sfm)
nrow(sfm)
#### If some column classes = logical, Run this function that removes logical NAs ####
RemoveLogicalNA <- function(b)
{
if (is.logical(b) == "TRUE") {
b[is.logical(b)] <- "NA"
b <- as.factor(b)
}
return(b)
}
#### end function ####
#Add "NA" to columns with class = logical (whole column filled with italized, shaded "NA")
sfm$RDCAUSE3 <- is.logical(sfm$RDCAUSE3) #whole column shows up as shaded but is treated as character
sfm$CON_3 <- is.logical(sfm$CON_3)
sfm$RDCAUSE3 <- RemoveLogicalNA(sfm$RDCAUSE3)
sfm$CON_3 <- RemoveLogicalNA(sfm$CON_3)
sfm$SEV_3 <- RemoveLogicalNA(sfm$SEV_3)
#Add column for segment area
levels(as.factor(sfm$SEGLENGTH))
sfm$SEGAREA <- sfm$SEGLENGTH*sfm$SEGWIDTH
#Still want this column?
# #Add column that differentiates adults from juveniles
# sfm$SHAPE_Leng <-  as.numeric(sfm$SHAPE_Leng)
# #sfm$Adult_Juvenile <- ifelse(sfm$SHAPE_Leng < 0.05 & sfm$FRAGMENT_Y != -1 | sfm$SEGAREA==1 & sfm$SPCODE != "PBER", "J", "A")
# sfm$Adult_Juvenile <- ifelse(sfm$SHAPE_Leng<0.05 & sfm$SPCODE != "PBER", "J", "A")
#How many site/segments were annotated
sfm$site_seg<-paste(sfm$SITE,sfm$SEGMENT)
length(unique(sfm$site_seg)) #Feb 19 = 155 unique sites
the qc checks
output<-data.frame(
QC_check<-as.character(),
Status<-as.character(),stringsAsFactors = FALSE)
#1. Check if only part of a site-segment was removed and placed in the sfm.missing dataframe while the other part was placed in the sfm dataframe. Remove these site-segments.
partial_SiteSeg_removal <- inner_join(sfm.missing, sfm, by = c("SITE", "SEGMENT"))
head(partial_SiteSeg_removal) # a dataframe with no data
View(partial_SiteSeg_removal)
output[,1] <- c("Sites have been completely annotated", "MA HAW-4263: two rows have seglength = 0")
#2.Check that the columns have the appropripate type of data (e.g. numeric vs. text) & no errant codes (e.g. SEV and/or RD columns contain NA)
sapply(sfm,unique)
sfm.raw <- rbind(MA, ML, AH, RS)
sfm.raw$OBS_YEAR <- rep(2019, times=nrow(sfm.raw))
sfm.raw$MISSION_ID <- rep("SE1902", times=nrow(sfm.raw))
sfm.raw$NO_COLONY <- as.factor(ifelse(sfm.raw$NO_COLONY != "-1", "0", as.character(sfm.raw$NO_COLONY))) # NO_COLONY can be left as NA. Really just have to make sure that you put -1 when there are no colonies. Writing 0 is equivalent to NA
sfm.raw$REMNANT <- as.factor(ifelse(sfm.raw$REMNANT != "-1", "0", as.character(sfm.raw$REMNANT))) # If no_colony, juvenile, frag, remnant missing just assume they = 0
sfm.raw$JUVENILE <- as.factor(ifelse(sfm.raw$JUVENILE != "-1", "0", as.character(sfm.raw$JUVENILE)))
sfm.raw$EX_BOUND <- as.factor(ifelse(sfm.raw$EX_BOUND != "-1", "0", as.character(sfm.raw$EX_BOUND)))
sfm.raw$FRAGMENT <- as.factor(ifelse(sfm.raw$FRAGMENT != "-1", "0", as.character(sfm.raw$FRAGMENT)))
sfm.raw$RDCAUSE1 <- as.factor(ifelse(sfm.raw$RDCAUSE1 == " ", "NA", as.character(sfm.raw$RDCAUSE1)))
sfm.raw$RDCAUSE2 <- as.factor(ifelse(sfm.raw$RDCAUSE2 == " ", "NA", as.character(sfm.raw$RDCAUSE2)))
sfm.raw$RDCAUSE3 <- as.factor(ifelse(sfm.raw$RDCAUSE3 == " ", "NA", as.character(sfm.raw$RDCAUSE3)))
sfm.raw$CON_1 <- as.factor(ifelse(sfm.raw$CON_1 == " ", "NA", as.character(sfm.raw$CON_1)))
sfm.raw$CON_2 <- as.factor(ifelse(sfm.raw$CON_2 == " ", "NA", as.character(sfm.raw$CON_2)))
sfm.raw$CON_3 <- as.factor(ifelse(sfm.raw$CON_3 == " ", "NA", as.character(sfm.raw$CON_3)))
# sfm.raw <- sfm.raw %>% mutate_at(vars(RD_1, RD_2, RD_3, SEV_1, SEV_2, SEV_3,EXTENT_1, EXTENT_2,
#                                       EXTENT_3, SEGLENGTH, SEGWIDTH), ~replace(., is.na(.), 0))
# sfm.raw <- sfm.raw %>% mutate_at(vars(RDCAUSE1, RDCAUSE2, RDCAUSE3, CON_1, CON_2, CON_3, SITE,
#                                       ANALYST, SPCODE, MORPH_CODE),
sfm.raw <- droplevels(sfm.raw)
SiteNumLeadingZeros_SfM <- function(site_names)
{
tmp<-levels(site_names)
for (i in 1:length(tmp)) {
s<-tmp[i]
if (nchar(s)<9) {   # only change values where name length is too short ()
ss<-strsplit(as.character(tmp[i]), split="[_ |,-]")
s1<-ss[[1]][1]
s2<-ss[[1]][2]
if (length(x=grep("[A-Z]",unlist(strsplit(toupper(s2),""))))==0)
{
tmp[i]<-paste(s1, formatC(as.numeric(s2), width=5, flag="0"), sep="-")
}
}
}
levels(site_names)<-tmp
return(site_names)
}
#### end function ####
# Change site numbers such as MAR-22 to MAR-0022
sfm.raw$SITE<-SiteNumLeadingZeros_SfM(sfm.raw$SITE)
sfm.raw$SEGMENT<-as.factor(sfm.raw$SEGMENT)
table(sfm.raw$SITE,sfm.raw$SEGMENT)
#Create a dataframe that houses all rows that have not been completely filled out (not including RD and CON-related columns)
sfm.raw$ANALYST <- as.factor(sfm.raw$ANALYST)
sfm.raw$SITE <- as.factor(sfm.raw$SITE)
sfm.raw$SEGMENT <- as.factor(sfm.raw$SEGMENT)
sfm.missing.duplicate.rows <- rbind(
analyst.missing <- filter(sfm.raw, ANALYST %in% c("NA", " ")),
site.missing <- filter(sfm.raw, SITE %in% c("NA-   NA", "-   NA", "A-   NA")),
seglength.missing <-filter(sfm.raw, SEGLENGTH %in% c(0.0, "NA")),
segwidths.missing <- filter(sfm.raw, SEGWIDTH %in% c("0", "NA")),
spcode.missing <-  filter(sfm.raw, SPCODE %in% c("NA")),
morphcode.missing <-  filter(sfm.raw, MORPH_CODE %in% c("NA")),
transect.missing <-  filter(sfm.raw, TRANSECT %in% c(0, "<Null>", " ")),
segmennt.missing <-  filter(sfm.raw, SEGMENT %in% c("NA", "<NA>")))
sfm.missing <- sfm.missing.duplicate.rows[!duplicated(sfm.missing.duplicate.rows),]
dim(sfm.missing)
View(sfm.missing)
#Identify all rows where NO_COLONY_ is -1 and all values beforehand are also filled in. These values are ok and should NOT be placed in the sfm.missing dataframe
no.colony.present <- sfm.missing %>%
filter(NO_COLONY == "-1" & ANALYST != "NA" & SITE != "NA" & SEGLENGTH != "0" & SEGWIDTH != "0")
head(no.colony.present)
#Remove rows with no colony present from the sfm.missing dataframe
sfm.missing <- droplevels(anti_join(sfm.missing, no.colony.present))
#Save dataframe with missing values
write.csv(sfm.missing, "sfm_missing_rows.csv") #get these rows repopulated (if missing metadata) or annotated before moving forward
#If charging forward and leaving rows with missing data behind, create a new dataframe where all rows with missing data have been removed
sfm.raw$SEGMENT <- as.factor(sfm.raw$SEGMENT)
sfm.raw$SITE <- as.factor(sfm.raw$SITE)
sfm <- droplevels(anti_join(sfm.raw, sfm.missing))
View(sfm)
nrow(sfm)
#### If some column classes = logical, Run this function that removes logical NAs ####
RemoveLogicalNA <- function(b)
{
if (is.logical(b) == "TRUE") {
b[is.logical(b)] <- "NA"
b <- as.factor(b)
}
return(b)
}
#### end function ####
#Add "NA" to columns with class = logical (whole column filled with italized, shaded "NA")
sfm$RDCAUSE3 <- is.logical(sfm$RDCAUSE3) #whole column shows up as shaded but is treated as character
sfm$CON_3 <- is.logical(sfm$CON_3)
sfm$RDCAUSE3 <- RemoveLogicalNA(sfm$RDCAUSE3)
sfm$CON_3 <- RemoveLogicalNA(sfm$CON_3)
sfm$SEV_3 <- RemoveLogicalNA(sfm$SEV_3)
#Add column for segment area
levels(as.factor(sfm$SEGLENGTH))
sfm$SEGAREA <- sfm$SEGLENGTH*sfm$SEGWIDTH
#Still want this column?
# #Add column that differentiates adults from juveniles
# sfm$SHAPE_Leng <-  as.numeric(sfm$SHAPE_Leng)
# #sfm$Adult_Juvenile <- ifelse(sfm$SHAPE_Leng < 0.05 & sfm$FRAGMENT_Y != -1 | sfm$SEGAREA==1 & sfm$SPCODE != "PBER", "J", "A")
# sfm$Adult_Juvenile <- ifelse(sfm$SHAPE_Leng<0.05 & sfm$SPCODE != "PBER", "J", "A")
#How many site/segments were annotated
sfm$site_seg<-paste(sfm$SITE,sfm$SEGMENT)
length(unique(sfm$site_seg)) #Feb 19 = 155 unique sites
# QC Checks --------------------------------------------------------
#2.Check that the columns have the appropripate type of data (e.g. numeric vs. text) & no errant codes (e.g. SEV and/or RD columns contain NA)
sapply(sfm,unique)
output[2,]<-c("No errant codes","Still has shaded NAs") #change depending on output from previous lines of code
#3. All TRANSECT within v2 of the geodabase should = A (B is for repeats)
filter(sfm, TRANSECT != "A")
output[3,]<-c("All transects = A","YES") #change depending on output from previous lines of code
#4. Make sure that if NO_COLONY=-1 none of the following columns have been populated
sfm %>% filter(sfm$SPCODE == "NA" & sfm$NO_COLONY != -1)
sfm %>% filter(sfm$SPCODE != "NA" & sfm$NO_COLONY == -1)
sfm %>% filter(sfm$SPCODE == -1 & sfm$NO_COLONY == -1)
sfm %>% filter(sfm$JUVENILE == -1 & sfm$NO_COLONY == -1)
sfm %>% filter(sfm$FRAGMENT  == -1 & sfm$NO_COLONY == -1)
sfm %>% filter(sfm$REMNANT == -1 & sfm$NO_COLONY == -1)
sfm %>% filter(sfm$MORPH_CODE == "NA" & sfm$NO_COLONY != -1)
sfm %>% filter(sfm$MORPH_CODE != "NA" & sfm$NO_COLONY == -1)
output[4,]<-c("NO_COLONY segments filled correctly","YES")
#5. Calculate the number of annotated segments per site and check that all segments contain both seglengths (except segment 15)
##Create a summary table of #segments per site and check against tracking data sheet
seg.per.site <- ddply(sfm,.(SITE, SEGMENT, SEGLENGTH), summarize, num.annotated = n_distinct(SEGLENGTH))
eval.seg.per.site <- as.data.frame(acast(seg.per.site, SITE~SEGMENT, length))
#eval.seg.per.site$Total <- rowSums(eval.seg.per.site)
View(eval.seg.per.site)
output[5,]<-c("All annotated segments have two seglengths","YES") #change depending on output from previous line of code
output[5,]<-c("All annotated segments have correct #seglengths","YES") #change depending on output from previous line of code
#6. Make sure only 1 annotator exists per site
analyst.per.site <- ddply(sfm,.(SITE), summarize, num.analyst = n_distinct(ANALYST))
filter(analyst.per.site, num.analyst>1)
output[6,]<-c("All sites annotated by one person","YES")
#7.Check for incorrect species-V:\PHOTOMOSAIC (1)\HARAMP\HARAMP_2019_codes.csv
ddply(sfm,.(SPCODE),summarize,temp=length(SPCODE))
output[7,]<-c("Species codes are correct","YES")
#8. Check that SEGWIDTH is correct (should have been apparent in qc #1).
levels(as.factor(sfm$SEGAREA)) #should all be 1 OR 2.5, unless otherwise stated
output[8,]<-c("All segment widths are correct","Yes") #change depending on output from previous line of code
#9. Identify colonies flagged as Juveniles or Adults, but have the innocorrect segment area. make sure j = 1 and A = 2.5
sm.colonies.eval <- sfm %>% filter(JUVENILE== -1,SEGAREA != 1); sm.colonies.eval
lg.colonies.eval <- sfm %>% filter(JUVENILE==0,SEGAREA==1, NO_COLONY==0); lg.colonies.eval
output[9,]<-c("Juveniles and Adult colonies have correct labeling","MA HAW-4263: One juvenile has seglength = 2.5 and another is missing junvenile = -1")
#10. Identify colonies with 0% recent dead, but has an RDCAUSE code - This check should result in 0 records
sfm[sfm$RD_1=="0"& sfm$RDCAUSE1!="NA",]
sfm[sfm$RD_2=="0"& sfm$RDCAUSE2!="NA",]
a<- sfm[sfm$RD_2=="0"& sfm$RDCAUSE2!="NA",]
View(a)
sfm[sfm$RD_3=="0"& sfm$RDCAUSE3!="NA",]
output[10,]<-c("0% Recent Dead corals do NOT have an RDCAUSE code","YES")
#11. Identify colonies with recent dead >0%, but there is no RDCAUSE code - This check should result in 0 records
sfm[sfm$RD_1 >0 & sfm$RDCAUSE1=="NA",] #,rowSums(is.na(sfm)) != ncol(sfm),]
sfm[sfm$RD_2 >0 & sfm$RDCAUSE2=="NA",] #,rowSums(is.na(a)) != ncol(a), ]
sfm[sfm$RD_3 >0 & sfm$RDCAUSE3=="NA",] #,rowSums(is.na(a)) != ncol(a), ]
output[11,]<-c("All corals with RD >0 have an RDCAUSE code","YES")
#12. Identify colonies with NO % EXTENT, but a condition - This check should result in 0 records
sfm[sfm$EXTENT_1=="0"& sfm$CON_1!="NA",]
sfm[sfm$EXTENT_2=="0"& sfm$CON_2!="NA",]
sfm[sfm$EXTENT_3=="0"& sfm$CON_3!="NA",]
a<-sfm[sfm$EXTENT_2=="0"& sfm$CON_2!="NA",]
View(a)
#12. Identify colonies with NO % EXTENT, but a condition - This check should result in 0 records
a<-sfm[sfm$EXTENT_1=="0"& sfm$CON_1!="NA",]
View(a)
output[12,]<-c("All colonies with a condition have an extent","AH HAW-4277: CON_2 = ALG but Extent_2 = 0, CON_1 = ALG/BLE but Extent and SEV = 0 (x10)")
#13. Identify colonies that have no condition, but a value in extent - This check should result in 0 records
sfm[sfm$CON_1=="NA"& sfm$EXTENT_1!="0",]
sfm[sfm$CON_2=="NA"& sfm$EXTNET_2!="0",]
sfm[sfm$CON_3=="NA"& sfm$EXTENT_3!="0",] #rowSums(is.na(a)) != ncol(a),]
output[13,]<-c("All colonies with NO condition also have NO extent","YES")
#14. Identify colonies with nothing in condition column, but a value in severity. Double check that these shouldn't be 0
sfm[sfm$EXTENT_1=="0"& sfm$SEV_1!="0",] #,rowSums(is.na(a)) != ncol(a),]
sfm[sfm$EXTENT_2=="0"& sfm$SEV_2!="0",]
sfm[sfm$EXTENT_3=="0"& sfm$SEV_3!="0",]
output[14,]<-c("All colonies with NO extent have NO severity","YES")
#15. make sure that the only rows with severity filled contain BLE or BLP in condition
sfm[sfm$SEV_1=="0"& sfm$CON_1 %in% c("BLE","BLP"),]
sfm[sfm$SEV_2=="0"& sfm$CON_2%in% c("BLE","BLP"),]
sfm[sfm$SEV_3=="0"& sfm$CON_3%in% c("BLE","BLP"),]
`%notin%` <- Negate(`%in%`)
sfm[sfm$SEV_1!="0"& sfm$CON_1 %notin% c("BLE","BLP"),]
sfm[sfm$SEV_2!="0"& sfm$CON_2 %notin% c("BLE","BLP"),]
sfm[sfm$SEV_3!="0"& sfm$CON_3 %notin% c("BLE","BLP"),]
#15. make sure that the only rows with severity filled contain BLE or BLP in condition
sfm[sfm$SEV_1=="0"& sfm$CON_1 %in% c("BLE","BLP"),]
output[15,]<-c("Severity value is present only in colonies with CON = BLE and BLP","RS HAW-3426: CON_1 = BLE but extent and sev = 0 (x2)")
#16. RD + OD is not greater than 100%
sfm$OLDDEAD<-as.numeric(sfm$OLDDEAD)
sfm$RD_2<-as.numeric(sfm$RD_2)
sfm$RD_1<-as.numeric(sfm$RD_1)
sfm$RD_3<-as.numeric(sfm$RD_3)
sfm$totaldead = sfm$RD_1+sfm$RD_2+sfm$RD_3 + sfm$OLDDEAD
sfm[sfm$totaldead>100,]
output[16,]<-c("RD + OD <=100%","YES")
write.csv(output,"HARAMP2019_sfm_output.csv")
#12. Identify colonies with NO % EXTENT, but a condition - This check should result in 0 records
a<-sfm[sfm$EXTENT_1=="0"& sfm$CON_1!="NA",]
View(a)
#15. make sure that the only rows with severity filled contain BLE or BLP in condition
sfm[sfm$SEV_1=="0"& sfm$CON_1 %in% c("BLE","BLP"),]
sfm[sfm$EXTENT_2=="0"& sfm$CON_2!="NA",]
sfm[sfm$EXTENT_3=="0"& sfm$CON_3!="NA",]
a<-sfm[sfm$EXTENT_2=="0"& sfm$CON_2!="NA",]
View(a)
