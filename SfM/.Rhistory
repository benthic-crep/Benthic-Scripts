View(b)
b<-sfm_seg %>% filter(SS %in% transect1$SS) %>%
full_join(b,transect1)
b<-sfm_seg %>% filter(SS %in% transect1$SS)
c<-full_join(b,transect1)
View(c)
c<-full_join(b,transect1) %>%
mutate(TRANSECT==1)
?mutate
c<-full_join(b,transect1) %>%
mutate(as.vector(TRANSECT==1))
?mutate
c<-full_join(b,transect1) %>%
mutate(TRANSECT,TRANSECT==1)
c<-full_join(b,transect1) %>%
mutate(TRANSECT,rep(1,times=nrow(c)))
c<-full_join(b,transect1) %>% mutate(TRANSECT,rep(1,times=nrow(c)))
c<-full_join(b,transect1) %>% mutate(TRANSECT,is.na(TRANSECT)==1)
c<-full_join(b,transect1) %>% mutate(TRANSECT==if_else(is.na(TRANSECT),1,"ERROR"))
b<-sfm_seg %>% filter(SS %in% transect1$SS)
c<-full_join(b,transect1)
c<-full_join(b,transect1) %>% mutate(c$TRANSECT==if_else(is.na(TRANSECT),1,"ERROR"))
c<-full_join(b,transect1) %>% mutate(c$TRANSECT==if_else(is.na(c$TRANSECT),1,"ERROR"))
c<-full_join(b,transect1)
c<-mutate(c$TRANSECT==if_else(is.na(c$TRANSECT),1,"ERROR"))
c<-mutate(c$TRANSECT==if_else(is.na(c$TRANSECT),1,2))
c<-full_join(b,transect1)
c<-c %>% mutate(TRANSECT==if_else(is.na(TRANSECT),1,2))
c<-c %>% mutate(TRANSECT==if_else(TRANSECT!=1,1,2))
?if_else
c<-c %>% mutate(TRANSECT = if_else(TRANSECT!=1,1,2))
b<-sfm_seg %>% filter(SS %in% transect1$SS)
c<-full_join(b,transect1)
str(b)
c<-as.data.frame(full_join(b,transect1))
str(b)
str(c)
c<-c %>% mutate(TRANSECT = if_else(TRANSECT!=1,1,2))
c<-c %>% mutate(TRANSECT = rep(1,times=nrow(c)))
View(b)
b<-b %>% mutate(TRANSECT = rep(1,times=nrow(b)))
c<-full_join(b,transect1)
c<-c %>% mutate(TRANSECT = rep(1,times=nrow(c)))
c<-full_join(b,sfm_seg)
c<-full_join(b,sfm_seg)
c<-c%>% mutate(TRANSECT=if_selse(is.na$TRANSECT),2,0)
c<-c%>% mutate(TRANSECT=if_else(is.na$TRANSECT),2,0)
c<-c%>% mutate(TRANSECT=if_else(is.na(TRANSECT)),2,0)
c<-c%>% mutate(TRANSECT=if_else(is.na(TRANSECT),2,0))
c<-c%>% mutate(TRANSECT=if_else(is.na(TRANSECT),2,1))
b<-sfm_seg %>% filter(SS %in% transect1$SS)
b<-b %>% mutate(TRANSECT = rep(1,times=nrow(b)))
c<-full_join(b,sfm_seg)
c<-c%>% mutate(TRANSECT=if_else(is.na(TRANSECT),2,1))
sfm_seg<-unique(ad_sfm[,SURVEY_Seg])
a<-sfm_seg[sfm_seg$ANALYST=="RS",];nrow(a) #split annotators into spearate dataframes
transect1<-sample_n(a, size=nrow(a)/2, replace=F) %>%
mutate(TRANSECT = 1)#assign transect = 1 to a randomly chosen half of the dataframe
b<-sfm_seg %>% filter(SS %in% transect1$SS)
b<-b %>% mutate(TRANSECT = rep(1,times=nrow(b)))
c<-full_join(b,sfm_seg)
c<-c%>% mutate(TRANSECT=if_else(is.na(TRANSECT),2,1))
#Randomly assign annotators to transects
SURVEY_Seg<-c("SITEVISITID", "SITE","SEGMENT","ANALYST")
sfm_seg<-unique(ad_sfm[,SURVEY_Seg])
sfm_seg$SS<- paste(sfm_seg$SITE,sfm_seg$SEGMENT, sep="_")
a<-sfm_seg[sfm_seg$ANALYST=="RS",];nrow(a) #split annotators into spearate dataframes
transect1<-sample_n(a, size=nrow(a)/2, replace=F) %>%
mutate(TRANSECT = 1)#assign transect = 1 to a randomly chosen half of the dataframe
b<-sfm_seg %>% filter(SS %in% transect1$SS)
b<-b %>% mutate(TRANSECT = rep(1,times=nrow(b)))
c<-full_join(b,sfm_seg)
c<-c%>% mutate(TRANSECT=if_else(is.na(TRANSECT),2,1))
nrow(ad_sfm)
ad_sfm<-left_join(ad_sfm,c[,!(colnames(sfm_seg)=="SS")])
nrow(ad_sfm)
View(ad_sfm)
b<-sfm_seg %>% filter(SS %in% transect1$SS)
b<-b%>% mutate(TRANSECT=if_else(is.na(TRANSECT),2,1))
SURVEY_Seg<-c("SITEVISITID", "SITE","SEGMENT","ANALYST")
sfm_seg<-unique(ad_sfm[,SURVEY_Seg])
sfm_seg$SS<- paste(sfm_seg$SITE,sfm_seg$SEGMENT, sep="_")
a<-sfm_seg[sfm_seg$ANALYST=="RS",];nrow(a) #split annotators into spearate dataframes
transect1<-sample_n(a, size=nrow(a)/2, replace=F) %>%
mutate(TRANSECT = 1)#assign transect = 1 to a randomly chosen half of the dataframe
b<-sfm_seg %>% filter(SS %in% transect1$SS)
b<-sfm_seg %>% filter(SS %in% transect1$SS)
b<-full_join(b,transect1)
b<-b %>% full_join(b,transect1) %>% mutate(TRANSECT=if_else(is.na(TRANSECT),2,1))
b<-sfm_seg %>% filter(SS %in% transect1$SS)
b<-full_join(b,transect1)
b<-b %>% mutate(TRANSECT=if_else(is.na(TRANSECT),2,1))
c<-full_join(b,sfm_seg)
c<-full_join(b,sfm_seg)
sfm_seg<-full_join(b,sfm_seg)
View(sfm_seg)
c<-select(sfm_seg,is.na(TRANSECT))
View(c)
c<-select(sfm_seg,is.na(TRANSECT)==T)
c<-sfm_seg %>% filter(is.na(TRANSECT)==T)
?unique
b<-sfm_seg %>% filter(SS %in% transect1$SS)
b<-full_join(b,transect1)
b<-b %>% mutate(TRANSECT=if_else(is.na(TRANSECT),2,1))
#Randomly assign annotators to transects
SURVEY_Seg<-c("SITEVISITID", "SITE","SEGMENT","ANALYST")
sfm_seg<-unique(ad_sfm[,SURVEY_Seg])
sfm_seg$SS<- paste(sfm_seg$SITE,sfm_seg$SEGMENT, sep="_")
sfm_seg$SSA<-paste(sfm_seg$SITE,sfm_seg$SEGMENT,sfm_seg$ANALYST, sep="_")
a<-sfm_seg[sfm_seg$ANALYST=="RS",];nrow(a) #split annotators into spearate dataframes
transect1<-sample_n(a, size=nrow(a)/2, replace=F) %>%
mutate(TRANSECT = 1)#assign transect = 1 to a randomly chosen half of the dataframe
b<-sfm_seg %>% filter(SS %in% transect1$SS)
b<-full_join(b,transect1)
b<-b %>% mutate(TRANSECT=if_else(is.na(TRANSECT),2,1))
c<-anti_join(sfm_seg,b)
SURVEY_Seg<-c("SITEVISITID", "SITE","SEGMENT","ANALYST")
sfm_seg<-unique(ad_sfm[,SURVEY_Seg])
sfm_seg$SS<- paste(sfm_seg$SITE,sfm_seg$SEGMENT, sep="_")
a<-sfm_seg[sfm_seg$ANALYST=="RS",];nrow(a) #split annotators into spearate dataframes
transect1<-sample_n(a, size=nrow(a)/2, replace=F) %>%
mutate(TRANSECT = 1)#assign transect = 1 to a randomly chosen half of the dataframe
b<-sfm_seg %>% filter(SS %in% transect1$SS)
b<-full_join(b,transect1)
b<-b %>% mutate(TRANSECT=if_else(is.na(TRANSECT),2,1))
c<-anti_join(sfm_seg,b)
sfm_seg<-full_join(b,sfm_seg)
c<-sfm_seg %>% filter(is.na(TRANSECT)==T)
?sample
a<-sfm_seg[sfm_seg$ANALYST=="RS",]
randomtransect<-c(1,2)
transect1<-sample(randomtransect,n=nrow(a),replace=T)
randomtransect<-sample(c(1,2),n=nrow(a),replace=T)
randomtransect<-a%>% sample(c(1,2),n=nrow(a),replace=T)
randomtransect<- sample(c(1,2),replace=T)
randomtransect
transects<- c(1,2)
sample(transects,replace=T)
sample(transects,replace=T,n=10)
sample(2)
sample(2,size=10)
sample(1:2,size=10,replace=T)
transects<- sample(1:2,size=nrow(a),replace=T)
sfm_seg<-full_join(b,sfm_seg)
c<-sfm_seg %>% filter(is.na(TRANSECT)==T)
d<-sfm_seg[c$ANALYST=="RS",];
transects<- sample(1:2,size=nrow(c),replace=T)
d$TRANSECT<-transects
View(d)
sfm_seg<-full_join(b,sfm_seg)
c<-sfm_seg %>% filter(is.na(TRANSECT)==T)
d<-c[c$ANALYST=="RS",];
transects<- sample(1:2,size=nrow(c),replace=T)
d$TRANSECT<-transects
sfm_seg<-full_join(b,sfm_seg)
c<-sfm_seg %>% filter(is.na(TRANSECT)==T)
d<-c[c$ANALYST=="RS",]
transects<- sample(1:2,size=nrow(d),replace=T)
d$TRANSECT<-transects
?unique
?sample_n
#sample half the rows from sfm_seg, but SS cannot be repeated. Assign to transect 1
transect2<-sample_n(sfm_seg, size=nrow(sfm_seg)/2, replace=F,unique(SS)==T)
?unique
SS_groups<-sfm_seg %>% group_by(SS)
View(SS_groups)
SS_groups<-sfm_seg %>% group_by(SS) %>% mutate(TRANSECT=sample(1:2,replace=T))
SS_groups<-sfm_seg %>% split_by(SS)
?group_by
?split
SS_groups<-split(sfm_seg,SS)
SS_groups<-split(sfm_seg,sfm_seg$SS)
View(SS_groups)
?do
?nest
t1<- sfm_seg %>% group_by(SS) %>%
nest() %>%
mutate(TRANSECT=sample(1:2,replace=F)) %>%
unnest()
View(t1)
#Randomly assign annotators to transects
SURVEY_Seg<-c("SITEVISITID", "SITE","SEGMENT","ANALYST")
sfm_seg<-unique(ad_sfm[,SURVEY_Seg])
sfm_seg$SS<- paste(sfm_seg$SITE,sfm_seg$SEGMENT, sep="_")
t1<- sfm_seg %>% group_by(SS) %>%
nest() %>%
mutate(TRANSECT=sample(1:2,replace=F)) %>%
unnest()
SS_groups<- split(sfm_seg,sfm_seg$SS)
SS_groups
SS_groups$TRANSECT <- sample(1:2,replace=F)
SS_groups
is.data.frame(SS_groups)
is.table(SS_groups)
t1<- sfm_seg %>% group_by(SS) %>%
mutate(TRANSECT=sample(1:2,replace=F))
SS_groups<- split(sfm_seg,sfm_seg$SS)
SS_groups
sfm_seg[order(SS)]
sfm_seg[order(sfm_segSS)]
sfm_seg[order(sfm_seg$SS)]
sfm_seg[,order(sfm_seg$SS)]
sfm_seg[order(sfm_seg$SS),]
sfm_seg<-sfm_seg[order(sfm_seg$SS),]
a<-sfm_seg[::2]
install.packages("df._getitem_")
sfm_seg$TRANSECT<-sample(1:2,replace=F)
#This script reads in the diver and SfM-generated demographic data that has been QC'd and cleaned up
#Then generates segment-level summarized that for methods comparision
rm(list=ls())
#LOAD LIBRARY FUNCTIONS ...
# source("C:/Users/Courtney.S.Couch/Documents/GitHub/Benthic-Scripts/Functions/Benthic_Functions_newApp_vTAOfork.R")
# source("C:/Users/Courtney.S.Couch/Documents/GitHub/fish-paste/lib/core_functions.R")
# source("C:/Users/Courtney.S.Couch/Documents/GitHub/fish-paste/lib/GIS_functions.R")
source("C:/Users/Corinne.Amir/Documents/GitHub/Benthic-Scripts/Functions/Benthic_Functions_newApp_vTAOfork.R")
source("C:/Users/Corinne.Amir/Documents/GitHub/fish-paste/lib/core_functions.R")
source("C:/Users/Corinne.Amir/Documents/GitHub/fish-paste/lib/GIS_functions.R")
## LOAD benthic data
load("T:/Benthic/Data/REA Coral Demography & Cover/Raw from Oracle/ALL_REA_ADULTCORAL_RAW_2013-2019.rdata") #from oracle
#Read in files
ad_diver<-read.csv("T:/Benthic/Data/SfM/Analysis Ready/HARAMP19_DIVERAdult_CLEANED.csv")
j_diver<-read.csv("T:/Benthic/Data/SfM/Analysis Ready/HARAMP19_DIVERJuv_CLEANED.csv")
ad_sfm<-read.csv("T:/Benthic/Data/SfM/Analysis Ready/HARAMP19_SfMAdult_CLEANED.csv")
j_sfm<-read.csv("T:/Benthic/Data/SfM/Analysis Ready/HARAMP19_SfMJuv_CLEANED.csv")
#Check number of unique site-segments....should all be (or at least end up being 43)
t1<-ddply(ad_sfm,.(SITE,SEGMENT),summarize,n=length(unique(ANALYST)));nrow(t1[t1$n>1,]) #44
t1<-ddply(j_sfm,.(SITE,SEGMENT),summarize,n=length(unique(ANALYST)));nrow(t1[t1$n>1,]) #44
t1<-ddply(ad_diver,.(SITE,SEGMENT),summarize,n=length(unique(DIVER)));nrow(t1[t1$n>1,]) #44 with at least 2 divers
t1<-ddply(j_diver,.(SITE,SEGMENT),summarize,n=length(unique(DIVER)));nrow(t1[t1$n>1,]) #35 with at least 2 divers
#Temporary fixes - WORK WITH MICHAEL TO FIX IN ORACLE
# ad_diver<-ad_diver[!(ad_diver$SITE=="HAW-04239" & ad_diver$SEGMENT=="10" & ad_diver$DIVER=="RS"),] #these were double entered under 2 different site names
# j_diver<-j_diver[!(j_diver$SITE=="HAW-04239" & j_diver$SEGMENT=="10" & j_diver$DIVER=="RS"),] #these were double entered under 2 different site names
# j_diver<-j_diver[!(j_diver$SITE=="NII-02580" & j_diver$SEGMENT=="10" & j_diver$DIVER=="M_A"),] #Entered by mistake
#
# ###MOL-2255 SEGMENT 10 ADULT DATA WASN'T ENTERED-have Michael add it.
# ###HAW-04239 SEGMENT 0 ADULT DATA WASN'T ENTERED-have Michael add it.
#
# j_diver$DIVER<-ifelse(j_diver$SITE=="KAU-02164" & j_diver$SEGMENT=="0" & j_diver$DIVER=="M_A","MSW",as.character(j_diver$DIVER))
#
# j_diver$DIVER<-ifelse(j_diver$SITE=="HAW-04221" & j_diver$SEGMENT=="10" & j_diver$DIVER=="M_A","MSW",as.character(j_diver$DIVER)) #correct...?
# j_diver$DIVER<-ifelse(j_diver$SITE=="HAW-03433" & j_diver$SEGMENT=="10" & j_diver$DIVER=="JDG","BVA",as.character(j_diver$DIVER))
ad_sfm<-ad_sfm[!(ad_sfm$SITE=="HAW-04259" & ad_sfm$SEGMENT=="10"),]  # These were annotated by mistake, we didn't do in water repeats
j_sfm<-j_sfm[!(j_sfm$SITE=="HAW-04259" & j_sfm$SEGMENT=="10"),]  # These were annotated by mistake, we didn't do in water repeats
#Make changes based on above QC.....FIX THESE PROBLEMS WITHIN SfMdemog_QC_correct.R
ad_sfm$SEGMENT<-ifelse(ad_sfm$SITE=="HAW-04294" & ad_sfm$ANALYST=="RS", 5,as.numeric(ad_sfm$SEGMENT)) #RS accidentally turned into segment = 10 (caused by 1357 problem)
j_sfm$SEGMENT<-ifelse(j_sfm$SITE=="HAW-04294" & j_sfm$ANALYST=="RS", 5,as.numeric(j_sfm$SEGMENT)) #RS accidentally turned into segment = 10 (caused by 1357 problem)
#j_sfm<-j_sfm[!(j_sfm$SITE=="HAW-04294" & j_sfm$SEGMENT=="10"),] # These were annotated by mistake, we didn't do in water repeats  ..............
#j_sfm<-j_sfm[!(j_sfm$SITE=="HAW-04299" & j_sfm$SEGMENT=="15"),] # These were annotated by mistake, we didn't do in water repeats  ..............
#ad_sfm<-ad_sfm[!(ad_sfm$SITE=="HAW-04299" & ad_sfm$SEGMENT=="15"),] # just double checking  ..............
ad_sfm<-ad_sfm[!(ad_sfm$SITE=="HAW-04278" & ad_sfm$SEGMENT %in% c("10","15")),] # These were annotated by mistake, we didn't do in water repeats
j_sfm<-j_sfm[!(j_sfm$SITE=="HAW-04278" & j_sfm$SEGMENT %in% c("10","15")),] # These were annotated by mistake, we didn't do in water repeats  ..............
ad_diver<-ad_diver[!(ad_diver$SITE=="HAW-04278" & ad_diver$SEGMENT %in% c("10","15")),]
j_diver<-j_diver[!(j_diver$SITE=="HAW-04278" & j_diver$SEGMENT %in% c("10","15")),]
ad_diver<-ad_diver[!(ad_diver$SITE=="OAH-03233" & ad_diver$SEGMENT %in% c("15")),] #only in diver surveys...maybe remove?
j_diver<-j_diver[!(j_diver$SITE=="OAH-03233" & j_diver$SEGMENT %in% c("15")),] #only in diver surveys...maybe remove?
# ###FOR CALIBRATION: Use this script to assign transect
# #Create Transect column and use this to code duplicate segments
# ad_sfm<-ad_sfm %>% mutate(TRANSECT=recode(ANALYST,
#                                         `MA`="1",
#                                         `RS`="2",
#                                         `MW`="2",
#                                         `CA`="3",
#                                         `ML`="4",
#                                         `FL`="5",
#                                         `AH`="6",
#                                         `NA`="NA"))
# #Check that segments were changed correctly
# ad_sfm<-droplevels(ad_sfm)
# table(ad_sfm$SITE,ad_sfm$TRANSECT)
#
# #Create Transect column and use this to code duplicate segments
# j_sfm<-j_sfm %>% mutate(TRANSECT=recode(ANALYST,
#                                           `MA`="1",
#                                           `RS`="2",
#                                           `MW`="2",
#                                           `CA`="3",
#                                           `ML`="4",
#                                           `FL`="5",
#                                           `AH`="6",
#                                           `NA`="NA"))
# #Check that segments were changed correctly
# j_sfm<-droplevels(j_sfm)
# table(j_sfm$SITE,j_sfm$TRANSECT)
#FOR COMPARATIVE ANALYSIS: Use this script to assign transect
#Adults
ad_sfm$ANALYST<-ifelse(ad_sfm$ANALYST=="MW","RS",as.character(ad_sfm$ANALYST)) #need 2 analysts only
ad_sfm<-ad_sfm[(ad_sfm$ANALYST%in% c("MA","RS")),] # Gets rid of all anotators except for MA and RS
ad_sfm <- droplevels(ad_sfm)
#Make sure that all sites have both analysts represented
analyst1<-filter(ad_sfm,ANALYST=="RS");nrow(analyst1)
analyst2<-filter(ad_sfm,ANALYST=="MA");nrow(analyst2)
as.data.frame.matrix(table(analyst1$SITE, analyst1$SEGMENT)) #identical==good
as.data.frame.matrix(table(analyst2$SITE, analyst2$SEGMENT))
SURVEY_Seg<-c("SITEVISITID", "SITE","SEGMENT","ANALYST")
sfm_seg<-unique(ad_sfm[,SURVEY_Seg])
sfm_seg$SS<- paste(sfm_seg$SITE,sfm_seg$SEGMENT, sep="_")
sfm_seg<-sfm_seg[order(sfm_seg$SS),]
sfm_seg$TRANSECT<-sample(1:2,replace=F)
nrow(ad_sfm)
ad_sfm<-left_join(ad_sfm,sfm_seg[,!(colnames(sfm_seg)=="SS")])
nrow(ad_sfm)
View(ad_sfm)
#Randomly assign annotators to transects
SURVEY_Seg<-c("SITEVISITID", "SITE","SEGMENT","ANALYST")
sfm_seg<-unique(j_sfm[,SURVEY_Seg])
sfm_seg$SS<- paste(sfm_seg$SITE,sfm_seg$SEGMENT, sep="_")
sfm_seg<-sfm_seg[order(sfm_seg$SS),]
sfm_seg$TRANSECT<-sample(1:2,replace=F)
nrow(j_sfm)
ad_sfm<-left_join(j_sfm,sfm_seg[,!(colnames(sfm_seg)=="SS")])
nrow(j_sfm)
View(j_sfm)
sfm_seg<-sfm_seg[order(sfm_seg$SS),]
#Juveniles
j_sfm$ANALYST<-ifelse(j_sfm$ANALYST=="MW","RS",as.character(j_sfm$ANALYST)) #need 2 analysts only
j_sfm<-j_sfm[(j_sfm$ANALYST%in% c("MA","RS")),] # Gets rid of all anotators except for MA and RS
j_sfm <- droplevels(j_sfm)
table(j_sfm$SITE,j_sfm$ANALYST)
#Randomly assign annotators to transects
SURVEY_Seg<-c("SITEVISITID", "SITE","SEGMENT","ANALYST")
sfm_seg<-unique(j_sfm[,SURVEY_Seg])
sfm_seg$SS<- paste(sfm_seg$SITE,sfm_seg$SEGMENT, sep="_")
sfm_seg<-sfm_seg[order(sfm_seg$SS),]
sfm_seg$TRANSECT<-sample(1:2,replace=F)
nrow(j_sfm)
ad_sfm<-left_join(j_sfm,sfm_seg[,!(colnames(sfm_seg)=="SS")])
nrow(j_sfm)
#This script reads in the diver and SfM-generated demographic data that has been QC'd and cleaned up
#Then generates segment-level summarized that for methods comparision
rm(list=ls())
#LOAD LIBRARY FUNCTIONS ...
# source("C:/Users/Courtney.S.Couch/Documents/GitHub/Benthic-Scripts/Functions/Benthic_Functions_newApp_vTAOfork.R")
# source("C:/Users/Courtney.S.Couch/Documents/GitHub/fish-paste/lib/core_functions.R")
# source("C:/Users/Courtney.S.Couch/Documents/GitHub/fish-paste/lib/GIS_functions.R")
source("C:/Users/Corinne.Amir/Documents/GitHub/Benthic-Scripts/Functions/Benthic_Functions_newApp_vTAOfork.R")
source("C:/Users/Corinne.Amir/Documents/GitHub/fish-paste/lib/core_functions.R")
source("C:/Users/Corinne.Amir/Documents/GitHub/fish-paste/lib/GIS_functions.R")
## LOAD benthic data
load("T:/Benthic/Data/REA Coral Demography & Cover/Raw from Oracle/ALL_REA_ADULTCORAL_RAW_2013-2019.rdata") #from oracle
#Read in files
ad_diver<-read.csv("T:/Benthic/Data/SfM/Analysis Ready/HARAMP19_DIVERAdult_CLEANED.csv")
j_diver<-read.csv("T:/Benthic/Data/SfM/Analysis Ready/HARAMP19_DIVERJuv_CLEANED.csv")
ad_sfm<-read.csv("T:/Benthic/Data/SfM/Analysis Ready/HARAMP19_SfMAdult_CLEANED.csv")
j_sfm<-read.csv("T:/Benthic/Data/SfM/Analysis Ready/HARAMP19_SfMJuv_CLEANED.csv")
#Check number of unique site-segments....should all be (or at least end up being 43)
t1<-ddply(ad_sfm,.(SITE,SEGMENT),summarize,n=length(unique(ANALYST)));nrow(t1[t1$n>1,]) #44
t1<-ddply(j_sfm,.(SITE,SEGMENT),summarize,n=length(unique(ANALYST)));nrow(t1[t1$n>1,]) #44
t1<-ddply(ad_diver,.(SITE,SEGMENT),summarize,n=length(unique(DIVER)));nrow(t1[t1$n>1,]) #44 with at least 2 divers
t1<-ddply(j_diver,.(SITE,SEGMENT),summarize,n=length(unique(DIVER)));nrow(t1[t1$n>1,]) #35 with at least 2 divers
#Temporary fixes - WORK WITH MICHAEL TO FIX IN ORACLE
# ad_diver<-ad_diver[!(ad_diver$SITE=="HAW-04239" & ad_diver$SEGMENT=="10" & ad_diver$DIVER=="RS"),] #these were double entered under 2 different site names
# j_diver<-j_diver[!(j_diver$SITE=="HAW-04239" & j_diver$SEGMENT=="10" & j_diver$DIVER=="RS"),] #these were double entered under 2 different site names
# j_diver<-j_diver[!(j_diver$SITE=="NII-02580" & j_diver$SEGMENT=="10" & j_diver$DIVER=="M_A"),] #Entered by mistake
#
# ###MOL-2255 SEGMENT 10 ADULT DATA WASN'T ENTERED-have Michael add it.
# ###HAW-04239 SEGMENT 0 ADULT DATA WASN'T ENTERED-have Michael add it.
#
# j_diver$DIVER<-ifelse(j_diver$SITE=="KAU-02164" & j_diver$SEGMENT=="0" & j_diver$DIVER=="M_A","MSW",as.character(j_diver$DIVER))
#
# j_diver$DIVER<-ifelse(j_diver$SITE=="HAW-04221" & j_diver$SEGMENT=="10" & j_diver$DIVER=="M_A","MSW",as.character(j_diver$DIVER)) #correct...?
# j_diver$DIVER<-ifelse(j_diver$SITE=="HAW-03433" & j_diver$SEGMENT=="10" & j_diver$DIVER=="JDG","BVA",as.character(j_diver$DIVER))
ad_sfm<-ad_sfm[!(ad_sfm$SITE=="HAW-04259" & ad_sfm$SEGMENT=="10"),]  # These were annotated by mistake, we didn't do in water repeats
j_sfm<-j_sfm[!(j_sfm$SITE=="HAW-04259" & j_sfm$SEGMENT=="10"),]  # These were annotated by mistake, we didn't do in water repeats
#Make changes based on above QC.....FIX THESE PROBLEMS WITHIN SfMdemog_QC_correct.R
ad_sfm$SEGMENT<-ifelse(ad_sfm$SITE=="HAW-04294" & ad_sfm$ANALYST=="RS", 5,as.numeric(ad_sfm$SEGMENT)) #RS accidentally turned into segment = 10 (caused by 1357 problem)
j_sfm$SEGMENT<-ifelse(j_sfm$SITE=="HAW-04294" & j_sfm$ANALYST=="RS", 5,as.numeric(j_sfm$SEGMENT)) #RS accidentally turned into segment = 10 (caused by 1357 problem)
#j_sfm<-j_sfm[!(j_sfm$SITE=="HAW-04294" & j_sfm$SEGMENT=="10"),] # These were annotated by mistake, we didn't do in water repeats  ..............
#j_sfm<-j_sfm[!(j_sfm$SITE=="HAW-04299" & j_sfm$SEGMENT=="15"),] # These were annotated by mistake, we didn't do in water repeats  ..............
#ad_sfm<-ad_sfm[!(ad_sfm$SITE=="HAW-04299" & ad_sfm$SEGMENT=="15"),] # just double checking  ..............
ad_sfm<-ad_sfm[!(ad_sfm$SITE=="HAW-04278" & ad_sfm$SEGMENT %in% c("10","15")),] # These were annotated by mistake, we didn't do in water repeats
j_sfm<-j_sfm[!(j_sfm$SITE=="HAW-04278" & j_sfm$SEGMENT %in% c("10","15")),] # These were annotated by mistake, we didn't do in water repeats  ..............
ad_diver<-ad_diver[!(ad_diver$SITE=="HAW-04278" & ad_diver$SEGMENT %in% c("10","15")),]
j_diver<-j_diver[!(j_diver$SITE=="HAW-04278" & j_diver$SEGMENT %in% c("10","15")),]
ad_diver<-ad_diver[!(ad_diver$SITE=="OAH-03233" & ad_diver$SEGMENT %in% c("15")),] #only in diver surveys...maybe remove?
j_diver<-j_diver[!(j_diver$SITE=="OAH-03233" & j_diver$SEGMENT %in% c("15")),] #only in diver surveys...maybe remove?
# ###FOR CALIBRATION: Use this script to assign transect
# #Create Transect column and use this to code duplicate segments
# ad_sfm<-ad_sfm %>% mutate(TRANSECT=recode(ANALYST,
#                                         `MA`="1",
#                                         `RS`="2",
#                                         `MW`="2",
#                                         `CA`="3",
#                                         `ML`="4",
#                                         `FL`="5",
#                                         `AH`="6",
#                                         `NA`="NA"))
# #Check that segments were changed correctly
# ad_sfm<-droplevels(ad_sfm)
# table(ad_sfm$SITE,ad_sfm$TRANSECT)
#
# #Create Transect column and use this to code duplicate segments
# j_sfm<-j_sfm %>% mutate(TRANSECT=recode(ANALYST,
#                                           `MA`="1",
#                                           `RS`="2",
#                                           `MW`="2",
#                                           `CA`="3",
#                                           `ML`="4",
#                                           `FL`="5",
#                                           `AH`="6",
#                                           `NA`="NA"))
# #Check that segments were changed correctly
# j_sfm<-droplevels(j_sfm)
# table(j_sfm$SITE,j_sfm$TRANSECT)
#FOR COMPARATIVE ANALYSIS: Use this script to assign transect
#Adults
ad_sfm$ANALYST<-ifelse(ad_sfm$ANALYST=="MW","RS",as.character(ad_sfm$ANALYST)) #need 2 analysts only
ad_sfm<-ad_sfm[(ad_sfm$ANALYST%in% c("MA","RS")),] # Gets rid of all anotators except for MA and RS
ad_sfm <- droplevels(ad_sfm)
#Make sure that all sites have both analysts represented
analyst1<-filter(ad_sfm,ANALYST=="RS");nrow(analyst1)
analyst2<-filter(ad_sfm,ANALYST=="MA");nrow(analyst2)
as.data.frame.matrix(table(analyst1$SITE, analyst1$SEGMENT)) #identical==good
as.data.frame.matrix(table(analyst2$SITE, analyst2$SEGMENT))
#Randomly assign annotators to transects
# hashtagged code is attempted versions of randomly assigning transect...not working but could lead to a better version than the one currently used
SURVEY_Seg<-c("SITEVISITID", "SITE","SEGMENT","ANALYST")
sfm_seg<-unique(ad_sfm[,SURVEY_Seg])
sfm_seg$SS<- paste(sfm_seg$SITE,sfm_seg$SEGMENT, sep="_")
# a<-sfm_seg[sfm_seg$ANALYST=="RS",];nrow(a) #split annotators into spearate dataframes
# transect1<-sample_n(a, size=nrow(a)/2, replace=F) %>%
#   mutate(TRANSECT = 1)#assign transect = 1 to a randomly chosen half of the dataframe
#
# b<-sfm_seg %>% filter(SS %in% transect1$SS)
# b<-full_join(b,transect1)
# b<-b %>% mutate(TRANSECT=if_else(is.na(TRANSECT),2,1))
#
# sfm_seg<-full_join(b,sfm_seg)
# c<-sfm_seg %>% filter(is.na(TRANSECT)==T)
# d<-c[c$ANALYST=="RS",]
# transects<- sample(1:2,size=nrow(d),replace=T)
# d$TRANSECT<-transects
sfm_seg<-sfm_seg[order(sfm_seg$SS),]
sfm_seg$TRANSECT<-sample(1:2,replace=F)
nrow(ad_sfm)
ad_sfm<-left_join(ad_sfm,sfm_seg[,!(colnames(sfm_seg)=="SS")])
nrow(ad_sfm)
#Juveniles
j_sfm$ANALYST<-ifelse(j_sfm$ANALYST=="MW","RS",as.character(j_sfm$ANALYST)) #need 2 analysts only
j_sfm<-j_sfm[(j_sfm$ANALYST%in% c("MA","RS")),] # Gets rid of all anotators except for MA and RS
j_sfm <- droplevels(j_sfm)
table(j_sfm$SITE,j_sfm$ANALYST)
#Make sure that all sites have both analysts represented
analyst1<-filter(j_sfm,ANALYST=="RS");nrow(analyst1)
analyst2<-filter(j_sfm,ANALYST=="MA");nrow(analyst2)
as.data.frame.matrix(table(analyst1$SITE, analyst1$SEGMENT)) #identical==good
as.data.frame.matrix(table(analyst2$SITE, analyst2$SEGMENT))
#Randomly assign annotators to transects
SURVEY_Seg<-c("SITEVISITID", "SITE","SEGMENT","ANALYST")
sfm_seg<-unique(j_sfm[,SURVEY_Seg])
sfm_seg$SS<- paste(sfm_seg$SITE,sfm_seg$SEGMENT, sep="_")
sfm_seg<-sfm_seg[order(sfm_seg$SS),]
sfm_seg$TRANSECT<-sample(1:2,replace=F)
nrow(j_sfm)
j_sfm<-left_join(j_sfm,sfm_seg[,!(colnames(sfm_seg)=="SS")])
nrow(j_sfm)
##Calcuating segment and transect area and add column for transect area
ad_sfm$TRANSECTAREA<-Transectarea(ad_sfm)
j_sfm$TRANSECTAREA<-Transectarea(j_sfm)
#Check that each site-segment has 2 annotators
t1<-ddply(ad_sfm,.(SITE,SEGMENT),summarize,n=length(unique(ANALYST)));nrow(t1[t1$n>1,]) #44
t1<-ddply(j_sfm,.(SITE,SEGMENT),summarize,n=length(unique(ANALYST)));nrow(t1[t1$n>1,]) #44
t1<-ddply(ad_diver,.(SITE,SEGMENT),summarize,n=length(unique(DIVER)));nrow(t1[t1$n>1,]) #43
t1<-ddply(j_diver,.(SITE,SEGMENT),summarize,n=length(unique(DIVER)));nrow(t1[t1$n>1,]) #35
for adult fragments so we can remove them from the dataset later (-1 indicates fragment)
ad_diver$Fragment[is.na(ad_diver$Fragment)] <- 0
j_diver$Fragment <- 0 # you need to add this column so that you can use the site level functions correctly
ad_diver$EX_BOUND<-0 #add column so we can merge with sfm data
j_diver$EX_BOUND<-0 #add column so we can merge with sfm data
#Remove Porites bernardi, it's causing issues with duplicate segments.
ad_diver<-subset(ad_diver,SPCODE!="PBER")
j_diver<-subset(j_diver,SPCODE!="PBER")
colnames(ad_diver)[colnames(ad_diver)=="DIVER"]<-"ANALYST" #Change column so we can merge with the sfm data
colnames(j_diver)[colnames(j_diver)=="DIVER"]<-"ANALYST"
#Choose needed columns for adult and juvenile data
ad_DATACOLS<-c("METHOD","ANALYST", "REGION","OBS_YEAR","MISSIONID","ISLAND","SEC_NAME","SITEVISITID","SITE","REEF_ZONE","DEPTH_BIN",
"HABITAT_CODE","LATITUDE","LONGITUDE","MIN_DEPTH_M","MAX_DEPTH_M","TRANSECT","SEGMENT","SEGLENGTH","SEGWIDTH",
"SEGAREA","TRANSECTAREA","COLONYID","EX_BOUND","Fragment","S_ORDER","GENUS_CODE","SPCODE","TAXONCODE","TAXONNAME",
"COLONYLENGTH","OLDDEAD","GENRD1","GENRD2","GENRD3","RD1","RDEXTENT1","RD2","RDEXTENT2","RD3",
"RDEXTENT3","CONDITION_1","EXTENT_1","SEVERITY_1","CONDITION_2","EXTENT_2","SEVERITY_2","CONDITION_3","EXTENT_3","SEVERITY_3")
head(ad_diver[,ad_DATACOLS])
ad_diver<-ad_diver[,ad_DATACOLS]
j_DATACOLS<-c("METHOD","ANALYST", "REGION","OBS_YEAR","MISSIONID","ISLAND","SEC_NAME","SITEVISITID","SITE","REEF_ZONE","DEPTH_BIN",
"HABITAT_CODE","LATITUDE","LONGITUDE","MIN_DEPTH_M","MAX_DEPTH_M","TRANSECT","SEGMENT","SEGLENGTH","SEGWIDTH",
"SEGAREA","TRANSECTAREA","COLONYID","EX_BOUND","Fragment","S_ORDER","GENUS_CODE","SPCODE","TAXONCODE","TAXONNAME",
"COLONYLENGTH")
head(j_diver[,j_DATACOLS])
j_diver<-j_diver[,j_DATACOLS]
awd<-rbind(ad_diver,ad_sfm)
jwd<-rbind(j_diver,j_sfm)
#Check that each site-segment has 2 divers and 2 annotators
t1<-ddply(awd,.(SITE,SEGMENT),summarize,n=length(unique(ANALYST)));nrow(t1[t1$n>2,]) #43--ok
t1<-ddply(jwd,.(SITE,SEGMENT),summarize,n=length(unique(ANALYST)));nrow(t1[t1$n>2,]) #38
#Check that each site-segment has 2 divers and 2 annotators
awd.test<-awd
awd.test$MethodRep<-as.factor(paste(awd.test$METHOD,awd.test$TRANSECT,sep="_"))
awd.test$SS<-paste(awd.test$SITE,awd.test$SEGMENT,sep="_")
t1<-as.data.frame.matrix(table(awd.test$SS,awd.test$MethodRep));dim(t1)
t1$SiteSeg<-rownames(t1)
t1<-t1%>%filter(t1$DIVER_1!=0);dim(t1)
t1<-t1%>%filter(t1$DIVER_2!=0);dim(t1)
View(t1)
t1<-t1%>%filter(t1$SfM_1!=0);dim(t1)
t1<-t1%>%filter(t1$SfM_2!=0);dim(t1)
t1<-awd.test %>% spread(MethodRep,SS)
View(t1)
#Check that each site-segment has 2 divers and 2 annotators
awd.test<-awd
awd.test$MethodRep<-as.factor(paste(awd.test$METHOD,awd.test$TRANSECT,sep="_"))
awd.test$SS<-paste(awd.test$SITE,awd.test$SEGMENT,sep="_")
t1<-as.data.frame.matrix(table(awd.test$SS,awd.test$MethodRep));dim(t1)
t1$SiteSeg<-rownames(t1)
t1<-t1%>%filter(t1$DIVER_1!=0);dim(t1)
