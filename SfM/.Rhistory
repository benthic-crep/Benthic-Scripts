colnames(ad_diver)[colnames(ad_diver)=="DIVER"]<-"ANALYST" #Change column so we can merge with the sfm data
colnames(j_diver)[colnames(j_diver)=="DIVER"]<-"ANALYST"
#Choose needed columns for adult and juvenile data
ad_DATACOLS<-c("METHOD","ANALYST", "REGION","OBS_YEAR","MISSIONID","ISLAND","SEC_NAME","SITEVISITID","SITE","REEF_ZONE","DEPTH_BIN",
"HABITAT_CODE","LATITUDE","LONGITUDE","MIN_DEPTH_M","MAX_DEPTH_M","TRANSECT","SEGMENT","SEGLENGTH","SEGWIDTH",
"SEGAREA","TRANSECTAREA","COLONYID","EX_BOUND","Fragment","S_ORDER","GENUS_CODE","SPCODE","TAXONCODE","TAXONNAME",
"COLONYLENGTH","OLDDEAD","GENRD1","GENRD2","GENRD3","RD1","RDEXTENT1","RD2","RDEXTENT2","RD3",
"RDEXTENT3","CONDITION_1","EXTENT_1","SEVERITY_1","CONDITION_2","EXTENT_2","SEVERITY_2","CONDITION_3","EXTENT_3","SEVERITY_3")
head(ad_diver[,ad_DATACOLS])
ad_diver<-ad_diver[,ad_DATACOLS]
j_DATACOLS<-c("METHOD","ANALYST", "REGION","OBS_YEAR","MISSIONID","ISLAND","SEC_NAME","SITEVISITID","SITE","REEF_ZONE","DEPTH_BIN",
"HABITAT_CODE","LATITUDE","LONGITUDE","MIN_DEPTH_M","MAX_DEPTH_M","TRANSECT","SEGMENT","SEGLENGTH","SEGWIDTH",
"SEGAREA","TRANSECTAREA","COLONYID","EX_BOUND","Fragment","S_ORDER","GENUS_CODE","SPCODE","TAXONCODE","TAXONNAME",
"COLONYLENGTH")
head(j_diver[,j_DATACOLS])
j_diver<-j_diver[,j_DATACOLS]
#Combine diver and sfm data
awd<-rbind(ad_diver,ad_sfm)
jwd<-rbind(j_diver,j_sfm)
#Check that each site-segment has 2 divers and 2 annotators
awd.test<-awd
awd.test$MethodRep<-as.factor(paste(awd.test$METHOD,awd.test$TRANSECT,sep="_"))
awd.test$SS<-paste(awd.test$SITE,awd.test$SEGMENT,sep="_")
t1<-as.data.frame.matrix(table(awd.test$SS,awd.test$MethodRep));dim(t1)
t1$SiteSeg<-rownames(t1)
t1<-t1%>%filter(t1$DIVER_1!=0);dim(t1) #689--ok
t1<-t1%>%filter(t1$DIVER_2!=0);dim(t1)
t1<-t1%>%filter(t1$SfM_1!=0);dim(t1)
t1<-t1%>%filter(t1$SfM_2!=0);dim(t1)
#Once filtering is completed, nrow should = 43 (FOR COMPARISON)
#Create a look up table of all of the colony attributes- you will need this for the functions below
SURVEY_COL<-c("METHOD","SITEVISITID", "OBS_YEAR", "REGION", "ISLAND","SEC_NAME", "SITE", "REEF_ZONE",
"DEPTH_BIN", "LATITUDE", "LONGITUDE","MIN_DEPTH_M","MAX_DEPTH_M","TRANSECT","SEGMENT","COLONYID","GENUS_CODE","TAXONCODE","SPCODE","COLONYLENGTH")
survey_colony<-unique(awd[,SURVEY_COL])
SURVEY_SITE<-c("METHOD","SITEVISITID", "OBS_YEAR", "REGION", "ISLAND","SEC_NAME", "SITE", "REEF_ZONE",
"DEPTH_BIN", "LATITUDE", "LONGITUDE","MIN_DEPTH_M","MAX_DEPTH_M")
survey_site<-unique(awd[,SURVEY_SITE])
SURVEY_Seg<-c("METHOD","SITEVISITID", "OBS_YEAR", "REGION", "ISLAND","SEC_NAME", "SITE", "REEF_ZONE",
"DEPTH_BIN","HABITAT_CODE", "LATITUDE", "LONGITUDE","MIN_DEPTH_M","MAX_DEPTH_M","METHOD","TRANSECT","SEGMENT")
#survey_segment<-unique(awd[,SURVEY_Seg])
ajwd<-full_join(awd,jwd) #fixes NA problem
survey_segment<-unique(ajwd[,SURVEY_Seg])
#Create a site list containing list of sites double surveyed by sfm and divers
ad_sfm$SS=paste0(ad_sfm$SITE,"_",ad_sfm$SEGMENT)
seglist=as.vector(ddply(ad_sfm,.(SS),summarize,length(unique(ad_sfm$SS))))
write.csv(seglist,file="T:/Benthic/Data/SfM/Summarized Data/Comparison_seglist.csv",row.names = F)
#Remove site-segments that are not present among all methods
ajwd$SS<-paste0(ajwd$SITE,"_",ajwd$SEGMENT)
ajwd<-subset(ajwd,SS%in%seglist$SS)
dim(ajwd)
length(unique(ajwd$SS))
table(ajwd$SS,ajwd$METHOD)
# GENERATE SUMMARY METRICS at the Segment-leveL BY GENUS--------------------------------------------------
#REMOVE COLONIES THAT COULD'T BE FULLY ANNOTATED IN SFM
awd<-subset(awd,EX_BOUND==0)
#Calc_ColDen_Transect
acd.gen<-Calc_ColDen_Seg(data = awd,grouping_field = "GENUS_CODE");colnames(acd.gen)[colnames(acd.gen)=="ColCount"]<-"AdColCount";colnames(acd.gen)[colnames(acd.gen)=="ColDen"]<-"AdColDen";colnames(acd.gen)[colnames(acd.gen)=="SEGAREA"]<-"SEGAREA_ad"# calculate density at genus level as well as total
jcd.gen<-Calc_ColDen_Seg(jwd,"GENUS_CODE"); colnames(jcd.gen)[colnames(jcd.gen)=="ColCount"]<-"JuvColCount";colnames(jcd.gen)[colnames(jcd.gen)=="ColDen"]<-"JuvColDen"
jcd.gen<-subset(jcd.gen,select=-c(SEGAREA))
## This function calculates mean colony length, % recent dead, % old dead, condition severity or condition extent to the segment level
## NOTE: can run both adult & juvenile data with this function for COLONYLENGTH
#c("COLONYLENGTH","RDEXTENT1", "RDEXTENT2", "RDEXTENT3", "OLDDEAD","SEVERITY_1","SEVERITY_2", "SEVERITY_3", "EXTENT_1", "EXTENT_2", "EXTENT_3")
cl.gen<-Calc_ColMetric_Seg(data = awd,grouping_field = "GENUS_CODE",pool_fields = "COLONYLENGTH"); colnames(cl.gen)[colnames(cl.gen)=="Ave.y"]<-"Ave.cl" #Average % old dead
od.gen<-Calc_ColMetric_Seg(data = awd,grouping_field = "GENUS_CODE",pool_fields = "OLDDEAD"); colnames(od.gen)[colnames(od.gen)=="Ave.y"]<-"Ave.od" #Average % old dead
rd.gen<-Calc_ColMetric_Seg(data = awd,grouping_field = "GENUS_CODE",pool_fields = c("RDEXTENT1", "RDEXTENT2","RDEXTENT3")); colnames(rd.gen)[colnames(rd.gen)=="Ave.y"]<-"Ave.rd" #Average % recent dead
#Calc_RDden_Transect
rdden.gen<-Calc_RDden_Seg(data=awd,grouping_field ="GENUS_CODE") # Density of recent dead colonies by condition, you will need to subset which ever condition you want. The codes ending in "S" are the general categories
acutedz.gen<-subset(rdden.gen,select = c(METHOD,SITEVISITID,SITE,TRANSECT,SEGMENT,GENUS_CODE,DZGN_G));colnames(acutedz.gen)[colnames(acutedz.gen)=="DZGN_G"]<-"DZGN_G_den" #subset just acute diseased colonies
#Calc_CONDden_Transect
condden.gen<-Calc_CONDden_Seg(data=awd,grouping_field ="GENUS_CODE")# Density of condition colonies by condition, you will need to subset which ever condition you want
ble.gen<-subset(condden.gen,select = c(METHOD,SITEVISITID,SITE,TRANSECT,SEGMENT,GENUS_CODE,BLE));colnames(ble.gen)[colnames(ble.gen)=="BLE"]<-"BLE_den" #subset just bleached colonies
chronicdz.gen<-subset(condden.gen,select = c(METHOD,SITEVISITID,SITE,TRANSECT,SEGMENT,GENUS_CODE,CHRO));colnames(chronicdz.gen)[colnames(chronicdz.gen)=="CHRO"]<-"CHRO_den" #subset just chronic diseased colonies
#Calc_Richness_Transect
#rich.gen<-Calc_Richness_Transect(awd,"GENUS_CODE")
#Join density and partial moratlity data together.You will need to replace the DUMMY field with the one you want
data.gen <- join_all(list(acd.gen,jcd.gen,cl.gen,od.gen,rd.gen,acutedz.gen,chronicdz.gen,ble.gen),
by=c("METHOD","SITE","SITEVISITID","TRANSECT","SEGMENT","GENUS_CODE"), type='full')
head(data.gen)
data.gen$JuvColCount[is.na(data.gen$JuvColCount)]<-0;data.gen$JuvColDen[is.na(data.gen$JuvColDen)]<-0
data.gen$AdColCount[is.na(data.gen$AdColCount)]<-0;data.gen$AdColDen[is.na(data.gen$AdColDen)]<-0
#Calculate transect level prevalence for acute dz, chronic dz and bleaching
data.gen$DZGN_G_prev<-(data.gen$DZGN_G_den*data.gen$SEGAREA_ad)/data.gen$AdColCount*100
data.gen$BLE_prev<-(data.gen$BLE_den*data.gen$SEGAREA_ad)/data.gen$AdColCount*100
data.gen$CHRO_prev<-(data.gen$CHRO_den*data.gen$SEGAREA_ad)/data.gen$AdColCount*100
#Concatenate method, Site,Transect and segment
data.gen$MethodRep<-paste(data.gen$METHOD,data.gen$TRANSECT,sep="_")
data.gen$SS<-paste(data.gen$SITE,data.gen$SEGMENT,sep="_")
#Check that each site-segment remaining has 2 divers and 2 annotators
t1<-ddply(data.gen,.(SITE,SEGMENT),summarize,n=length(unique(MethodRep)));nrow(t1[t1$n==4,])
t1<-as.data.frame.matrix(table(data.gen$SS,data.gen$MethodRep));dim(t1)
t1<-t1%>%filter(t1$DIVER_2!=0);dim(t1)
t1<-t1%>%filter(t1$DIVER_1!=0);dim(t1)
t1<-t1%>%filter(t1$SfM_1!=0);dim(t1) #missing site-segments!
t1<-t1%>%filter(t1$SfM_2!=0);dim(t1) #missing site-segments!
#Remove site-segments that are not present among all methods
dim(data.gen)
data.gen<-subset(data.gen$SS%in%seglist$SS)
?subset
#Remove site-segments that are not present among all methods
ajwd$SS<-paste0(ajwd$SITE,"_",ajwd$SEGMENT)
ajwd<-subset(ajwd,SS%in%seglist$SS)
dim(ajwd)
#survey_segment<-unique(awd[,SURVEY_Seg])
ajwd<-full_join(awd,jwd) #fixes NA problem
dim(ajwd)
#Remove site-segments that are not present among all methods
ajwd$SS<-paste0(ajwd$SITE,"_",ajwd$SEGMENT)
ajwd<-subset(ajwd,SS%in%seglist$SS)
dim(ajwd)
is.data.frame(aajwd)
is.data.frame(ajwd)
#Remove site-segments that are not present among all methods
dim(data.gen)
data.gen<-subset(data.gen,SS%in%seglist$SS)
dim(data.gen)
length(unique(data.gen$SS))
table(data.gen$SS,data.gen$METHOD)
t1<-as.data.frame.matrix(table(data.gen$SS,data.gen$MethodRep));dim(t1)
t1<-t1%>%filter(t1$DIVER_2!=0);dim(t1)
t1<-t1%>%filter(t1$DIVER_1!=0);dim(t1)
t1<-t1%>%filter(t1$SfM_1!=0);dim(t1)
t1<-t1%>%filter(t1$SfM_2!=0);dim(t1)
length(unique(data.gen$SS))
View(data.gen)
length(table(data.gen$SS,data.gen$METHOD)) # OAH-03235_0 is missing diver_2!
View(ajwd)
#Instead, we should extract sitelist where all method-reps are represented for a given SS
ajwd$MethodRep <- paste0(ajwd$METHOD,"_",ajwd$TRANSECT)
#survey_segment<-unique(awd[,SURVEY_Seg])
ajwd<-full_join(awd,jwd) #fixes NA problem
survey_segment<-unique(ajwd[,SURVEY_Seg])
View(survey_segment)
#Instead, we should extract sitelist where all method-reps are represented for a given SS
ajwd$MethodRep <- paste0(ajwd$METHOD,"_",ajwd$TRANSECT)
seglista <- as.data.frame.matrix(table(ajwd$SS, ajwd$MethodRep))
ajwd$MethodRep
ajwd$SS <- paste0(ajwd$SITE,"_",ajwd$SEGMENT)
seglista <- as.data.frame.matrix(table(ajwd$SS, ajwd$MethodRep))
dim(t1)
seglista <- as.data.frame.matrix(table(ajwd$SS, ajwd$MethodRep));dim(seglista)
View(seglista)
seglista$SiteSeg <-rownames(seglista)
seglista<-seglista %>% filter(seglista$DIVER_1);dim(seglista)
t1<-as.data.frame.matrix(table(awd.test$SS,awd.test$MethodRep));dim(t1)
t1$SiteSeg<-rownames(t1)
t1<-t1%>%filter(t1$DIVER_1!=0);dim(t1) #689--ok
View(t1)
seglista<-seglista %>% filter(seglista$DIVER_1);dim(seglista)
seglista<-seglista %>% filter(seglista$DIVER_1!=0);dim(seglista)
seglista<-seglista %>% filter(seglista$Diver_2!=0);dim(seglista)
seglista<-seglista %>% filter(seglista$DIVER_1!=0);dim(seglista)
seglista<-seglista %>% filter(seglista$Diver_2!=0);dim(seglista)
seglista <- as.data.frame.matrix(table(ajwd$SS, ajwd$MethodRep));dim(seglista)
seglista$SiteSeg <-rownames(seglista)
seglista<-seglista %>% filter(seglista$DIVER_1!=0);dim(seglista)
seglista<-seglista %>% filter(seglista$Diver_2!=0);dim(seglista)
seglista<-seglista %>% filter(seglista$SfM_1!=0);dim(seglista)
seglista <- as.data.frame.matrix(table(ajwd$SS, ajwd$MethodRep));dim(seglista)
seglista$SiteSeg <-rownames(seglista)
seglista<-seglista %>% filter(seglista$DIVER_1!=0);dim(seglista)
seglista<-seglista %>% filter(seglista$DIVER_2!=0);dim(seglista)
seglista<-seglista %>% filter(seglista$SfM_1!=0);dim(seglista)
seglista<-seglista %>% filter(seglista$SfM_2!=0);dim(seglista)
#Create a site list containing list of sites double surveyed by sfm and divers
ad_sfm$SS=paste0(ad_sfm$SITE,"_",ad_sfm$SEGMENT)
seglist=as.vector(ddply(ad_sfm,.(SS),summarize,length(unique(ad_sfm$SS)))) #definitely not the most fool-proof way we could be doing this.
View(seglista)
View(seglist)
anti_join(seglist,seglista)
seglista$SS <-rownames(seglista)
seglista<-seglista %>% filter(seglista$DIVER_1!=0);dim(seglista)
seglista<-seglista %>% filter(seglista$DIVER_2!=0);dim(seglista)
seglista<-seglista %>% filter(seglista$SfM_1!=0);dim(seglista)
seglista<-seglista %>% filter(seglista$SfM_2!=0);dim(seglista)
anti_join(seglist,seglista)
anti_join(seglist,seglista,by="SS")
seglista=as.vector(seglista$SiteSeg)
levels(seglist$SS)
sapply(seglist,unique)
sapply(seglista,unique)
seglista <- as.data.frame.matrix(table(ajwd$SS, ajwd$MethodRep));dim(seglista)
seglista$SS <-rownames(seglista)
seglista<-seglista %>% filter(seglista$DIVER_1!=0);dim(seglista)
seglista<-seglista %>% filter(seglista$DIVER_2!=0);dim(seglista)
seglista<-seglista %>% filter(seglista$SfM_1!=0);dim(seglista)
seglista<-seglista %>% filter(seglista$SfM_2!=0);dim(seglista)
sapply(seglista,unique)
sapply(seglist,unique)
#Create a site list containing list of sites double surveyed by sfm and divers
ajwd$MethodRep <- paste0(ajwd$METHOD,"_",ajwd$TRANSECT)
ajwd$SS <- paste0(ajwd$SITE,"_",ajwd$SEGMENT)
seglist <- as.data.frame.matrix(table(ajwd$SS, ajwd$MethodRep));dim(seglist)
seglist$SS <-rownames(seglist)
seglist<-seglist %>% filter(seglist$DIVER_1!=0);dim(seglist)
seglist<-seglist %>% filter(seglist$DIVER_2!=0);dim(seglist)
seglist<-seglist %>% filter(seglist$SfM_1!=0);dim(seglist)
seglist<-seglist %>% filter(seglist$SfM_2!=0);dim(seglist)
#Once filtering is completed, nrow should = 43 (FOR COMPARISON)
seglist=as.vector(seglist$SiteSeg)
write.csv(seglist,file="T:/Benthic/Data/SfM/Summarized Data/Comparison_seglist.csv",row.names = F)
#Remove site-segments that are not present among all methods
dim(ajwd)
ajwd<-subset(ajwd,SS%in%seglist$SS)
dim(ajwd)
#survey_segment<-unique(awd[,SURVEY_Seg])
ajwd<-full_join(awd,jwd) #fixes NA problem
divers
ajwd$MethodRep <- paste0(ajwd$METHOD,"_",ajwd$TRANSECT)
ajwd$SS <- paste0(ajwd$SITE,"_",ajwd$SEGMENT)
seglist <- as.data.frame.matrix(table(ajwd$SS, ajwd$MethodRep));dim(seglist)
seglist$SS <-rownames(seglist)
seglist<-seglist %>% filter(seglist$DIVER_1!=0);dim(seglist)
seglist<-seglist %>% filter(seglist$DIVER_2!=0);dim(seglist)
seglist<-seglist %>% filter(seglist$SfM_1!=0);dim(seglist)
seglist<-seglist %>% filter(seglist$SfM_2!=0);dim(seglist)
#Once filtering is completed, nrow should = 43 (FOR COMPARISON)
seglist=seglist$SiteSeg
#Remove site-segments that are not present among all methods
dim(ajwd)
ajwd<-subset(ajwd,SS%in%seglist$SS)
dim(ajwd)
ajwd$SS <- paste0(ajwd$SITE,"_",ajwd$SEGMENT)
seglist <- as.data.frame.matrix(table(ajwd$SS, ajwd$MethodRep));dim(seglist)
seglist$SS <-rownames(seglist)
seglist<-seglist %>% filter(seglist$DIVER_1!=0);dim(seglist)
seglist<-seglist %>% filter(seglist$DIVER_2!=0);dim(seglist)
seglist<-seglist %>% filter(seglist$SfM_1!=0);dim(seglist)
seglist<-seglist %>% filter(seglist$SfM_2!=0);dim(seglist)
seglist=seglist$SiteSeg
#Remove site-segments that are not present among all methods
dim(ajwd)
ajwd<-subset(ajwd,SS%in%seglist$SS)
dim(ajwd)
ajwd<-full_join(awd,jwd) #fixes NA problem
#Create a site list containing list of sites double surveyed by sfm and divers
ajwd$MethodRep <- paste0(ajwd$METHOD,"_",ajwd$TRANSECT)
ajwd$SS <- paste0(ajwd$SITE,"_",ajwd$SEGMENT)
seglist <- as.data.frame.matrix(table(ajwd$SS, ajwd$MethodRep));dim(seglist)
seglist$SS <-rownames(seglist)
seglist<-seglist %>% filter(seglist$DIVER_1!=0);dim(seglist)
seglist<-seglist %>% filter(seglist$DIVER_2!=0);dim(seglist)
seglist<-seglist %>% filter(seglist$SfM_1!=0);dim(seglist)
seglist<-seglist %>% filter(seglist$SfM_2!=0);dim(seglist)
#Once filtering is completed, nrow should = 43 (FOR COMPARISON)
seglist=seglist$SiteSeg
#Remove site-segments that are not present among all methods
dim(ajwd)
ajwd<-subset(ajwd,SS%in%seglist$SS)
dim(ajwd)
seglist=seglist$SS
ajwd$MethodRep <- paste0(ajwd$METHOD,"_",ajwd$TRANSECT)
ajwd$SS <- paste0(ajwd$SITE,"_",ajwd$SEGMENT)
seglist <- as.data.frame.matrix(table(ajwd$SS, ajwd$MethodRep));dim(seglist)
seglist$SS <-rownames(seglist)
seglist<-seglist %>% filter(seglist$DIVER_1!=0);dim(seglist)
seglist<-seglist %>% filter(seglist$DIVER_2!=0);dim(seglist)
seglist<-seglist %>% filter(seglist$SfM_1!=0);dim(seglist)
seglist<-seglist %>% filter(seglist$SfM_2!=0);dim(seglist)
#Once filtering is completed, nrow should = 43 (FOR COMPARISON)
seglist=seglist$SS
seglist <- as.data.frame.matrix(table(ajwd$SS, ajwd$MethodRep));dim(seglist)
#Create a site list containing list of sites double surveyed by sfm and divers
ajwd$MethodRep <- paste0(ajwd$METHOD,"_",ajwd$TRANSECT)
#survey_segment<-unique(awd[,SURVEY_Seg])
ajwd<-full_join(awd,jwd) #fixes NA problem
#Create a site list containing list of sites double surveyed by sfm and divers
ajwd$MethodRep <- paste0(ajwd$METHOD,"_",ajwd$TRANSECT)
ajwd$SS <- paste0(ajwd$SITE,"_",ajwd$SEGMENT)
seglist <- as.data.frame.matrix(table(ajwd$SS, ajwd$MethodRep));dim(seglist)
View(seglist)
seglist$SS <-rownames(seglist)
seglist<-seglist %>% filter(seglist$DIVER_1!=0);dim(seglist)
seglist<-seglist %>% filter(seglist$DIVER_2!=0);dim(seglist)
seglist<-seglist %>% filter(seglist$SfM_1!=0);dim(seglist)
seglist<-seglist %>% filter(seglist$SfM_2!=0);dim(seglist)
seglist=seglist$SS
#Remove site-segments that are not present among all methods
dim(ajwd)
ajwd<-subset(ajwd,SS%in%seglist$SS)
is.data.frame(seglist)
is.vector(seglist)
seglist=as.vector(seglist$SS)
ajwd<-subset(ajwd,SS%in%seglist$SS)
seglist=as.data.frame(seglist$SS)
#Create a site list containing list of sites double surveyed by sfm and divers
ajwd$MethodRep <- paste0(ajwd$METHOD,"_",ajwd$TRANSECT)
ajwd$SS <- paste0(ajwd$SITE,"_",ajwd$SEGMENT)
seglist <- as.data.frame.matrix(table(ajwd$SS, ajwd$MethodRep));dim(seglist)
seglist$SS <-rownames(seglist)
seglist<-seglist %>% filter(seglist$DIVER_1!=0);dim(seglist)
seglist<-seglist %>% filter(seglist$DIVER_2!=0);dim(seglist)
seglist<-seglist %>% filter(seglist$SfM_1!=0);dim(seglist)
seglist<-seglist %>% filter(seglist$SfM_2!=0);dim(seglist)
#Once filtering is completed, nrow should = 43 (FOR COMPARISON)
seglist=as.data.frame(seglist$SS)
#Remove site-segments that are not present among all methods
dim(ajwd)
ajwd<-subset(ajwd,SS%in%seglist$SS)
dim(ajwd)
by sfm and divers
ajwd$MethodRep <- paste0(ajwd$METHOD,"_",ajwd$TRANSECT)
ajwd$SS <- paste0(ajwd$SITE,"_",ajwd$SEGMENT)
seglist <- as.data.frame.matrix(table(ajwd$SS, ajwd$MethodRep));dim(seglist)
seglist$SS <-rownames(seglist)
seglist<-seglist %>% filter(seglist$DIVER_1!=0);dim(seglist)
seglist<-seglist %>% filter(seglist$DIVER_2!=0);dim(seglist)
seglist<-seglist %>% filter(seglist$SfM_1!=0);dim(seglist)
seglist<-seglist %>% filter(seglist$SfM_2!=0);dim(seglist)
egment<-unique(awd[,SURVEY_Seg])
ajwd<-full_join(awd,jwd) #fixes NA problem
#Create a site list containing list of sites double surveyed by sfm and divers
ajwd$MethodRep <- paste0(ajwd$METHOD,"_",ajwd$TRANSECT)
ajwd$SS <- paste0(ajwd$SITE,"_",ajwd$SEGMENT)
seglist <- as.data.frame.matrix(table(ajwd$SS, ajwd$MethodRep));dim(seglist)
seglist$SS <-rownames(seglist)
seglist<-seglist %>% filter(seglist$DIVER_1!=0);dim(seglist)
seglist<-seglist %>% filter(seglist$DIVER_2!=0);dim(seglist)
seglist<-seglist %>% filter(seglist$SfM_1!=0);dim(seglist)
seglist<-seglist %>% filter(seglist$SfM_2!=0);dim(seglist)
#Once filtering is completed, nrow sho
#Remove site-segments that are not present among all methods
dim(ajwd)
ajwd<-subset(ajwd,SS%in%seglist$SS)
dim(ajwd)
length(unique(ajwd$SS))
table(ajwd$SS,ajwd$METHOD)
View(ajwd)
#Remove site-segments that are not present among all methods
dim(data.gen)
#REMOVE COLONIES THAT COULD'T BE FULLY ANNOTATED IN SFM
awd<-subset(awd,EX_BOUND==0)
#Calc_ColDen_Transect
acd.gen<-Calc_ColDen_Seg(data = awd,grouping_field = "GENUS_CODE");colnames(acd.gen)[colnames(acd.gen)=="ColCount"]<-"AdColCount";colnames(acd.gen)[colnames(acd.gen)=="ColDen"]<-"AdColDen";colnames(acd.gen)[colnames(acd.gen)=="SEGAREA"]<-"SEGAREA_ad"# calculate density at genus level as well as total
jcd.gen<-Calc_ColDen_Seg(jwd,"GENUS_CODE"); colnames(jcd.gen)[colnames(jcd.gen)=="ColCount"]<-"JuvColCount";colnames(jcd.gen)[colnames(jcd.gen)=="ColDen"]<-"JuvColDen"
jcd.gen<-subset(jcd.gen,select=-c(SEGAREA))
## This function calculates mean colony length, % recent dead, % old dead, condition severity or condition extent to the segment level
## NOTE: can run both adult & juvenile data with this function for COLONYLENGTH
#c("COLONYLENGTH","RDEXTENT1", "RDEXTENT2", "RDEXTENT3", "OLDDEAD","SEVERITY_1","SEVERITY_2", "SEVERITY_3", "EXTENT_1", "EXTENT_2", "EXTENT_3")
cl.gen<-Calc_ColMetric_Seg(data = awd,grouping_field = "GENUS_CODE",pool_fields = "COLONYLENGTH"); colnames(cl.gen)[colnames(cl.gen)=="Ave.y"]<-"Ave.cl" #Average % old dead
od.gen<-Calc_ColMetric_Seg(data = awd,grouping_field = "GENUS_CODE",pool_fields = "OLDDEAD"); colnames(od.gen)[colnames(od.gen)=="Ave.y"]<-"Ave.od" #Average % old dead
rd.gen<-Calc_ColMetric_Seg(data = awd,grouping_field = "GENUS_CODE",pool_fields = c("RDEXTENT1", "RDEXTENT2","RDEXTENT3")); colnames(rd.gen)[colnames(rd.gen)=="Ave.y"]<-"Ave.rd" #Average % recent dead
#Calc_RDden_Transect
rdden.gen<-Calc_RDden_Seg(data=awd,grouping_field ="GENUS_CODE") # Density of recent dead colonies by condition, you will need to subset which ever condition you want. The codes ending in "S" are the general categories
acutedz.gen<-subset(rdden.gen,select = c(METHOD,SITEVISITID,SITE,TRANSECT,SEGMENT,GENUS_CODE,DZGN_G));colnames(acutedz.gen)[colnames(acutedz.gen)=="DZGN_G"]<-"DZGN_G_den" #subset just acute diseased colonies
#Calc_CONDden_Transect
condden.gen<-Calc_CONDden_Seg(data=awd,grouping_field ="GENUS_CODE")# Density of condition colonies by condition, you will need to subset which ever condition you want
ble.gen<-subset(condden.gen,select = c(METHOD,SITEVISITID,SITE,TRANSECT,SEGMENT,GENUS_CODE,BLE));colnames(ble.gen)[colnames(ble.gen)=="BLE"]<-"BLE_den" #subset just bleached colonies
chronicdz.gen<-subset(condden.gen,select = c(METHOD,SITEVISITID,SITE,TRANSECT,SEGMENT,GENUS_CODE,CHRO));colnames(chronicdz.gen)[colnames(chronicdz.gen)=="CHRO"]<-"CHRO_den" #subset just chronic diseased colonies
#Calc_Richness_Transect
#rich.gen<-Calc_Richness_Transect(awd,"GENUS_CODE")
#Join density and partial moratlity data together.You will need to replace the DUMMY field with the one you want
data.gen <- join_all(list(acd.gen,jcd.gen,cl.gen,od.gen,rd.gen,acutedz.gen,chronicdz.gen,ble.gen),
by=c("METHOD","SITE","SITEVISITID","TRANSECT","SEGMENT","GENUS_CODE"), type='full')
head(data.gen)
#Change NAs for abunanance and density metrics to 0. Don't change NAs in the partial mortality columns to 0
data.gen$JuvColCount[is.na(data.gen$JuvColCount)]<-0;data.gen$JuvColDen[is.na(data.gen$JuvColDen)]<-0
data.gen$AdColCount[is.na(data.gen$AdColCount)]<-0;data.gen$AdColDen[is.na(data.gen$AdColDen)]<-0
#Calculate transect level prevalence for acute dz, chronic dz and bleaching
data.gen$DZGN_G_prev<-(data.gen$DZGN_G_den*data.gen$SEGAREA_ad)/data.gen$AdColCount*100
data.gen$BLE_prev<-(data.gen$BLE_den*data.gen$SEGAREA_ad)/data.gen$AdColCount*100
data.gen$CHRO_prev<-(data.gen$CHRO_den*data.gen$SEGAREA_ad)/data.gen$AdColCount*100
View(data.gen)
#Concatenate method, Site,Transect and segment
data.gen$MethodRep<-paste(data.gen$METHOD,data.gen$TRANSECT,sep="_")
data.gen$SS<-paste(data.gen$SITE,data.gen$SEGMENT,sep="_")
#Check that each site-segment remaining has 2 divers and 2 annotators
t1<-ddply(data.gen,.(SITE,SEGMENT),summarize,n=length(unique(MethodRep)));nrow(t1[t1$n==4,])
t1<-as.data.frame.matrix(table(data.gen$SS,data.gen$MethodRep));dim(t1)
t1<-t1%>%filter(t1$DIVER_2!=0);dim(t1)
t1<-t1%>%filter(t1$DIVER_1!=0);dim(t1)
t1<-t1%>%filter(t1$SfM_1!=0);dim(t1)
t1<-t1%>%filter(t1$SfM_2!=0);dim(t1)
#Remove site-segments that are not present among all methods
dim(data.gen)
data.gen<-subset(data.gen,SS%in%seglist$SS)
dim(data.gen)
length(unique(data.gen$SS))
table(data.gen$SS,data.gen$METHOD)
write.csv(seglist,file="T:/Benthic/Data/SfM/Summarized Data/Comparison_seglist.csv",row.names = F)
#Make final dataframe to save
data.gen2<-left_join(data.gen,survey_segment)
if(nrow(data.gen)!=nrow(data.gen2)) {cat("WARNING: Dfs didn't merge properly")}
View(survey_segment)
View(survey_segment)
View(survey_segment)
SURVEY_Seg<-c("METHOD","SITEVISITID", "OBS_YEAR", "REGION", "ISLAND","SEC_NAME", "SITE", "REEF_ZONE",
"DEPTH_BIN","HABITAT_CODE", "LATITUDE", "LONGITUDE","MIN_DEPTH_M","MAX_DEPTH_M","METHOD","TRANSECT","SEGMENT")
survey_segment<-unique(awd[,SURVEY_Seg])
#Make final dataframe to save
data.gen2<-left_join(data.gen,survey_segment)
if(nrow(data.gen)!=nrow(data.gen2)) {cat("WARNING: Dfs didn't merge properly")}
#Save file for larger comparative analysis
write.csv(data.gen2,file="T:/Benthic/Data/SfM/Summarized Data/HARAMP_repeats_GENUS_Summarized Data.csv",row.names = F)
#source("C:/Users/Courtney.S.Couch/Documents/GitHub/Benthic-Scripts/Functions/SfMvDiver Plotting Functions.R")
source("C:/Users/Corinne.Amir/Documents/GitHub/Benthic-Scripts/Functions/SfMvDiver Plotting Functions.R")
data.gen<-read.csv("T:/Benthic/Data/SfM/Summarized Data/HARAMP_repeats_GENUS_Summarized Data.csv") #meant for comparison
#data.gen<-read.csv("T:/Benthic/Data/SfM/Summarized Data/HARAMP_repeats_GENUS_Summarized Data-CALIBRATION.csv") #meant for calibration
seglist<-read.csv("T:/Benthic/Data/SfM/Summarized Data/Comparison_seglist.csv") #meant for comparison
dim(data.gen)
#List of segments that were surveyed by all methods and multiple divers....UNEQUAL
sfm2<-data.gen[data.gen$MethodRep=="SfM_2",];length(unique(sfm2$SS)) #45 unique SS
sfm1<-data.gen[data.gen$MethodRep=="SfM_1",];length(unique(sfm1$SS)) #43
diver1<-data.gen[data.gen$MethodRep=="DIVER_1",];length(unique(diver1$SS)) #692
diver2<-data.gen[data.gen$MethodRep=="DIVER_2",];length(unique(diver2$SS)) #44
#List of segments that were surveyed by all methods and multiple divers....UNEQUAL
sfm2<-data.gen[data.gen$MethodRep=="SfM_2",];length(unique(sfm2$SS)) #45 unique SS
sfm1<-data.gen[data.gen$MethodRep=="SfM_1",];length(unique(sfm1$SS)) #43
diver1<-data.gen[data.gen$MethodRep=="DIVER_1",];length(unique(diver1$SS)) #692
diver2<-data.gen[data.gen$MethodRep=="DIVER_2",];length(unique(diver2$SS)) #44
View(data.gen)
#Join density and partial moratlity data together.You will need to replace the DUMMY field with the one you want
data.gen <- join_all(list(acd.gen,jcd.gen,cl.gen,od.gen,rd.gen,acutedz.gen,chronicdz.gen,ble.gen),
by=c("METHOD","SITE","SITEVISITID","TRANSECT","SEGMENT","GENUS_CODE"), type='full')
data.gen$JuvColCount[is.na(data.gen$JuvColCount)]<-0;data.gen$JuvColDen[is.na(data.gen$JuvColDen)]<-0
data.gen$AdColCount[is.na(data.gen$AdColCount)]<-0;data.gen$AdColDen[is.na(data.gen$AdColDen)]<-0
#Calculate transect level prevalence for acute dz, chronic dz and bleaching
data.gen$DZGN_G_prev<-(data.gen$DZGN_G_den*data.gen$SEGAREA_ad)/data.gen$AdColCount*100
data.gen$BLE_prev<-(data.gen$BLE_den*data.gen$SEGAREA_ad)/data.gen$AdColCount*100
data.gen$CHRO_prev<-(data.gen$CHRO_den*data.gen$SEGAREA_ad)/data.gen$AdColCount*100
#Concatenate method, Site,Transect and segment
data.gen$MethodRep<-paste(data.gen$METHOD,data.gen$TRANSECT,sep="_")
data.gen$SS<-paste(data.gen$SITE,data.gen$SEGMENT,sep="_")
#Check that each site-segment remaining has 2 divers and 2 annotators
t1<-ddply(data.gen,.(SITE,SEGMENT),summarize,n=length(unique(MethodRep)));nrow(t1[t1$n==4,])
t1<-as.data.frame.matrix(table(data.gen$SS,data.gen$MethodRep));dim(t1)
t1<-t1%>%filter(t1$DIVER_2!=0);dim(t1)
t1<-t1%>%filter(t1$DIVER_1!=0);dim(t1)
t1<-t1%>%filter(t1$SfM_1!=0);dim(t1)
t1<-t1%>%filter(t1$SfM_2!=0);dim(t1)
#Make final dataframe to save
data.gen2<-left_join(data.gen,survey_segment)
if(nrow(data.gen)!=nrow(data.gen2)) {cat("WARNING: Dfs didn't merge properly")}
#Save file for larger comparative analysis
write.csv(data.gen2,file="T:/Benthic/Data/SfM/Summarized Data/HARAMP_repeats_GENUS_Summarized Data.csv",row.names = F)
data.gen<-read.csv("T:/Benthic/Data/SfM/Summarized Data/HARAMP_repeats_GENUS_Summarized Data.csv") #meant for comparison
dim(data.gen)
#Create dataframe containing only site_segments that contain all 4 methodreps
#data.gen.rm<-subset(data.gen, TRANSECT %in% c(3, 4, 5, 6, "NA"));data.gen[data.gen$TRANSECT] #for calibration
#Remove site-segments that are not present among all methods
dim(data.gen)
data.gen<-subset(data.gen,SS%in%seglist$SS)
dim(data.gen)
data.sm<-subset(data.gen,SS%in%seglist$SS)
length(unique(data.sm$SS))
table(data.sm$SS,data.sm$METHOD)
length(unique(data.sm$SS))
table(data.sm$SS,data.sm$METHOD)
table(data.sm$SS,data.sm$MethodRep)
a<-table(data.sm$SS,data.sm$MethodRep)
sfm2<-data.sm[data.sm$MethodRep=="SfM_2",]
length(unique(sfm2$SS)) #46 unique SS
sfm1<-data.sm[data.sm$MethodRep=="SfM_1",]
length(unique(sfm1$SS)) #44
diver1<-data.sm[data.sm$MethodRep=="DIVER_1",]
length(unique(diver1$SS)) #692
diver2<-data.sm[data.sm$MethodRep=="DIVER_2",]
length(unique(diver2$SS))
diver1<-data.sm[data.sm$MethodRep=="DIVER_1",];length(unique(diver1$SS)) #692
data.sm<-droplevels(data.sm)
table(data.sm$SS, data.sm$MethodRep) #all columns should be NONZERO = FALSE
gen$MethodRep=="SfM_2",];colnames(sfm2)[8:20] <- paste("SfM2", colnames(sfm2[8:20]), sep = "");sfm2<-subset(sfm2,select=-c(METHOD,SEGAREA_ad,MethodRep,TRANSECT,METHOD.1))
d1<-data.sm[data.sm$MethodRep=="DIVER_1",];colnames(d1)[8:20] <- paste("d1", colnames(d1[8:20]), sep = "");d1<-subset(d1,select=-c(METHOD,SEGAREA_ad,MethodRep,TRANSECT,METHOD.1))
d2<-data.sm[data.sm$MethodRep=="DIVER_2",];colnames(d2)[8:20] <- paste("d2", colnames(d2[8:20]), sep = "");d2<-subset(d2,select=-c(METHOD,SEGAREA_ad,MethodRep,TRANSECT,METHOD.1))
sfm1<-data.sm[data.sm$MethodRep=="SfM_1",];colnames(sfm1)[8:20] <- paste("SfM1", colnames(sfm1[8:20]), sep = "");sfm1<-subset(sfm1,select=-c(METHOD,SEGAREA_ad,MethodRep,TRANSECT,METHOD.1))
sfm2<-data.sm[data.sm$MethodRep=="SfM_2",];colnames(sfm2)[8:20] <- paste("SfM2", colnames(sfm2[8:20]), sep = "");sfm2<-subset(sfm2,select=-c(METHOD,SEGAREA_ad,MethodRep,TRANSECT,METHOD.1))
df.all <- join_all(list(d1,d2,sfm1,sfm2), by= c("SITE","SITEVISITID","SEGMENT","GENUS_CODE","SS","OBS_YEAR","REGION","ISLAND","SEC_NAME","REEF_ZONE",
"DEPTH_BIN","HABITAT_CODE", "LATITUDE","LONGITUDE","MIN_DEPTH_M","MAX_DEPTH_M"), type='full');
ddply(df.all,.(SITE, SEGMENT), summarize, num.repeats = n_distinct(d1AdColCount))
View(df.all)
colnames(df.all)
data.gen$SST=paste0(data.gen$SS,"_",data.gen$GENUS_CODE)
data.gen$SST=paste0(data.gen$SS,"_",data.gen$GENUS_CODE)
seg4list=ddply(data.gen,.(SST,SS),summarize,NBox=length(unique(MethodRep)))
View(seg4list)
all4seglist=subset(seg4list,NBox>=4)
length(unique(all4seglist[,"SS"]))
data.sm=subset(data.gen,SST %in% all4seglist$SST&GENUS_CODE=="SSSS"|
all4seglist$SST&GENUS_CODE=="POSP"|
all4seglist$SST&GENUS_CODE=="POCS"|
all4seglist$SST&GENUS_CODE=="MOSP")
data.sm=subset(data.gen,SST %in% all4seglist$SST&GENUS_CODE=="SSSS"|
all4seglist$SST&GENUS_CODE=="POSP"|
all4seglist$SST&GENUS_CODE=="POCS"|
all4seglist$SST&GENUS_CODE=="MOSP")
#ADD THIS TO THE DATAPREP RSCRIPT
data.sm$Ave.od[is.na(data.sm$Ave.od)] <- 0
data.sm$Ave.rd[is.na(data.sm$Ave.rd)] <- 0
data.sm$Ave.cl[is.na(data.sm$Ave.cl)] <- 0
data.sm$DZGN_G_prev[is.na(data.sm$DZGN_G_prev)] <- 0
data.sm$BLE_prev[is.na(data.sm$BLE_prev)] <- 0
data.sm$CHRO_prev[is.na(data.sm$CHRO_prev)] <- 0
data.sm=subset(data.gen,SST %in% all4seglist$SST&GENUS_CODE=="SSSS"|
all4seglist$SST&GENUS_CODE=="POSP"|
all4seglist$SST&GENUS_CODE=="POCS"|
all4seglist$SST&GENUS_CODE=="MOSP")
data.gen$SST=paste0(data.gen$SS,"_",data.gen$GENUS_CODE)
data.sm=subset(data.gen,SST %in% all4seglist$SST&GENUS_CODE=="SSSS"|
all4seglist$SST&GENUS_CODE=="POSP"|
all4seglist$SST&GENUS_CODE=="POCS"|
all4seglist$SST&GENUS_CODE=="MOSP")
data.sm=subset(data.gen,SST %in% all4seglist$SST&GENUS_CODE=="SSSS"|all4seglist$SST&GENUS_CODE=="POSP"|all4seglist$SST&GENUS_CODE=="POCS"|all4seglist$SST&GENUS_CODE=="MOSP")
data.sm=subset(data.gen,SST %in% all4seglist$SST&GENUS_CODE=="SSSS")
data.sm=subset(data.gen,SST %in% all4seglist$SST&GENUS_CODE=="SSSS"|all4seglist$SST&GENUS_CODE=="POSP")
data.gen$SST=paste0(data.gen$SS,"_",data.gen$GENUS_CODE)
seg4list=ddply(data.gen,.(SST,SS),summarize,NBox=length(unique(MethodRep)))
all4seglist=subset(seg4list,NBox>=4)
length(unique(all4seglist[,"SS"]))
a=subset(data.gen,SST %in% all4seglist$SST&GENUS_CODE=="SSSS"|
all4seglist$SST&GENUS_CODE=="POSP"|
all4seglist$SST&GENUS_CODE=="POCS"|
all4seglist$SST&GENUS_CODE=="MOSP")
all4seglist=subset(seg4list,NBox>=4)
